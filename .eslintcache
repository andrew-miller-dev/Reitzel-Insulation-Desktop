[{"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\index.js":"1","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\App.js":"2","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\redux\\store.js":"3","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\redux\\reducers\\quoteOneReducer.js":"4","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\admin\\index.js":"5","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\login\\index.js":"6","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\util\\storage.js":"7","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\index.js":"8","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\leftnav\\index.js":"9","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\head\\index.js":"10","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\searchbar\\index.js":"11","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\base.js":"12","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\main\\index.js":"13","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\avatar\\index.js":"14","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\linkbutton\\index.js":"15","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\index.js":"16","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\addressInfo\\index.js":"17","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\newcustomer\\index.js":"18","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\newestimate\\index.js":"19","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\customerInfo\\index.js":"20","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\roles\\index.js":"21","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\users\\index.js":"22","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\trucks\\index.js":"23","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\customers\\index.js":"24","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\invoices\\index.js":"25","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\index.js":"26","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\index.js":"27","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\SalesmanTemplate.js":"28","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\Template.js":"29","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\neworder.js":"30","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\quoteEditAPI.js":"31","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\addresses.js":"32","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\confirmation.js":"33","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\calendar.js":"34","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\customer.js":"35","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesSnapshot.js":"36","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\trucks.js":"37","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesCalendar.js":"38","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tabs.js":"39","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesTooltip.js":"40","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Legend.js":"41","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesTemplate.js":"42","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillCalendar.js":"43","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\FoamCalendar.js":"44","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\updateConfirm.js":"45","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesData.js":"46","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillTemplate.js":"47","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tab.js":"48","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuotePrint.js":"49","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteEdit.js":"50","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteList.js":"51","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuoteOne.js":"52","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\FormOne.js":"53","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteData.js":"54","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\CustomSelect.js":"55","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\quote_template.js":"56","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\Button.js":"57","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\hooks\\input-hook.js":"58","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\quotes.js":"59","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\footer\\index.js":"60","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\headforquote\\index.js":"61","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderPreview.js":"62","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderList.js":"63","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\newOrder.js":"64","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\orders.js":"65","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\menucreate.js":"66","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\leftnavitems.js":"67","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\encryption.js":"68","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\checks.js":"69","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\leftnav.js":"70","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesToolSnap.js":"71","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\assets\\paths.js":"72","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Word_Templates\\quoteWord.js":"73","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteToWordBypass.js":"74","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillTooltip.js":"75","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillFunctions.js":"76","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\confirm_work.js":"77","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\update_work.js":"78","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\workToPDFconvert.js":"79","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Word_Templates\\workPDF.js":"80"},{"size":397,"mtime":1626366420947,"results":"81","hashOfConfig":"82"},{"size":394,"mtime":1626366420911,"results":"83","hashOfConfig":"82"},{"size":278,"mtime":1626366420965,"results":"84","hashOfConfig":"82"},{"size":814,"mtime":1626366420965,"results":"85","hashOfConfig":"82"},{"size":1561,"mtime":1626366420931,"results":"86","hashOfConfig":"82"},{"size":2188,"mtime":1629744733766,"results":"87","hashOfConfig":"82"},{"size":503,"mtime":1629744263402,"results":"88","hashOfConfig":"82"},{"size":4606,"mtime":1629750640242,"results":"89","hashOfConfig":"82"},{"size":1517,"mtime":1629904766435,"results":"90","hashOfConfig":"82"},{"size":2130,"mtime":1629749393241,"results":"91","hashOfConfig":"82"},{"size":1251,"mtime":1637606839959,"results":"92","hashOfConfig":"82"},{"size":1463,"mtime":1629755892287,"results":"93","hashOfConfig":"82"},{"size":1554,"mtime":1637773471317,"results":"94","hashOfConfig":"82"},{"size":1670,"mtime":1626366420932,"results":"95","hashOfConfig":"82"},{"size":165,"mtime":1626366420955,"results":"96","hashOfConfig":"82"},{"size":1417,"mtime":1638479638025,"results":"97","hashOfConfig":"82"},{"size":3783,"mtime":1631727373567,"results":"98","hashOfConfig":"82"},{"size":5101,"mtime":1638819407449,"results":"99","hashOfConfig":"82"},{"size":11135,"mtime":1637777601902,"results":"100","hashOfConfig":"82"},{"size":15779,"mtime":1637773257406,"results":"101","hashOfConfig":"82"},{"size":5788,"mtime":1638213694425,"results":"102","hashOfConfig":"82"},{"size":10602,"mtime":1636564938453,"results":"103","hashOfConfig":"82"},{"size":5756,"mtime":1636648889042,"results":"104","hashOfConfig":"82"},{"size":2479,"mtime":1637773644747,"results":"105","hashOfConfig":"82"},{"size":102,"mtime":1626366420954,"results":"106","hashOfConfig":"82"},{"size":375,"mtime":1626366420953,"results":"107","hashOfConfig":"82"},{"size":2349,"mtime":1631727100054,"results":"108","hashOfConfig":"82"},{"size":5200,"mtime":1631811657557,"results":"109","hashOfConfig":"82"},{"size":870,"mtime":1626366420953,"results":"110","hashOfConfig":"82"},{"size":1438,"mtime":1637777626807,"results":"111","hashOfConfig":"82"},{"size":5606,"mtime":1638390776430,"results":"112","hashOfConfig":"82"},{"size":731,"mtime":1637775134840,"results":"113","hashOfConfig":"82"},{"size":1649,"mtime":1630523734662,"results":"114","hashOfConfig":"82"},{"size":9653,"mtime":1638491805020,"results":"115","hashOfConfig":"82"},{"size":3560,"mtime":1637773661628,"results":"116","hashOfConfig":"82"},{"size":4393,"mtime":1631726520669,"results":"117","hashOfConfig":"82"},{"size":1703,"mtime":1638379333387,"results":"118","hashOfConfig":"82"},{"size":18463,"mtime":1638386131189,"results":"119","hashOfConfig":"82"},{"size":1461,"mtime":1626366420946,"results":"120","hashOfConfig":"82"},{"size":3124,"mtime":1630353735151,"results":"121","hashOfConfig":"82"},{"size":1693,"mtime":1637776851064,"results":"122","hashOfConfig":"82"},{"size":228,"mtime":1630510004323,"results":"123","hashOfConfig":"82"},{"size":12862,"mtime":1638807930569,"results":"124","hashOfConfig":"82"},{"size":12878,"mtime":1638807892602,"results":"125","hashOfConfig":"82"},{"size":1536,"mtime":1630514971885,"results":"126","hashOfConfig":"82"},{"size":1805,"mtime":1626366420945,"results":"127","hashOfConfig":"128"},{"size":344,"mtime":1638388838584,"results":"129","hashOfConfig":"82"},{"size":843,"mtime":1626366420945,"results":"130","hashOfConfig":"82"},{"size":5793,"mtime":1636044338262,"results":"131","hashOfConfig":"82"},{"size":18519,"mtime":1631727047617,"results":"132","hashOfConfig":"82"},{"size":10991,"mtime":1638984766710,"results":"133","hashOfConfig":"82"},{"size":20317,"mtime":1637773687517,"results":"134","hashOfConfig":"82"},{"size":887,"mtime":1629387123219,"results":"135","hashOfConfig":"82"},{"size":2846,"mtime":1626366420961,"results":"136","hashOfConfig":"82"},{"size":708,"mtime":1626366420935,"results":"137","hashOfConfig":"82"},{"size":3515,"mtime":1638997026905,"results":"138","hashOfConfig":"82"},{"size":360,"mtime":1626366420935,"results":"139","hashOfConfig":"82"},{"size":428,"mtime":1626366420947,"results":"140","hashOfConfig":"82"},{"size":2042,"mtime":1638996752815,"results":"141","hashOfConfig":"82"},{"size":1047,"mtime":1626366420951,"results":"142","hashOfConfig":"82"},{"size":304,"mtime":1626366420952,"results":"143","hashOfConfig":"82"},{"size":8787,"mtime":1628097459554,"results":"144","hashOfConfig":"82"},{"size":7481,"mtime":1638984889332,"results":"145","hashOfConfig":"82"},{"size":9786,"mtime":1638390442790,"results":"146","hashOfConfig":"82"},{"size":4511,"mtime":1639002961905,"results":"147","hashOfConfig":"82"},{"size":1273,"mtime":1629748428924,"results":"148","hashOfConfig":"82"},{"size":1565,"mtime":1629742813424,"results":"149","hashOfConfig":"82"},{"size":341,"mtime":1629755072998,"results":"150","hashOfConfig":"128"},{"size":274,"mtime":1629909880364,"results":"151","hashOfConfig":"128"},{"size":2365,"mtime":1629387123217,"results":"152","hashOfConfig":"82"},{"size":860,"mtime":1630510155273,"results":"153","hashOfConfig":"82"},{"size":178,"mtime":1630521564213,"results":"154","hashOfConfig":"82"},{"size":10137,"mtime":1638987083159,"results":"155","hashOfConfig":"82"},{"size":1792,"mtime":1638812201358,"results":"156","hashOfConfig":"82"},{"size":1616,"mtime":1638389110544,"results":"157","hashOfConfig":"82"},{"size":3147,"mtime":1638213181708,"results":"158","hashOfConfig":"82"},{"size":1744,"mtime":1639001469154,"results":"159","hashOfConfig":"82"},{"size":1321,"mtime":1638486697031,"results":"160","hashOfConfig":"82"},{"size":1841,"mtime":1639002974175,"results":"161","hashOfConfig":"82"},{"size":9992,"mtime":1638985383468,"results":"162","hashOfConfig":"82"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},"dyyy9a",{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"165"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"165"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"165"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"165"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"165"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"165"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"165"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"165"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"165"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"165"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"165"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"165"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"165"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"165"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"165"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"165"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"165"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"165"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},"i4azzc",{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"165"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"165"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"165"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"165"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"165"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"165"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"165"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"165"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"165"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"165"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"165"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"165"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"165"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"165"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"335"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"165"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"165"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"165"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"165"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"165"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"165"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"362","messages":"363","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"165"},"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\index.js",[],["365","366"],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\App.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\redux\\store.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\redux\\reducers\\quoteOneReducer.js",["367"],"\r\nconst intialState = {\r\n    \"quote_selected\": null,\r\n    \"quote_one\":{\r\n        first_name: \"\",\r\n        last_name: \"\",\r\n        billing_address: \"\",\r\n        city: \"\",\r\n        post_code: \"\",\r\n        phone_number: \"\",\r\n        email: \"\",\r\n        customer_notes: \"\",\r\n        installer_notes: \"\",\r\n        salesman: \"\",\r\n        products: [{\r\n            name: null,\r\n            option: null,\r\n            price: 0.00\r\n        }]\r\n    },\r\n}\r\n\r\n\r\nexport default (state = intialState, action) => {\r\n    switch (action.type) {\r\n        case \"quote_selected\":\r\n            return {\r\n                quote_selected: action.payload,\r\n            };\r\n        case \"quote_one\":\r\n            return {\r\n                quote_one: action.payloadq,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\admin\\index.js",["368","369"],"import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Layout } from \"antd\";\r\nimport Main from \"../main\";\r\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\r\nimport \"./index.css\";\r\nimport Leftnav from \"../leftnav\";\r\nimport Head from \"../head\";\r\nimport { getUser } from \"../../util/storage\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport Searchbar from \"../searchbar\";\r\nimport { datas } from \"../../api/index\";\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nexport default class Homepage extends React.Component {\r\n  state = {\r\n    user: \"\",\r\n  };\r\n  componentDidMount = async () => {\r\n    const user = await getUser();\r\n    this.setState({ user });\r\n  };\r\n  render() {\r\n    const { user } = this.state;\r\n    const SecurityLevel =\r\n      (this.state.user && this.state.user.SecurityLevel) || \"\";\r\n    const FirstName = (this.state.user && this.state.user.FirstName) || \"\";\r\n    if (!getUser()) return <Redirect to=\"/login\" />;\r\n    return (\r\n      <Layout className=\"layout\">\r\n        <Sider>\r\n          <Leftnav role={SecurityLevel} imgUrl={datas.user[0].imgUrl}></Leftnav>\r\n        </Sider>\r\n        <Layout className=\"main-layout\">\r\n          <Header className=\"header\">\r\n            <Head username={FirstName} />\r\n          </Header>\r\n\r\n          <Content className=\"content\">\r\n            <Searchbar />\r\n            <Main />\r\n          </Content>\r\n          <Footer style={{ textAlign: \"center\" }}>\r\n            ©2021 Created by Team Explorers\r\n          </Footer>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\login\\index.js",["370"],"import React, { useState } from \"react\";\r\nimport { Button, Form, Input, message } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport \"./index.css\";\r\nimport { getLogin, reqWeather, getMenuData } from \"../../api/index\";\r\nimport { setUser, getUser, setMenu } from \"../../util/storage\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst { Item } = Form;\r\nexport default function Login(props) {\r\n  const handleSubmit = async (values) => {\r\n    const { loginId, loginPwd } = values;\r\n    const result = await getLogin(loginId, loginPwd);\r\n    reqWeather(\"toronto\");\r\n    if (result.data && result.data.length > 0) {\r\n      let menuData = await getMenuData(result.data[0]);\r\n      setUser(result.data[0]);\r\n      setMenu(menuData.data[0]);\r\n      props.history.replace(\"/\");\r\n      message.success(\"Login Success!\");\r\n    } else {\r\n      message.info(\"Username or Password not correct!\");\r\n    }\r\n  };\r\n  if (getUser()) return <Redirect to=\"/\" />;\r\n  return (\r\n    <div className=\"login_page\">\r\n      <div className=\"login\">\r\n        <h2>Login</h2>\r\n        <Form onFinish={handleSubmit} autoComplete=\"off\">\r\n          <Item\r\n            name=\"loginId\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Cannot be Empty\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              style={{ backgroundColor: \"transparent\" }}\r\n              prefix={<UserOutlined />}\r\n              placeholder=\"username\"\r\n            />\r\n          </Item>\r\n          <Item\r\n            name=\"loginPwd\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Cannot be Empty\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input.Password prefix={<LockOutlined />} placeholder=\"password\" />\r\n          </Item>\r\n          <Item className=\"login_button\">\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              shape=\"round\"\r\n              size=\"large\"\r\n              block\r\n            >\r\n              Login\r\n            </Button>\r\n          </Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\util\\storage.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\leftnav\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\head\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\searchbar\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\base.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\main\\index.js",["371"],"import React from \"react\";\r\nimport { Switch, Redirect, Route } from \"react-router-dom\";\r\nimport Home from \"../../pages/home\";\r\nimport Quotes from \"../../pages/quotes\";\r\nimport Orders from \"../../pages/orders\";\r\nimport Invoices from \"../../pages/invoices\";\r\nimport Customers from \"../../pages/customers\";\r\nimport Users from \"../../pages/users\";\r\nimport Roles from \"../../pages/roles\";\r\nimport Trucks from \"../../pages/trucks\";\r\nimport CustomerInfo from \"../../pages/customerInfo\";\r\nimport AddressInfo from \"../../pages/addressInfo\";\r\nimport NewCusomter from \"../../pages/newcustomer\";\r\nimport NewEstimate from \"../../pages/newestimate\";\r\nimport \"./index.css\";\r\n\r\nconst id = 0;\r\nexport default function Main() {\r\n  return (\r\n    <div className=\"content-main\">\r\n      <Switch>\r\n        <Route path=\"/home\" component={Home} />\r\n        <Route path=\"/quotes\" component={Quotes} />\r\n        <Route path=\"/orders\" component={Orders} />\r\n        <Route path=\"/invoices\" component={Invoices} />\r\n        <Route path=\"/customers\" component={Customers} />\r\n        <Route path=\"/users\" component={Users} />\r\n        <Route path=\"/roles\" component={Roles} />\r\n        <Route path=\"/trucks\" component={Trucks} />\r\n        <Route path=\"/customerinfo/:customer\" component={CustomerInfo} />\r\n        <Route path=\"/addressinfo/:address\" component={AddressInfo} />\r\n        <Route path=\"/newcustomer\" component={NewCusomter} />\r\n        <Route path=\"/newestimate\" component={NewEstimate} />\r\n        <Redirect to=\"/home\"></Redirect>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\avatar\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\linkbutton\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\index.js",["372","373","374"],"import { Route, Switch,  Link, useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport React, {useState} from \"react\";\r\nimport OrderList from \"../orders/orderList\";\r\nimport NewOrder from \"./newOrder\";\r\nimport OrderPreview from './orderPreview';\r\nimport { Button, Space } from \"antd\";\r\nimport \"./index.css\";\r\n\r\nexport default function Orders() {\r\n  let { path, url } = useRouteMatch();\r\n  let history = useHistory();\r\n\r\n const [orderData, setOrderData] = useState({});\r\n\r\n function updateOrderData(values) {\r\n  if (!(values == null || values  == \"\" || values == undefined)) {\r\n    setOrderData(values);\r\n    history.push(`/home`);\r\n}else{\r\n    setOrderData({});\r\n}\r\n } \r\n  return (\r\n    <div style={{padding: \"10px\", margin: \"10px\"}}>\r\n      <div>\r\n        <h2> Orders<Space style={{float:\"right\"}}><Link to=\"/orders/orderList\" ><Button>View All Work Orders</Button></Link></Space></h2>\r\n      </div> \r\n      <hr/>\r\n      <Switch>\r\n        <Route exact path={path} >\r\n          \r\n          </Route>\r\n        <Route path=\"/orders/:oid/new\" >\r\n          <NewOrder updateOrder = {updateOrderData} />\r\n        </Route>\r\n        <Route path=\"/orders/:oid/edit\" >\r\n\r\n        </Route>\r\n        <Route path=\"/orders/orderList\">\r\n          <OrderList/>\r\n        </Route>\r\n        <Route path='/orders/preview'>\r\n          <OrderPreview orderInfo = {orderData} />\r\n        </Route>\r\n      </Switch>\r\n      </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\addressInfo\\index.js",["375","376","377","378"],"import React, {useEffect, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Form } from \"antd\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport {getAllInfo} from \"../../api/quoteEditAPI\";\r\nconst { Item } = Form;\r\nconst {format } = require('date-fns-tz')\r\n\r\nexport default function AddressInfo() {\r\n \r\n  let match = useRouteMatch('/addressinfo/:address').params.address;\r\n  const [addressInfo, setaddressinfo] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [formView] = Form.useForm();\r\n  const [formData, setFormData] = useState([]);\r\n  const [testData, setTestData] = useState([]);\r\n\r\n    useEffect(async() => {\r\n        const func = async () => {\r\n          let result2 = await getAllInfo(match);\r\n          console.log(result2);\r\n          setTestData(result2.data);\r\n    };\r\n        func();\r\n        \r\n        if(testData !== []){\r\n          setTableData(createTable());\r\n          setLoaded(true);\r\n        }\r\n        \r\n      }, [tableData.length]);\r\n\r\n    const checkDate = (date) => {\r\n      console.log('date', date);\r\n      let returnDate = \"\";\r\n      if(date === \"December 31st, 1969\"){\r\n      }\r\n      else{\r\n        returnDate = date;\r\n    }\r\n    return returnDate;\r\n    }\r\n    const createTable = () => {\r\n      let tableList = testData.map((item) => (\r\n        {\r\n          id: item.QuoteID,\r\n          salesman: item.FirstName + \" \" + item.LastName,\r\n          creationDate: format(new Date(item.creationDate),\"MMMM do',' yyyy\"),\r\n          modifyDate: checkDate(format(new Date(item.modifyDate), \"MMMM do',' yyyy\")),\r\n          total: item.QuoteTotal\r\n      }));\r\n      return tableList;\r\n    };\r\n\r\n    const columns =[\r\n      \r\n      {\r\n        title:\"Salesman\",\r\n        dataIndex:\"FirstName\",\r\n        key:\"user\"\r\n      },\r\n      {\r\n        title:\"Quote Total\",\r\n        dataIndex:\"QuoteTotal\",\r\n        key:\"total\"\r\n      },\r\n      {\r\n        title:\"Show/Edit Quote Info\",\r\n        key:\"OpenQuote\",\r\n        render: (data) => \r\n          (\r\n            <div>\r\n              <Button\r\n         \r\n          href={`/quoteinfo/${data.id}`}>\r\n          Edit Quote  \r\n          </Button>\r\n            <Button\r\n            onClick={() => {setShowForm(true);\r\n                            setFormData(data);\r\n                            }}>\r\n            View Quote</Button>\r\n            </div>)\r\n      },\r\n      {\r\n        title:\"Creation Date\",\r\n        dataIndex:\"creationDate\",\r\n        key:\"date\"\r\n      },\r\n      {\r\n        title:\"Last Modified\",\r\n        dataIndex:\"modifyDate\",\r\n        key:\"modDate\"\r\n      }   \r\n\r\n    ]\r\n    if(loaded){\r\n\r\n      return(\r\n        <div>\r\n          <Card title=\"Customer Information\"></Card>\r\n        <Card title=\"Address Information\">\r\n           {addressInfo.address}\r\n           <br />\r\n           {addressInfo.city}\r\n           <br />\r\n          {addressInfo.postal}\r\n        </Card>\r\n\r\n        <h2>Active Quotes</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={testData}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n\r\n\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Quote\"\r\n        onOk={() => {console.log(\"submit\")}}\r\n        onCancel={() => {setShowForm(false)}}>\r\n          <Form \r\n          form={formView}\r\n          labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}>\r\n            <Item name=\"test\">\r\n\r\n            </Item>\r\n          </Form>\r\n        </Modal>\r\n          </div>\r\n      )\r\n    }\r\n\r\n    else{\r\n      return(\r\n        <div>\r\n          Loading...\r\n        </div>\r\n        \r\n      );\r\n      \r\n    }\r\n    }","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\newcustomer\\index.js",["379"],"import React, {useState} from \"react\";\r\nimport { Form, Input, Button, Select, message } from \"antd\";\r\nimport { addCustomer, addAddress } from \"../../api/neworder\";\r\nimport \"./index.css\";\r\nimport validator from \"validator\";\r\nconst layout = {\r\n  labelCol: { span: 2 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst { Item } = Form;\r\nconst { Option } = Select;\r\nexport default function NewCustomer(props) {\r\n  const [form] = Form.useForm();\r\n  const regions = [\r\n    \"Elmira & area\",\r\n    \"Guelph & area\",\r\n    \"Cambridge & area\",\r\n    \"Hamilton & area\",\r\n    \"Stratford & area\",\r\n    \"Listowel area\",\r\n    \"Greater Toronto Area\",\r\n    \"Kitchener - Waterloo\",\r\n    \"Brantford, Paris, Burford, Waterford, Brant County, Haldmald, Caledonia\",\r\n  ];\r\n  const [validEmail, setValidEmail] = useState('');\r\n  const [errorColor, setErrorColor] = useState('red');\r\n  const options = regions.map((item, index) => (\r\n    <Option key={index + 1}>{item}</Option>\r\n  ));\r\n  const onFinish = async (values) => {\r\n    let newVal = {\r\n      BillingAddress : values.BillingAddress,\r\n      City: values.City,\r\n      Email: values.Email,\r\n      FirstName:values.FirstName,\r\n      LastName:values.LastName,\r\n      Phone:values.Phone,\r\n      PostalCode:values.PostalCode,\r\n      Prov:values.Prov,\r\n      Region:values.Region\r\n    }\r\n    let customerInfo = await addCustomer(newVal);\r\n    var latestCustomer = customerInfo.data.insertId;\r\n    var newAddress = await addAddress(latestCustomer, newVal);\r\n    console.log(\"new address\",newAddress);\r\n    if (newAddress.status == 200) {\r\n      message.success(\"Added successfully\");\r\n      props.history.push(\"/customers\");\r\n    } else message.warn(\"Something went wrong\");\r\n  };\r\n  const emailCheck = (value) => {\r\n    let word = value.target.value;\r\n    if(validator.isEmail(word)){\r\n      setValidEmail('Valid email');\r\n      setErrorColor('green');\r\n    }\r\n    else {\r\n      setValidEmail('Not a valid email');\r\n      setErrorColor('red');\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"neworder\">\r\n      <Form form={form} onFinish={onFinish} {...layout}>\r\n        <Item\r\n        label=\"First Name\"\r\n          name=\"FirstName\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"First Name\" />\r\n        </Item>\r\n        <Item\r\n        label=\"Last Name\"\r\n          name=\"LastName\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Last Name\" />\r\n        </Item>\r\n        <Item\r\n        label=\"Address\"\r\n          name=\"BillingAddress\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Billing Address\" />\r\n        </Item>\r\n        <Item\r\n          label=\"City\"\r\n          name=\"City\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"City\" />\r\n        </Item>\r\n        <Item\r\n          label=\"Province\"\r\n          name=\"Prov\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Province\" />\r\n        </Item>\r\n        <Item\r\n          label=\"Postal Code\"\r\n          name=\"PostalCode\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Postal Code\" />\r\n        </Item>\r\n        <Item\r\n          label=\"Phone\"\r\n          name=\"Phone\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Phone Number\" />\r\n        </Item>\r\n        <Item\r\n          label=\"Email\"\r\n          name=\"Email\"\r\n          rules={[{\r\n            required: true,\r\n            message:\"Required Field\"\r\n          }]}\r\n        >\r\n          <Input onChange={emailCheck} placeholder=\"Email\" />\r\n        </Item>\r\n        <Item\r\n            label=\"Email Check\">\r\n              <span \r\n              style={{\r\n                fontSize:12,\r\n                color:errorColor\r\n              }}>\r\n          {validEmail}\r\n          </span>\r\n            </Item>\r\n        <Item\r\n          label=\"Region\"\r\n          name=\"Region\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select>{options}</Select>\r\n        </Item>\r\n        <Item className=\"login_button\">\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            block\r\n          >\r\n            Add\r\n          </Button>\r\n        </Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\newestimate\\index.js",["380","381","382","383","384"],"import React, { useEffect, useState } from \"react\";\r\nimport validator from \"validator\";\r\nimport { Form, DatePicker, Input, Button, Select, message, Card, Modal } from \"antd\";\r\nimport {\r\n  addCustomer,\r\n  addEstimate,\r\n  addAddress,\r\n} from \"../../api/neworder\";\r\nimport SalesSnapshot from '../../Components/HomeTemplate/SalesCalendar/SalesSnapshot'\r\nimport { getRegionAPI, getUsers, sendConfirm } from \"../../api/calendar\";\r\nimport \"./index.css\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport Confirmation from \"../../Components/Email_Templates/confirmation\"\r\nimport {renderEmail} from 'react-html-email';\r\nimport { customer_info_sheet } from \"../../assets/paths\";\r\nconst { RangePicker } = DatePicker;\r\nconst { Item } = Form;\r\nconst { Option } = Select;\r\nconst { format } = require(\"date-fns-tz\");\r\n\r\n\r\nexport default function NewEstimate(props) {\r\n  const [info, setInfo] = useState(false);\r\n  const [salesmen, setSalesmen] = useState([]);\r\n  const [regions, setRegions] = useState([]);\r\n  const [form] = Form.useForm();\r\n  const [showCalendar, setShowCalendar] = useState(false);\r\n  const [validEmail, setValidEmail] = useState('');\r\n  const [errorColor, setErrorColor] = useState('red');\r\n  const layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 14 },\r\n  };\r\n  const options = regions.map((item) => (\r\n    <Option key={item.id}>{item.region}</Option>\r\n  ));\r\n  const jobs = [\"loosefill\", \"spray\", \"removal\", 'fireproofing'];\r\n  const options1 = jobs.map((item, index) => (\r\n    <Option key={item}>{item}</Option>\r\n  ));\r\n\r\n  const emailCheck = (value) => {\r\n    let word = value.target.value;\r\n    if(validator.isEmail(word)){\r\n      setValidEmail('Valid email');\r\n      setErrorColor('green');\r\n    }\r\n    else {\r\n      setValidEmail('Not a valid email');\r\n      setErrorColor('red');\r\n    }\r\n  }\r\n\r\n  const getregions = async () => {\r\n    const data = await getRegionAPI();\r\n    let regionData = data.data.map((item) => ({\r\n      id: item.RegionID,\r\n      region: item.Region,\r\n      color: item.color,\r\n    }));\r\n    setRegions(regionData);\r\n  };\r\n\r\n  const getsalesmen = async () => {\r\n    const data = await getUsers();\r\n    let salesData = data.data.map((item) => ({\r\n      id: item.UserID,\r\n      FirstName: item.FirstName,\r\n      LastName: item.LastName,\r\n    }));\r\n    setSalesmen(salesData);\r\n  };\r\n\r\n  const options2 = salesmen.map((item) => (\r\n    <Option key={item.id}>{item.FirstName}</Option>\r\n  ));\r\n\r\n  const onFinish = async (values) => {\r\n\r\n    var customer = {\r\n      FirstName: values.FirstName,\r\n      LastName: values.LastName,\r\n      Phone: values.Phone,\r\n      Email: values.Email,\r\n      BillingAddress: values.BillingAddress || ' ',\r\n      City: values.City || ' ',\r\n      Prov: values.Prov || ' ',\r\n      PostalCode: values.PostalCode || ' ',\r\n      Region: values.Region || ' ',\r\n    };\r\n    var siteAddress = {\r\n      BillingAddress: values.siteAddress,\r\n      City: values.siteCity,\r\n      Prov: values.siteProv,\r\n      PostalCode: values.sitePostal,\r\n      Region: values.siteRegion\r\n    };\r\n    var estimate = {\r\n      UserID: values.salesman,\r\n      JobType: values.JobType,\r\n      Region: values.siteRegion,\r\n      startDate: format(\r\n        values.selectedDate[0]._d,\r\n        \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\"\r\n      ),\r\n      endDate: format(\r\n        values.selectedDate[1]._d,\r\n        \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\"\r\n      ),\r\n      estimateInfo: values.EstimateInfo,\r\n    };\r\n\r\n    let customerInfo = await addCustomer(customer);\r\n    var latestCustomer = customerInfo.data.insertId;\r\n    if(customer.BillingAddress !== ' ') {\r\n           let addressResult = await addAddress(latestCustomer, customer);\r\n           let addressID = addressResult.data.insertId;\r\n           var estimateResult = await addEstimate(\r\n            latestCustomer,\r\n            addressID,\r\n            estimate\r\n          );\r\n          if (estimateResult.status === 200) {\r\n            message.success(\"Added new estimate\");\r\n          } \r\n          else message.warn(\"Something went wrong\");\r\n    }\r\n    if (siteAddress.BillingAddress !== ' ') {\r\n          let addressResult = await addAddress(latestCustomer, siteAddress);\r\n          let addressID = addressResult.data.insertId;\r\n           var estimateResult = await addEstimate(\r\n            latestCustomer,\r\n            addressID,\r\n            estimate\r\n          );\r\n          if (estimateResult.status === 200) {\r\n            message.success(\"Added new estimate\");\r\n          } \r\n          else message.warn(\"Something went wrong\");\r\n    }\r\n    if(validator.isEmail(customer.Email)){\r\n      sendConfirm(customer.Email, renderEmail(<Confirmation customerInfo = {customer} siteInfo = {siteAddress} estimateInfo = {estimate}  />), customer_info_sheet)\r\n    }\r\n    props.history.push(\"/home\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    getsalesmen();\r\n    getregions();\r\n    if (salesmen != [] && regions != []) {\r\n      setInfo(true);\r\n    }\r\n  }, []);\r\n  if (info != true) {\r\n    return <p>Loading Information...</p>;\r\n  } else {\r\n    return (\r\n      <div className=\"neworder\">\r\n        <Card>\r\n          <Form form={form} onFinish={onFinish} {...layout}>\r\n            <Item\r\n              label=\"First Name\"\r\n              name=\"FirstName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"First Name\" />\r\n            </Item>\r\n            <Item\r\n              label=\"Last Name\"\r\n              name=\"LastName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Last Name\" />\r\n            </Item>\r\n            <Item\r\n              label=\"Phone\"\r\n              name=\"Phone\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Phone Number\" />\r\n            </Item>\r\n            <Item\r\n             label=\"Email Address\" \r\n             name=\"Email\"\r\n             rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}\r\n             >\r\n              <Input\r\n              onChange={emailCheck} />\r\n              \r\n            </Item>\r\n            <Item\r\n            label=\"Email Check\">\r\n              <span \r\n              style={{\r\n                fontSize:12,\r\n                color:errorColor\r\n              }}>\r\n          {validEmail}\r\n          </span>\r\n            </Item>\r\n            <Item label=\"Site Address\" name=\"siteAddress\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}>\r\n              <Input placeholder=\"Address\" />\r\n            </Item>\r\n            <Item label=\"Site City\" name=\"siteCity\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}>\r\n              <Input placeholder=\"City\" />\r\n            </Item>\r\n            <Item label=\"Site Province\" name=\"siteProv\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}>\r\n              <Input placeholder=\"Province\" />\r\n            </Item>\r\n            <Item label=\"Postal Code\" name=\"sitePostal\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}>\r\n              <Input placeholder=\"Postal Code\" />\r\n            </Item>\r\n            <Item name=\"siteRegion\" label=\"Site Region\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}>\r\n              <Select>{options}</Select>\r\n            </Item>\r\n            <i>optional billing address</i><br/>\r\n            <i>---</i>\r\n            <Item\r\n              label=\"Billing Address\"\r\n              name=\"BillingAddress\" \r\n            >\r\n            <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"City\"\r\n              name=\"City\"\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Province\"\r\n              name=\"Prov\"\r\n            >\r\n              <Input  />\r\n            </Item>\r\n            <Item\r\n              label=\"Postal Code\"\r\n              name=\"PostalCode\"\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              name=\"Region\"\r\n              label=\"Region\"\r\n            >\r\n              <Select>{options}</Select>\r\n            </Item>\r\n            <i>---</i>\r\n            <Item\r\n              name=\"selectedDate\"\r\n              label=\"Time\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <RangePicker\r\n                showTime={{ format: \"HH:mm\" }}\r\n                format=\"YYYY-MM-DD HH:mm\"\r\n                className=\"datepicker\"\r\n              />\r\n              \r\n            </Item>\r\n            <Item\r\n            label=\"Calendar\">\r\n            <Button type=\"primary\" onClick={() => {setShowCalendar(true)}}>Show Calendar</Button>\r\n            </Item>\r\n            <Item\r\n              name=\"JobType\"\r\n              label=\"Type of Job\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select>{options1}</Select>\r\n            </Item>\r\n            <Item\r\n              label=\"Information\"\r\n              name=\"EstimateInfo\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <TextArea rows={4} placeholder=\"Estimate Information\" />\r\n            </Item>\r\n            <Item\r\n              name=\"salesman\"\r\n              label=\"Assigned Salesman\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select>{options2}</Select>\r\n            </Item>\r\n            <Item>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                shape=\"round\"\r\n                size=\"large\"\r\n                block\r\n              >\r\n                Create Estimate\r\n              </Button>\r\n            </Item>\r\n          </Form>\r\n        </Card>\r\n        <Modal\r\n        visible={showCalendar}\r\n        onCancel={() => {setShowCalendar(false)}}\r\n        width=\"90%\"\r\n        >\r\n        <SalesSnapshot />\r\n      </Modal>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\customerInfo\\index.js",["385","386","387","388"],"import React, {useEffect, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Form, Input, message, Select, Space } from \"antd\";\r\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\r\nimport {getRegion, updateCustomer, getCustomer, getCustomerAddresses, deleteCustomer, addAddress, addNotes, getNotes} from '../../api/customer';\r\n\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\";\r\nimport {getUser} from '../../util/storage';\r\nimport { getRegionAPI } from '../../api/calendar';\r\nconst { Item } = Form;\r\nconst { confirm } = Modal;\r\nconst { Option } = Select;\r\nconst {TextArea} = Input;\r\nconst { format } = require('date-fns-tz')\r\n\r\nexport function CustomerInfo() {\r\n\r\n  let match = useRouteMatch('/customerinfo/:customer').params.customer;\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [showAddress, setShowAddress] = useState(false);\r\n  const [formAddress] = Form.useForm();\r\n  const [form1] = Form.useForm();\r\n  const [regions, setRegions] = useState([]);\r\n  const [customerInfo, setcustomerinfo] = useState([]);\r\n  const [addressList, setAddressList] = useState([]);\r\n  const [user, setUser] = useState(\"\");\r\n  const [notes, setNotes] = useState([]);\r\n  const [count, setCount] = useState(0);\r\n\r\n  const options = regions.map((item) => (\r\n    <Option key={item.id}>{item.name}</Option>\r\n  ));\r\n    useEffect(() => {\r\n        const func = async () => {\r\n           await getCustomer(match).then((info) => {\r\n            var customerInfo = info.data.map((item) =>({\r\n            id: item.CustomerID,\r\n            firstName: item.CustFirstName,\r\n            lastName: item.CustLastName,\r\n            email: item.Email,\r\n            phone: item.Phone,\r\n            billing: item.BillingAddress,\r\n            city: item.CustCity,\r\n            postal: item.CustPostalCode,\r\n            region: item.CustRegion\r\n          }));\r\n          setcustomerinfo(customerInfo[0]);\r\n          });\r\n          let userInfo = getUser();\r\n          let initial = userInfo.FirstName.charAt(0) + userInfo.LastName.charAt(0);\r\n          setUser(initial);\r\n           await getNotes(match).then((notes) => {\r\n            setNotes(notes.data);\r\n          })\r\n        };\r\n        func();\r\n        getAddressList();\r\n        getRegions();\r\n        document.getElementsByName(\"notes\")[0].value = \"\";\r\n\r\n        \r\n      }, [count]);\r\n\r\n    const getAddressList = async () => {\r\n        await getCustomerAddresses(match).then((list) => {\r\n          var addresses = list.data.map((item) =>({\r\n          id: item.AddressID,\r\n          address: item.Address,\r\n          postalcode: item.PostalCode,\r\n          city: item.City,\r\n          prov: item.Province,\r\n          region: item.Region\r\n        }));\r\n        setAddressList(addresses);\r\n        })\r\n      };\r\n      const getRegions = async() => {\r\n        var result = await getRegionAPI();\r\n        var regionList = result.data.map((item) =>({\r\n          id:item.RegionID,\r\n          name:item.Region\r\n        }));\r\n        setRegions(regionList);\r\n      }\r\n      const title = (\r\n        <div>\r\n          <Space>\r\n\r\n          \r\n          <Button\r\n            type=\"primary\"\r\n          onClick={() => {\r\n              setShowForm(true);\r\n              form1.setFieldsValue({\r\n              firstName: customerInfo.firstName,\r\n              lastName: customerInfo.lastName,\r\n              email: customerInfo.email,\r\n              phone: customerInfo.phone,\r\n              billing: customerInfo.billing,\r\n             city: customerInfo.city,\r\n              postal: customerInfo.postal,\r\n              region: customerInfo.region\r\n             });\r\n            }}\r\n          >\r\n            Modify\r\n          </Button>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => {\r\n              handleDeleteCustomer(customerInfo.id);\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n      const handleUpdate = async () => {\r\n        const validResult = await form1.validateFields();\r\n        if (validResult.errorFields && validResult.errorFields.length > 0) return;\r\n        const value = form1.getFieldsValue();\r\n        console.log(value);\r\n        //const { firstName, lastName, email, phone, billing, city, postal, region } = value;\r\n        const id = customerInfo.id;\r\n        console.log(\"id\", id);\r\n        //update data in the backend\r\n        const result = await updateCustomer(id, value.firstName, value.lastName, value.email, value.phone, value.billing, value.city, value.postal, value.region);\r\n        setShowForm(false);\r\n        console.log(result);\r\n        if (result.status === 200) {\r\n          message.success(\"Successfully updated customer information\");\r\n        }\r\n      };\r\n      const handleDeleteCustomer = async (id) => {\r\n        confirm({\r\n          title: \"Are you sure you want to delete this customer?\",\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: \"\",\r\n          okText: \"Yes\",\r\n          okType: \"danger\",\r\n          cancelText: \"No\",\r\n          onOk() {\r\n            return new Promise((resolve, reject) => {\r\n              const result = deleteCustomer(id);\r\n              console.log(result);\r\n              message.success(\"Customer has been successfully deleted\");\r\n              resolve();\r\n              \r\n            });\r\n          },\r\n          onCancel() {\r\n            console.log(\"Cancel\");\r\n          },\r\n        });\r\n        \r\n      }\r\n      const handleNewAddress = async () =>{\r\n        const validResult = await formAddress.validateFields();\r\n        if (validResult.errorFields && validResult.errorFields.length > 0) return;\r\n        const value = formAddress.getFieldsValue();\r\n        const info = {\r\n          BillingAddress: value.address,\r\n          PostalCode: value.postalCode,\r\n          City: value.city,\r\n          Prov: value.prov,\r\n          Region: value.region\r\n        }\r\n        let id = customerInfo.id;\r\n        var result = await addAddress(id, info);\r\n        console.log(result);\r\n        if (result.status == 200){\r\n          message.success(\"added new address\");\r\n        }\r\n        setShowAddress(false);\r\n\r\n      }\r\n      const getNoteTable = () => {\r\n        let rows = [];\r\n        notes.map((item) => {\r\n          rows.push(\r\n            <tr>\r\n              <td>\r\n                {item.custNotes}\r\n              </td>\r\n              <td>\r\n                {format(new Date(item.dateAdded), \"MMMM do',' yyyy\")}\r\n              </td>\r\n              <td>\r\n                {item.UserInitial}\r\n              </td>\r\n            </tr>\r\n         \r\n            \r\n          );\r\n        });\r\n        return rows;\r\n      }\r\n    const columns =[\r\n      {\r\n        title:\"Address\",\r\n        dataIndex:\"address\",\r\n        key:\"address\"\r\n      },\r\n      {\r\n        title:\"Postal Code\",\r\n        dataIndex:\"postalcode\",\r\n        key:\"postal\"\r\n      },\r\n      {\r\n        title:\"City\",\r\n        dataIndex:\"city\",\r\n        key:\"city\"\r\n      },\r\n      {\r\n        title:\"Province\",\r\n        dataIndex:\"prov\",\r\n        key:\"prov\"\r\n      },\r\n      {\r\n        title:\"Region\",\r\n        dataIndex:\"region\",\r\n        key:\"region\"\r\n      }\r\n      \r\n    ]\r\n      return(\r\n        <div>\r\n          <Card\r\n          title = {title}\r\n          >\r\n            <div>\r\n              <div style={{float:\"left\", width:\"30%\"}}>\r\n              <Card title=\"Customer Information\">\r\n            <p>First Name: {customerInfo.firstName}</p>\r\n            <p>Last Name: {customerInfo.lastName}</p>\r\n            <p>Email: {customerInfo.email}</p>\r\n            <p>Phone: {customerInfo.phone}</p>\r\n            <br />      \r\n        </Card>\r\n        <Card title=\"Billing Address\">\r\n          <p>Billing Address: {customerInfo.billing}</p>\r\n            <p>City: {customerInfo.city}</p>\r\n            <p>Postal Code: {customerInfo.postal}</p>\r\n        </Card>\r\n            </div>\r\n            <div style={{float:\"right\", width:\"50%\"}}>\r\n              <h1>Customer Notes</h1>\r\n              <Item>\r\n                <table style={{display:'block', height:\"350px\", overflowY:\"scroll\", width:\"100%\"}}\r\n              >\r\n                <thead>\r\n                  <tr>\r\n                    <td style={{position:\"sticky\", top:\"0\", width:\"60%\", backgroundColor:\"white\"}}>\r\n                      <strong>Notes</strong>\r\n                    </td>\r\n                    \r\n                    <td style={{position:\"sticky\", top:\"0\", width:\"30%\", backgroundColor:\"white\"}}>\r\n                      <strong>Date Added</strong>\r\n                    </td>\r\n                    <td style={{position:\"sticky\", top:\"0\", width:\"10%\", backgroundColor:\"white\"}}>\r\n                      <strong>User Initial</strong>\r\n                    </td>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {getNoteTable()}\r\n                </tbody>\r\n              </table>\r\n              </Item>\r\n              \r\n              <Item>\r\n                <TextArea\r\n                defaultValue=\"\"\r\n                name=\"notes\"\r\n                allowClear={true}\r\n                autoSize={{minRows: 2, maxRows: 3}}\r\n                onPressEnter={\r\n                  async() => {\r\n                    let box = document.getElementsByName(\"notes\")[0];\r\n                    await addNotes(box.value, user, match)\r\n                    .then((item) => {\r\n                      setCount(count + 1);\r\n                      if(item.status === 200){\r\n                      message.success(\"added new note\");\r\n                      box.value = \" \";\r\n                    }\r\n                    else{\r\n                      message.error(\"Something went wrong. Please try again.\");\r\n                      box.value = \" \";\r\n                    }        });\r\n                  }\r\n                }\r\n                ></TextArea>\r\n              </Item>\r\n              <Item>\r\n                <Button\r\n                onClick={async() => {\r\n                  let box = document.getElementsByName(\"notes\")[0];\r\n                  await addNotes(box.value, user, match)\r\n                  .then((item) => {\r\n                    setCount(count + 1);\r\n                    if(item.status === 200){\r\n                    message.success(\"added new note\");\r\n                    box.value = \" \";\r\n                  }\r\n                  else{\r\n                    message.error(\"Something went wrong. Please try again.\");\r\n                    box.value = \" \";\r\n                  }        });\r\n                  \r\n                  \r\n                  \r\n                  \r\n                }}>\r\n                Submit\r\n                </Button>\r\n              </Item>\r\n              \r\n            </div>\r\n            </div>\r\n            \r\n        \r\n            \r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        bordered\r\n        dataSource={addressList}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n\r\n          </Table>\r\n          <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            setShowAddress(true);\r\n            formAddress.resetFields();\r\n          }}\r\n          >New Address</Button>\r\n\r\n          <Modal\r\n          visible={showForm}\r\n          title=\"Update Customer\"\r\n          onOk={handleUpdate}\r\n          onCancel={() => setShowForm(false)}\r\n        >\r\n          <Form form={form1} labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}>\r\n            <Item\r\n              label=\"First Name\"\r\n              name=\"firstName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n                \r\n              ]}\r\n              \r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Last Name\"\r\n              name=\"lastName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Email\"\r\n              name=\"email\"\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Phone\"\r\n              name=\"phone\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Billing Address\"\r\n              name=\"billing\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"City\"\r\n              name=\"city\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Postal Code\"\r\n              name=\"postal\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n              </Item>\r\n              <Item\r\n              label=\"Region\"\r\n              name=\"region\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select>{options}</Select>\r\n            </Item>\r\n          </Form>\r\n        </Modal>\r\n        <Modal\r\n          visible={showAddress}\r\n          title=\"New Address\"\r\n          onOk={handleNewAddress}\r\n          onCancel={() => setShowAddress(false)}\r\n          >\r\n          <Form\r\n              form={formAddress}\r\n              labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}\r\n              >\r\n              <Item \r\n              label=\"Address\"\r\n              name=\"address\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n              >\r\n                <Input />\r\n              </Item>\r\n              <Item \r\n              label=\"Postal Code\"\r\n              name=\"postalCode\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n              >\r\n                <Input />\r\n              </Item>\r\n              <Item \r\n              label=\"City\"\r\n              name=\"city\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n              >\r\n                <Input />\r\n              </Item>\r\n              <Item \r\n              label=\"Province\"\r\n              name=\"prov\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n              >\r\n                <Input />\r\n              </Item>\r\n              <Item \r\n              label=\"Region\"\r\n              name=\"region\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select>{options}</Select>\r\n              </Item>\r\n\r\n          </Form>\r\n        </Modal>\r\n        </Card>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    export default withRouter(CustomerInfo)","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\roles\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\users\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\trucks\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\customers\\index.js",["389","390","391"],"import React, { useState, useEffect} from \"react\";\r\nimport {Table, Button, Form, Input} from \"antd\";\r\nimport { customerLookup } from \"../../api/customer\";\r\nimport { getCustomers } from \"../../api/calendar\";\r\nimport \"./index.css\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst {Search} = Input;\r\nfunction Customers(props) {\r\n  const [customers, setcustomers] = useState([]);\r\n  const [addressList, setaddresses] = useState([]);\r\n  const [form1] = Form.useForm();\r\n\r\n  const columns = [\r\n    {\r\n      title: \"First Name\",\r\n      dataIndex: \"firstName\",\r\n      key: \"FirstName\",\r\n    },\r\n    {\r\n      title: \"Last Name\",\r\n      dataIndex: \"lastName\",\r\n      key: \"LastName\",\r\n    },\r\n    {\r\n      title: \"Customer Billing Address\",\r\n      dataIndex: \"billing\",\r\n      key: \"BillingAddress\",\r\n    },\r\n    {\r\n      title: \"See Customer Page\",\r\n      key: \"OpenCustomer\",\r\n      render: (data) => (\r\n        <div className=\"operate-button\">\r\n          <Button\r\n            type=\"link\"\r\n            onClick={() => {\r\n              props.history.push(`/customerinfo/${data.id}`);\r\n            }}\r\n          >\r\n            Show Customer\r\n          </Button>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    const func = async () => {\r\n      var result = await getCustomers();\r\n      var tables = result.data.map((item) => ({\r\n        id: item.CustomerID,\r\n        firstName: item.CustFirstName,\r\n        lastName: item.CustLastName,\r\n        billing: item.BillingAddress,\r\n      }));\r\n      setcustomers(tables);\r\n    };\r\n    func();\r\n  }, []);\r\n\r\n  const findCustomers = async (value) => {\r\n    let result = await customerLookup(value);\r\n    var tables = result.data.map((item) => ({\r\n      id: item.CustomerID,\r\n      firstName: item.CustFirstName,\r\n      lastName: item.CustLastName,\r\n      billing: item.BillingAddress,\r\n    }));\r\n    setcustomers(tables);\r\n  }\r\n  return (\r\n    <div>\r\n      <h2>Customers</h2>\r\n      <Search\r\n      style={{width:\"40%\", padding:\"5px\"}}\r\n      className=\"searchbar\"\r\n      size = \"medium\"\r\n      enterButton=\"Find Customer\"\r\n      placeholder=\"Search customer list\"\r\n      onChange={(e) => {findCustomers(e.target.value)}} />\r\n\r\n      <Table\r\n      style={{ width: \"80%\", margin: \"0 auto\" }}\r\n      rowKey=\"id\"\r\n      bordered\r\n      dataSource={customers}\r\n      columns={columns}\r\n      tableLayout=\"auto\"\r\n      pagination={{ pageSize: 10 }}\r\n    ></Table>\r\n    </div>\r\n    \r\n  );\r\n}\r\nexport default withRouter(Customers);\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\invoices\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\index.js",["392"],"\r\nimport React, {useEffect, useState } from \"react\";\r\nimport { Route, Switch,  Link,  useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport FormOne from \"./FormOne\";\r\nimport QuoteOne from \"./QuoteOne\";\r\nimport QuotePrint from \"./QuotePrint\";\r\nimport QuoteList from \"./quoteList\";\r\nimport QuoteEdit from './quoteEdit';\r\nimport {Space, Button} from \"antd\";\r\n\r\n\r\nexport default function Quotes() {\r\n\r\n  const [quoteDataId, setQuoteDataId] = useState('0');\r\n  const [quoteData, setQuoteData] = useState({});\r\n  const [quoteFormData, setQuoteFormData] = useState({});\r\n  let { path, url } = useRouteMatch();\r\n  let history = useHistory();\r\n  function onSetQuoteDataChange(data) {\r\n    if (!(data === null || data  === \"\" || data === undefined)) {\r\n        setQuoteDataId(data.id);\r\n        setQuoteData(data);\r\n        history.push(`${url}/${data.id}/new/`)\r\n    }else{\r\n        setQuoteData({});\r\n    }\r\n  }\r\n  function onSetQuoteFormDataChange(data) {\r\n    if (!(data === null || data  === \"\" || data === undefined)) {\r\n        setQuoteFormData(data);\r\n        console.log(data);\r\n        history.push(`${url}/${quoteDataId}/print/`)\r\n    }else{\r\n        setQuoteFormData({});\r\n    }\r\n  }\r\n\r\n  function onEditQuoteFormData(){\r\n      history.push(`/quotes/${quoteData.id}/edit/`)\r\n  }\r\n\r\n  return (\r\n    <div style={{padding: \"10px\", margin: \"10px\"}}>\r\n      <div>\r\n        <h2> Quotes<Space style={{float:\"right\"}}><Link to=\"/quotes/quoteList\" ><Button>View All Quotes</Button></Link>  <Link to=\"/quotes\"><Button> New Quote  </Button></Link></Space></h2>\r\n      </div> \r\n      <hr/>\r\n      <Switch>\r\n        <Route exact path={path} >\r\n          <FormOne quoteDataId={quoteDataId} onSetQuoteDataChange={onSetQuoteDataChange} />\r\n          </Route>\r\n        <Route path=\"/quotes/:qid/new\" >\r\n          <QuoteOne key={quoteData} quoteData={quoteData} onSetQuoteFormDataChange={onSetQuoteFormDataChange} />\r\n        </Route>\r\n        <Route path=\"/quotes/:qid/edit\" >\r\n          <QuoteEdit />\r\n        </Route>\r\n        <Route path=\"/quotes/:qid/print\" >\r\n          <QuotePrint key={quoteData} quoteFormData={quoteFormData}  quoteData={quoteData} onEditQuoteFormData={onEditQuoteFormData} />\r\n        </Route>\r\n        <Route path=\"/quotes/quoteList\">\r\n          <QuoteList/>\r\n        </Route>\r\n      </Switch>\r\n      \r\n      \r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\SalesmanTemplate.js",["393"],"import React from \"react\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport Scheduler, {Resource} from 'devextreme-react/scheduler';\r\nimport {getUsers,  getRegionAPI, getEstimateByIDToday, getEstimateByIDTomorrow} from '../../api/calendar';\r\nimport CustomStore from 'devextreme/data/custom_store';\r\nimport { getUser } from \"../../util/storage\";\r\nimport Legend from \"../../Components/Legend\";\r\nimport SalesToolSnap from \"../../Components/HomeTemplate/SalesCalendar/salesToolSnap\";\r\n\r\nconst { zonedTimeToUtc, format } = require('date-fns-tz');\r\n\r\nconst currentDate = new Date();\r\nlet date = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();\r\nlet hourCheck = currentDate.getHours();\r\n\r\nconst dataSource = new CustomStore({\r\n  key: \"EstimateID\",\r\n  load: async () => {\r\n    let user = getUser();\r\n    if(hourCheck < 18){\r\n      console.log(hourCheck);\r\n    const data = await getEstimateByIDToday(user.UserID);\r\n    let formatData = data.data.map((item) => ({\r\n      EstimateID : item.EstimateID,\r\n      CustomerID : item.CustomerID,\r\n      AddressID : item.AddressID,\r\n      UserID : item.UserID,\r\n      CreationDate : item.CreationDate,\r\n      text : item.EstimateInfo,\r\n      RegionID : item.RegionID,\r\n      startDate : timeFormat(item.startDate),\r\n      endDate : timeFormat(item.endDate)\r\n    }));\r\n    return formatData\r\n    }\r\n    else {\r\n      const data = await getEstimateByIDTomorrow(user.UserID);\r\n    let formatData = data.data.map((item) => ({\r\n      EstimateID : item.EstimateID,\r\n      CustomerID : item.CustomerID,\r\n      AddressID : item.AddressID,\r\n      UserID : item.UserID,\r\n      CreationDate : item.CreationDate,\r\n      text : item.EstimateInfo,\r\n      RegionID : item.RegionID,\r\n      startDate : timeFormat(item.startDate),\r\n      endDate : timeFormat(item.endDate)\r\n    }));\r\n    return formatData\r\n    }\r\n  }\r\n});\r\n\r\nconst timeFormat = (date) => {\r\n   let newdate = zonedTimeToUtc(new Date(date), 'America/Edmonton');\r\n   var formatteddate = format(newdate, \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\");\r\n   return formatteddate;\r\n}\r\n\r\n\r\nconst views = ['day'];\r\n\r\nconst renderResourceCell = (model) => {\r\n  return (\r\n      <b>{model.data.FirstName}</b>\r\n  );\r\n}\r\n\r\nclass SalesmanTemplate extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      groupByDate:false,\r\n      cancel:true,\r\n      userList:\"\",\r\n      regionList:\"\",\r\n      info:false\r\n    };\r\n    \r\n    this.onGroupByDateChanged = this.onGroupByDateChanged.bind(this);\r\n    this.onAppointmentForm = this.onAppointmentForm.bind(this);\r\n    this.salesmanSource = this.salesmanSource.bind(this);\r\n    this.regionSource = this.regionSource.bind(this);\r\n    this.InfoIsHere = this.InfoIsHere.bind(this);\r\n  }\r\n  async InfoIsHere() {\r\n  let regionData = await this.regionSource();\r\n  let userData = await this.salesmanSource();\r\n  this.setState({userList:userData});\r\n  this.setState({regionList:regionData});\r\n  this.setState({info:true});\r\n} \r\n  \r\n  onAppointmentForm(args) {\r\n    args.cancel = true;\r\n  }\r\n  onGroupByDateChanged(args) {\r\n    this.setState({\r\n      groupByDate: args.value\r\n    });\r\n  }\r\n  async regionSource() {\r\n    const data = await getRegionAPI();\r\n    let regionData = data.data.map((item) => ({\r\n      id  : item.RegionID,\r\n      region: item.Region,\r\n      color: item.color\r\n    }))\r\n    console.log(regionData);\r\n    return regionData;\r\n  }\r\n\r\n  async salesmanSource() {\r\n    const data = await getUsers();\r\n    let salesData = data.data.map((item) => ({\r\n      id: item.UserID,\r\n      FirstName : item.FirstName,\r\n      LastName: item.LastName\r\n    }))\r\n    console.log(salesData);\r\n    return salesData;\r\n  }\r\n  componentDidMount(){\r\n    this.InfoIsHere();\r\n}\r\n\r\n \r\n  render() {\r\n    if (this.state.info == false){\r\n        return (\r\n          <p>Loading information...</p>\r\n        )\r\n      }\r\n      else{\r\n\r\n      \r\n    return (\r\n      \r\n      <div style={{display:\"flex\",flexDirection:\"row\", margin:\"auto\"}}>\r\n          <div style={{width:\"30%\"}}>\r\n        <Legend />\r\n        </div>\r\n          <div style={{padding:\"15px\", width:\"100%\"}}>\r\n            <h1>Your work day</h1>\r\n             <Scheduler\r\n              timeZone=\"America/Edmonton\"\r\n              resourceCellRender={renderResourceCell}\r\n              dataSource={dataSource}\r\n              views={views}\r\n              defaultCurrentView=\"day\"\r\n              defaultCurrentDate={date}\r\n              width={'60%'}\r\n              height={800}\r\n              startDayHour={7}\r\n              endDayHour={19}\r\n              appointmentTooltipComponent={SalesToolSnap}\r\n              onAppointmentAdding={(e) => {e.cancel = true}}\r\n              onAppointmentDeleting={(e) => {e.cancel = true}}\r\n              onAppointmentFormOpening={(e) => {e.cancel = true}}\r\n              onAppointmentUpdating={(e) => {e.cancel = true}}\r\n        >\r\n        <Resource\r\n          dataSource={this.state.regionList}\r\n          fieldExpr=\"RegionID\"\r\n          useColorAsDefault={true}\r\n        ></Resource>\r\n        </Scheduler>\r\n        </div>\r\n        \r\n     \r\n    </div>\r\n    );\r\n  }\r\n}\r\n}\r\n\r\nexport default SalesmanTemplate;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\Template.js",["394","395"],"import React, { Component } from 'react';\r\nimport Tabs from \"../../Components/HomeTemplate/Tabs\"; \r\nimport SalesCalendar from '../../Components/HomeTemplate/SalesCalendar/SalesCalendar';\r\nimport FoamCalendar from '../../Components/HomeTemplate/FoamCalendar/FoamCalendar';\r\nimport FillCalendar from '../../Components/HomeTemplate/FillCalendar/FillCalendar';\r\nimport './Template.css';\r\n\r\nclass Template extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n      \r\n    render() {\r\n        \r\n        return(\r\n      <div>\r\n       <Tabs> \r\n         <div label=\"Sales\"> \r\n           <SalesCalendar />\r\n         </div> \r\n         <div label=\"Foam\"> \r\n           <FoamCalendar />\r\n         </div> \r\n         <div label=\"Fill\"> \r\n         <FillCalendar />\r\n         </div> \r\n       </Tabs> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n  export default Template;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\neworder.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\quoteEditAPI.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\addresses.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\confirmation.js",["396"],"import React from 'react';\r\nimport { Email, Item} from 'react-html-email';\r\nimport { getUser } from '../../util/storage';\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst user = getUser();\r\n\r\nconst { format} = require(\"date-fns-tz\");\r\n\r\nfunction Confirmation(props){\r\n    \r\n    return(\r\n        <Email title=\"Thank you for choosing Reitzel!\">\r\n            <Item>\r\n                <img src={header}></img>\r\n            </Item>\r\n            <Item>\r\n                <p>Hi {props.customerInfo.FirstName} {props.customerInfo.LastName},</p>\r\n            <br/>\r\n            <p>Thank you for choosing Reitzel Insulation! Here are the details for your booking:</p>\r\n            <p>Job Type: {props.estimateInfo.JobType}</p>\r\n            <p>Date: {format(new Date(props.estimateInfo.startDate),\"MMMM do',' yyyy\")}</p>\r\n            <p> Approximate Arrival Time:  {format(new Date(props.estimateInfo.startDate),\"K:mm\")}</p>\r\n            <br />\r\n            </Item>\r\n            <Item>\r\n            Please read the attached pdf for preparing your home.\r\n            </Item>\r\n            <Item>\r\n                <p>\r\n                    This is an automated email. If you have any questions after reading this document, please reply to your rep at {user.Email} or call the office at 519-886-6100.\r\n            Thank you for your business!\r\n                </p>\r\n               <Item>\r\n                  <p>\r\n                  Regards,\r\n                    \r\n            The Reitzel Team  \r\n               </p> \r\n               </Item>\r\n               \r\n            \r\n            </Item>\r\n\r\n\r\n        </Email>\r\n    )\r\n}\r\n\r\nexport default Confirmation;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\calendar.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\customer.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesSnapshot.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\trucks.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesCalendar.js",["397"],"import React from \"react\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport Switch from 'devextreme-react/switch';\r\nimport Scheduler, {Resource} from 'devextreme-react/scheduler';\r\nimport SalesTemplate from './SalesTemplate.js'\r\nimport SalesTooltip from './salesTooltip.js';\r\nimport {getEstimates,\r\n        deleteEstimate, \r\n        getUsers, \r\n        updateEstimate, \r\n        getRegionAPI, \r\n        sendUpdate, \r\n        addNewCustomer, \r\n        addNewAddress, \r\n        addEstimate, \r\n        sendConfirm, \r\n        getCustomers,\r\n        getAddressList} from '../../../api/calendar';\r\nimport { getCustomer } from \"../../../api/customer.js\";\r\nimport CustomStore from 'devextreme/data/custom_store';\r\nimport { message, Modal, Space } from 'antd';\r\nimport UpdateConfirm from '../../Email_Templates/updateConfirm';\r\nimport {renderEmail} from 'react-html-email';\r\nimport 'devextreme-react/tag-box';\r\nimport 'devextreme-react/autocomplete';\r\nimport { customer_info_sheet } from \"../../../assets/paths.js\";\r\nimport Confirmation from \"../../Email_Templates/confirmation.js\";\r\nimport { Autocomplete, CheckBox, Form, Popup, SelectBox, TextArea, TextBox, Button } from \"devextreme-react\";\r\nimport { Item } from \"devextreme-react/form\";\r\nconst { confirm } = Modal;\r\nconst { format } = require(\"date-fns-tz\");\r\n\r\nconst dataSource = new CustomStore({\r\n  key: \"EstimateID\",\r\n  load: async () => {\r\n    const data = await getEstimates();\r\n    let formatData = data.data.map((item) => ({\r\n      EstimateID : item.EstimateID,\r\n      CustomerID : item.CustomerID,\r\n      AddressID : item.AddressID,\r\n      UserID : item.UserID,\r\n      CreationDate : item.CreationDate,\r\n      text : item.EstimateInfo,\r\n      JobType:item.JobType,\r\n      RegionID : item.RegionID,\r\n      startDate : item.startDate,\r\n      endDate : item.endDate\r\n    }));\r\n    return formatData\r\n  },\r\n  update: async (key, values) => {\r\n    let formatData = {\r\n      EstimateID : values.EstimateID,\r\n      CustomerID : values.CustomerID,\r\n      AddressID : values.AddressID,\r\n      UserID : values.UserID,\r\n      CreationDate : values.CreationDate,\r\n      EstimateInfo : values.EstimateInfo,\r\n      RegionID : values.RegionID,\r\n      startDate : values.startDate,\r\n      endDate : values.endDate\r\n  }\r\n    const check = await updateEstimate(key, formatData);\r\n    return check;\r\n  },\r\n  remove: async(key) => {\r\n    const data = await deleteEstimate(key);\r\n    return data\r\n  },\r\n  insert: async (values) => {\r\n    try{\r\n      let customerInfo = await addNewCustomer(values);\r\n      const customerID = customerInfo.data.insertId;\r\n      let addressInfo = await addNewAddress(customerID, values);\r\n      const addressID = addressInfo.data.insertId;\r\n      const addEstimates = await addEstimate(\r\n        customerID,\r\n        addressID,\r\n        values);\r\n        message.success(\"New estimate added\");\r\n        let customer = {\r\n          FirstName:values.firstName,\r\n          LastName:values.lastName\r\n        }\r\n        let estimate = {\r\n          JobType:values.jobType,\r\n          startDate:values.startDate\r\n        }\r\n      sendConfirm(values.email, renderEmail(<Confirmation customerInfo = {customer} estimateInfo = {estimate} />), customer_info_sheet);\r\n      return addEstimates;\r\n    }\r\n    catch(e){\r\n      console.log(e);\r\n    }\r\n  },\r\n  onUpdating: (key, values) => {\r\n    \r\n    confirm({title:\"Send email update to customer?\", onOk() {sendEmailUpdate(values)}, cancelText:\"No\"})\r\n  }\r\n});\r\nconst sendEmailUpdate = async (values) => {\r\n  let findCustomerEmail = await getCustomer(values.CustomerID);\r\n  let customerEmail = findCustomerEmail.data[0];\r\n  sendUpdate(customerEmail.Email, renderEmail(<UpdateConfirm estimateInfo = {values}/>), customer_info_sheet);\r\n}\r\n\r\nconst currentDate = new Date();\r\nlet date = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();\r\nconst views = ['day','week', 'workWeek','month'];\r\nconst groups = ['UserID'];\r\n\r\nconst renderResourceCell = (model) => {\r\n  return (\r\n      <b>{model.data.FirstName}</b>\r\n  );\r\n}\r\nconst onAppointmentDeleting = (e) => {\r\n  var cancel = true;\r\n  e.cancel = cancel;\r\n  confirm({title:\"Do you want to delete this appointment?\", onOk(){dataSource.remove(e.appointmentData.EstimateID) }, onCancel(){cancel = true}});\r\n}\r\n\r\nclass SalesCalendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      mounted:false,\r\n      groupByDate:false,\r\n      useExisting:false,\r\n      userList:\"\",\r\n      regionList:\"\",\r\n      info:false,\r\n      findCustomerList:[],\r\n      customerAddresses:[],\r\n      showForm:false,\r\n      clickedSalesman:\"\",\r\n      siteID:\"\",\r\n      custID:\"\",\r\n      apptDates:{\r\n        start:\"\",\r\n        end:\"\"\r\n      },\r\n      basicInfo:{\r\n        firstName:\"\",\r\n        lastName:\"\",\r\n        phone:\"\",\r\n        email:\"\",\r\n        billingAddress:\"\",\r\n        billingCity:\"\",\r\n        billingPostal:\"\",\r\n        billingRegion:\"\"\r\n      },\r\n      siteInfo:{\r\n        siteAddress:\"\",\r\n        siteCity:\"\",\r\n        siteProv:\"\",\r\n        sitePostal:\"\",\r\n        siteRegion:\"\",\r\n        },\r\n      appointmentInfo:{\r\n        startDate:\"\",\r\n        endDate:\"\",\r\n       },\r\n      description:\"\",\r\n      jobType:\"\",\r\n    };\r\n    \r\n    this.onGroupByDateChanged = this.onGroupByDateChanged.bind(this);\r\n    this.onAppointmentForm = this.onAppointmentForm.bind(this);\r\n    this.salesmanSource = this.salesmanSource.bind(this);\r\n    this.regionSource = this.regionSource.bind(this);\r\n    this.InfoIsHere = this.InfoIsHere.bind(this);\r\n    this.getUserName = this.getUserName.bind(this);\r\n  }\r\n  async InfoIsHere() {\r\n  if(this.mounted){\r\n    let customerData = await getCustomers();\r\n  let regionData = await this.regionSource();\r\n  let userData = await this.salesmanSource();\r\n  this.setState({userList:userData});\r\n  this.setState({regionList:regionData});\r\n  this.setState({findCustomerList:customerData.data});\r\n  this.setState({info:true});\r\n  }\r\n  \r\n} \r\n\r\nasync onAppointmentForm (e) {\r\n  \r\n  if(e.appointmentData.CreationDate) {\r\n    e.cancel = true;\r\n  }\r\n  \r\n  else{\r\n  let form = e.form;\r\n  e.popup.option('showTitle', true);\r\n  e.popup.option('title', 'Quick appointment creation');\r\n  let user = e.appointmentData.UserID;\r\n  let newGroupItems =[\r\n    {\r\n      editorType:'dxButton',\r\n      colSpan:2,\r\n      editorOptions:{\r\n        text:'Existing Customer Lookup',\r\n        onClick:(evt) => {\r\n          e.popup.hide();\r\n          this.setState({showForm:true});\r\n          var appointmentInfo = {...this.state.appointmentInfo};\r\n          appointmentInfo.startDate = format(new Date(e.appointmentData.startDate),\"M/d/yyyy, hh:mm a\");\r\n          appointmentInfo.endDate = format(new Date(e.appointmentData.endDate),\"M/d/yyyy, hh:mm a\");\r\n          var apptDates = {...this.state.apptDates};\r\n          apptDates.start = e.appointmentData.startDate;\r\n          apptDates.end = e.appointmentData.endDate;\r\n          this.setState({apptDates});\r\n          this.setState({appointmentInfo});\r\n          this.setState({clickedSalesman:e.appointmentData.UserID})\r\n          console.log(this.state.apptDates);\r\n        } \r\n      },\r\n    },\r\n  {\r\n    label:{text: \"First Name\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"firstName\"\r\n  },\r\n  {\r\n    label:{text: \"Last Name\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"lastName\",\r\n  },\r\n  {\r\n    label:{text:'Phone'},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:'phone'\r\n  },\r\n  {\r\n    label:{text:\"Email\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"email\",\r\n  },\r\n\r\n  {\r\n    label:{text:\"Site Address\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"siteAddress\"\r\n  },\r\n  {\r\n    label:{text:\"Site City\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"siteCity\"\r\n  },\r\n  {\r\n    label:{text:\"Site Province\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"siteProv\"\r\n  },\r\n  {\r\n    label:{text:\"Postal Code\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"sitePostal\"\r\n  },\r\n  {\r\n    label:{text:\"Region\"},\r\n    isRequired:true,\r\n    editorType:'dxSelectBox',\r\n    editorOptions:{\r\n      displayExpr:\"region\",\r\n      valueExpr:\"id\",\r\n      dataSource: this.state.regionList,\r\n    },\r\n    dataField:'siteRegion'\r\n  },\r\n  {\r\n    label:{text:\"Assigned Salesman\"},\r\n    editorType: 'dxTextBox',\r\n    editorOptions:{\r\n      value:this.getUserName(user, this.state.userList),\r\n      readOnly:true\r\n    }\r\n  },\r\n  {\r\n    label:{text: \"Start Date\"},\r\n    colSpan:2,\r\n    editorType:'dxDateBox',\r\n    editorOptions:{type:'datetime', width:'100%'},\r\n    isRequired:true,\r\n    dataField:'startDate'\r\n  },\r\n  {\r\n    label:{text: \"End Date\"},\r\n    colSpan:2,\r\n    editorType:'dxDateBox',\r\n    editorOptions:{type:'datetime', width:'100%'},\r\n    isRequired:true,\r\n    dataField:'endDate'\r\n  },\r\n  {\r\n    label:{text:\"Description\"},\r\n    colSpan:2,\r\n    editorType:'dxTextArea',\r\n    isRequired:true,\r\n    dataField:'apptInfo'\r\n  },\r\n  {\r\n    label:{text:\"Job Type\"},\r\n    colSpan:2,\r\n    isRequired:true,\r\n    editorType:'dxSelectBox',\r\n    editorOptions:{\r\n      items:['loosefill','spray', \"fireproofing\",\"removal\"]\r\n    },\r\n    dataField:'jobType'\r\n  }\r\n];\r\n\r\n  form.itemOption('mainGroup','items', newGroupItems);\r\n}\r\n}\r\n\r\ngetUserName(id, array){\r\n  let user = '';\r\n  array.map((item) => {\r\n    if(item.id === id) {\r\n      user = item.FirstName + \" \" + item.LastName;\r\n    }\r\n  })\r\n  return user;\r\n}\r\n\r\n  onGroupByDateChanged(args) {\r\n    this.setState({\r\n      groupByDate: args.value\r\n    });\r\n  }\r\n  async regionSource() {\r\n    const data = await getRegionAPI();\r\n    let regionData = data.data.map((item) => ({\r\n      id  : item.RegionID,\r\n      region: item.Region,\r\n      color: item.color\r\n    }))\r\n    return regionData;\r\n  }\r\n\r\n  async salesmanSource() {\r\n    const data = await getUsers();\r\n    let salesData = data.data.map((item) => ({\r\n      id: item.UserID,\r\n      FirstName : item.FirstName,\r\n      LastName: item.LastName\r\n    }))\r\n    return salesData;\r\n  }\r\n  componentDidMount(){\r\n    this.mounted = true;\r\n    this.InfoIsHere();\r\n\r\n}\r\n \r\n  componentWillUnmount(){\r\n    this.mounted = false;\r\n  }\r\n  render() {\r\n    if (this.state.info === false){\r\n        return (\r\n          <p>Loading information...</p>\r\n        )\r\n      }\r\n      else{\r\n\r\n      \r\n    return (\r\n      \r\n      <div>\r\n      <Scheduler\r\n        timeZone=\"America/Edmonton\"\r\n        groups = {groups}\r\n        groupByDate={this.state.groupByDate}\r\n        resourceCellRender={renderResourceCell}\r\n        dataSource={dataSource}\r\n        views={views}\r\n        defaultCurrentView=\"workWeek\"\r\n        defaultCurrentDate={date}\r\n        height={600}\r\n        startDayHour={7}\r\n        endDayHour={19}\r\n        appointmentComponent={SalesTemplate}\r\n        appointmentTooltipComponent={SalesTooltip}\r\n        onAppointmentDeleting={onAppointmentDeleting}\r\n        onAppointmentFormOpening={this.onAppointmentForm}\r\n        >\r\n        <Resource\r\n          dataSource={this.state.userList}\r\n          fieldExpr=\"UserID\"\r\n          >\r\n        </Resource>\r\n        <Resource\r\n          dataSource={this.state.regionList}\r\n          fieldExpr=\"RegionID\"\r\n          useColorAsDefault={true}\r\n        ></Resource>\r\n        </Scheduler>\r\n        <div className=\"options\">\r\n        <div className=\"caption\">Group by Date First</div>\r\n        <div className=\"option\">\r\n          <Switch\r\n            value={ this.state.groupByDate }\r\n            onValueChanged={this.onGroupByDateChanged}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Popup\r\n      height='95%'\r\n      title=\"Existing Customer Appointment Creation\"\r\n      visible={this.state.showForm}\r\n      onHiding={() => {this.setState({showForm:false})}}\r\n      >\r\n          <Autocomplete\r\n          dataSource={this.state.findCustomerList}\r\n          valueExpr=\"CustLastName\"\r\n          placeholder=\"Look up by last name...\"\r\n          itemRender={(data) => {\r\n            return (\r\n              <span>{data.CustFirstName} {data.CustLastName}</span>\r\n            )\r\n          }}\r\n          onItemClick={async(data) => {\r\n            var customer = data.itemData\r\n            var basicInfo = {...this.state.basicInfo};\r\n            basicInfo.firstName = customer.CustFirstName;\r\n            basicInfo.lastName = customer.CustLastName;\r\n            basicInfo.phone = customer.Phone;\r\n            basicInfo.email = customer.Email;\r\n            basicInfo.billingAddress = customer.BillingAddress;\r\n            basicInfo.billingCity = customer.CustCity;\r\n            basicInfo.billingPostal = customer.CustPostalCode;\r\n            basicInfo.billingRegion = customer.CustRegion;\r\n            this.setState({basicInfo});\r\n            this.setState({custID:customer.CustomerID})\r\n            let result = await getAddressList(customer.CustomerID);\r\n            this.setState({customerAddresses:result.data});\r\n          }}\r\n          />\r\n          <br/>\r\n        <Form\r\n        formData={this.state.basicInfo}\r\n        colCount={3}\r\n        >\r\n        <Item editorOptions={{readOnly:true}} dataField='firstName' />  \r\n        <Item editorOptions={{readOnly:true}} dataField='lastName' />\r\n        <Item editorOptions={{readOnly:true}} dataField='phone' />\r\n        <Item editorOptions={{readOnly:true}} dataField='email' />  \r\n        <Item editorOptions={{readOnly:true}} dataField='billingAddress' />\r\n        <Item editorOptions={{readOnly:true}} dataField='billingCity' />\r\n        <Item editorOptions={{readOnly:true}} dataField=\"billingPostal\" />\r\n        <Item dataField=\"billingRegion\" \r\n              editorType=\"dxSelectBox\" \r\n              editorOptions={{dataSource: this.state.regionList, value:this.state.basicInfo.billingRegion, displayExpr:\"region\", valueExpr:\"id\", readOnly:true}} />\r\n\r\n        </Form>\r\n        <br />\r\n        <CheckBox\r\n        text=\"Use Existing Address\"\r\n        onValueChanged={() => {\r\n          if(this.state.useExisting === true){\r\n            this.setState({useExisting:false});\r\n          }\r\n          else {\r\n            this.setState({useExisting:true});\r\n          }\r\n          }}\r\n        ></CheckBox>\r\n        <br />\r\n        <SelectBox\r\n          visible={this.state.useExisting}\r\n          dataSource={this.state.customerAddresses}\r\n          itemRender={(data) => {\r\n            return (\r\n              <span>{data.Address}, {data.City} {data.PostalCode}</span>\r\n            )\r\n          }}\r\n          onItemClick={(data) => {\r\n            var address = data.itemData;\r\n            var siteInfo = {...this.state.siteInfo};\r\n            siteInfo.siteAddress = address.Address;\r\n            siteInfo.siteCity = address.City;\r\n            siteInfo.siteProv = address.Province;\r\n            siteInfo.sitePostal = address.PostalCode;\r\n            siteInfo.siteRegion = address.Region;\r\n            this.setState({siteID:address.AddressID});\r\n            this.setState({siteInfo});\r\n          }}\r\n          />\r\n        <br />\r\n        <Form\r\n        colCount={3}\r\n        formData={this.state.siteInfo}\r\n        >\r\n        <Item editorOptions={{readOnly:this.state.useExisting}} dataField='siteAddress' />  \r\n        <Item editorOptions={{readOnly:this.state.useExisting}} dataField='siteCity' />\r\n        <Item editorOptions={{readOnly:this.state.useExisting}} dataField='siteProv' />\r\n        <Item editorOptions={{readOnly:this.state.useExisting}} dataField=\"sitePostal\" />\r\n        <Item dataField=\"siteRegion\" \r\n              editorType=\"dxSelectBox\" \r\n              editorOptions={{dataSource: this.state.regionList, value:this.state.siteInfo.siteRegion, displayExpr:\"region\", valueExpr:\"id\", readOnly:this.state.useExisting}} />\r\n        </Form>\r\n        \r\n        <br/>\r\n        <Form\r\n        col count={2}\r\n        formData={this.state.appointmentInfo}>\r\n        \r\n        </Form>\r\n        Description:\r\n        <TextArea\r\n        onValueChanged={(data) => {\r\n          this.setState({description:data.value});\r\n        }}>\r\n\r\n        </TextArea>\r\n        Job Type:\r\n        <SelectBox\r\n        onValueChanged={(data) => {\r\n          this.setState({jobType:data.value});\r\n        }}\r\n        items={[\"fireproofing\",\"removal\",\"spray\",\"loosefill\"]}>\r\n        </SelectBox>\r\n        Assigned Salesman:\r\n        <TextBox\r\n        readOnly={true}\r\n        value={this.getUserName(this.state.clickedSalesman, this.state.userList)}>\r\n        </TextBox>\r\n        <br />\r\n        <div style={{float:\"right\"}}>\r\n\r\n        <Space>\r\n        <Button\r\n        style={{fontSize:\"14px\",padding:\"7px 15px 7px 15px\"}}\r\n        onClick={(e) => {\r\n          let func = async() => {\r\n                let info = {\r\n                  UserID:this.state.clickedSalesman,\r\n                  jobType:this.state.jobType,\r\n                  apptInfo:this.state.description,\r\n                  siteRegion:this.state.siteInfo.siteRegion,\r\n                  startDate:this.state.apptDates.start,\r\n                  endDate:this.state.apptDates.end\r\n               }\r\n               if(this.state.useExisting){\r\n              let result = await addEstimate(this.state.custID, this.state.siteID, info);\r\n              console.log(result);\r\n              this.setState({showForm:false});\r\n              if(result.status === 200){\r\n                message.success(\"Added new estimate\");\r\n              }\r\n          }\r\n          \r\n          else {\r\n            let result = await addNewAddress(this.state.custID, this.state.siteInfo);\r\n            if(result.status === 200){\r\n              let address = result.data.insertId;\r\n              let final = await addEstimate(this.state.custID, address, info);\r\n              this.setState({showForm:false});\r\n              if(final.status === 200) {\r\n                message.success(\"Added new address and estimate\");\r\n              }\r\n            }\r\n            else{\r\n              message.warn(\"Something went wrong\");\r\n            }\r\n          }\r\n          \r\n          }\r\n        func().then(() => {\r\n          dataSource.load();\r\n        })\r\n        \r\n        }}\r\n        >Done</Button>\r\n        <Button\r\n         style={{fontSize:\"14px\",padding:\"7px 15px 7px 15px\"}}\r\n         onClick={() => {this.setState({showForm:false})}}>\r\n          Cancel\r\n        </Button>\r\n        </Space>\r\n        </div>\r\n      </Popup>\r\n      \r\n    </div>\r\n    );\r\n  }\r\n}\r\n}\r\n\r\nexport default SalesCalendar;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tabs.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesTooltip.js",["398"],"import {message, Modal} from 'antd';\r\nimport { Button, Form, Popup, TextArea } from 'devextreme-react';\r\nimport { ButtonItem, SimpleItem } from 'devextreme-react/form';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getAddress } from '../../../api/addresses';\r\nimport { deleteEstimate, updateEstimateInfo } from '../../../api/calendar';\r\n\r\nconst {format} = require('date-fns-tz');\r\n\r\n\r\nexport default function SalesTooltip (model) {\r\n  const data = model.data.appointmentData;\r\n  const [address, setAddress] = useState([]);\r\n  const [showPop, setShowPop] = useState(false);\r\n  const [info, setInfo] = useState(data.text);\r\n  useEffect(() => {\r\n    const func = async() => {\r\n      let result = await getAddress(data.AddressID)\r\n      setAddress(result.data[0]);\r\n    }\r\n    func();\r\n  },[address.length]);\r\n\r\n  const deleteClicked = async() => {\r\n    Modal.confirm({title:\"Do you want to delete this appointment?\", onOk(){deleteEstimate(data.EstimateID)}});\r\n  }\r\n\r\n  const editClicked = async(data) => {\r\n    setShowPop(true);\r\n  }\r\n  return (\r\n    <div>\r\n      <div style={{float:'right'}}>\r\n        <Button hint='Edit appointment' icon='clearformat' onClick={editClicked}></Button><Button icon='clearsquare' hint=\"Delete appointment\" title='DeleteButton' onClick={deleteClicked}></Button>\r\n      </div>\r\n      <b style={{fontSize:15}}>\r\n         {data.text}\r\n      </b>\r\n      <p>\r\n       {address.Address} {address.City}, {address.Province}\r\n       <br/>\r\n       {address.PostalCode}\r\n      </p>\r\n      \r\n      <p style={{color:'grey'}}>{`${format(new Date(data.startDate),\"h':'mm aa\")} - ${format(new Date(data.endDate),\"h':'mm aa\")}`}</p>\r\n    <Popup\r\n    visible={showPop}\r\n    showTitle={true}\r\n    title=\"Appointment editing\"\r\n    width='40%'\r\n    height='30%'\r\n    >\r\n    <>\r\n    <form \r\n    onSubmit={async(e) => {\r\n      let result = await updateEstimateInfo(data.EstimateID, info);\r\n      if(result.status === 200) {\r\n        message.success(\"Appointment updated\");\r\n      }\r\n      else message.error(\"Something went wrong\");\r\n      e.preventDefault();\r\n      \r\n    }}>\r\n      <Form>\r\n        <SimpleItem\r\n        dataField=\"Info\"\r\n        label={{text:\"Change appointment information\",location:\"top\"}}>\r\n          <TextArea\r\n          id=\"UpdatedInfo\"\r\n          title=\"Change appointment information\"\r\n          defaultValue={info}\r\n          onChange={(e) => {setInfo(e.component._changedValue)}}>\r\n          \r\n          </TextArea>\r\n        </SimpleItem>\r\n          <ButtonItem\r\n          horizontalAlignment=\"center\"\r\n          buttonOptions={{text:'Update',type:'Success',useSubmitBehavior:false, onClick:() => {return new Promise(async(resolve, reject) => {\r\n            let result = await updateEstimateInfo(data.EstimateID, info);\r\n            if(result.status === 200) {\r\n              message.success(\"Appointment updated\");\r\n            }\r\n            else message.error(\"Something went wrong\");\r\n            setShowPop(false);\r\n            resolve();\r\n            \r\n          })}}}\r\n          />\r\n      </Form>\r\n    </form>\r\n    \r\n    </>\r\n      \r\n    </Popup>\r\n    </div>\r\n\r\n  )\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Legend.js",["399"],"import React, { useEffect, useState } from 'react';\r\nimport { getRegionAPI } from '../api/calendar';\r\n\r\n\r\nfunction Legend(props) {\r\n\r\n    useEffect(() => {\r\n        let func = async() => {\r\n            let result = await getRegionAPI();\r\n            setRegionInfo(result.data);\r\n        }\r\n        func();\r\n    }\r\n    ,[]);\r\n    const [regionInfo, setRegionInfo] = useState([]);\r\n\r\n    const renderLegend = () => {\r\n        let rows = [];\r\n\r\n        regionInfo.map((item) =>{\r\n            rows.push(\r\n\r\n            \r\n            <tr key={item.RegionID}>\r\n                <td colSpan='2'>\r\n                    <p>{item.Region}</p>\r\n                </td>\r\n                <td>\r\n                    <div style={{backgroundColor:item.color, color:item.color, padding:\"5px\"}}>_</div>\r\n                </td>\r\n            </tr>);\r\n        })\r\n        return rows;\r\n    }\r\n    return (\r\n        <div>\r\n            <table style={{fontSize:\"12px\", width:\"80%\"}}>\r\n                <thead>\r\n                    <tr >\r\n                        <td colSpan='2'>\r\n                           <h1>Region</h1> \r\n                        </td>\r\n                        <td>\r\n                            <h1>Colour</h1>\r\n                        </td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderLegend()}\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        <td>\r\n                            <i>Legend for Region Colours</i>\r\n                        </td>\r\n                    </tr>\r\n                    \r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Legend;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesTemplate.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillCalendar.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\FoamCalendar.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\updateConfirm.js",["400","401"],"import React from 'react';\r\nimport { Email, Item, A} from 'react-html-email';\r\nimport { getUser } from '../../util/storage';\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst user = getUser();\r\n\r\nconst { format} = require(\"date-fns-tz\");\r\n\r\nfunction Confirmation(props){\r\n    \r\n    return(\r\n        <Email title=\"\">\r\n            <Item>\r\n            <img src={header}></img>\r\n            </Item>\r\n            <Item>\r\n            <br />\r\n            <p>There has been a change in your appointment time. Here are the new details for your booking:</p>\r\n            <p>Job Type: {props.estimateInfo.JobType}</p>\r\n            <p>Date: {format(new Date(props.estimateInfo.startDate),\"MMMM do',' yyyy\")}</p>\r\n            <p> Approximate Arrival Time:  {format(new Date(props.estimateInfo.startDate),\"K:mm\")}</p>\r\n            <br />\r\n            </Item>\r\n            <Item>\r\n            <p>Find attached documents to help prepare your house for your appointment</p>\r\n\r\n            </Item>\r\n            <Item>\r\n                <p>\r\n                    This is an automated email. If you have any questions after reading this email, please reply to your rep at {user.Email} or call the office at 519-886-6100.\r\n            Thank you for your business!\r\n                </p>\r\n                <br />\r\n                <p>\r\n                    Regards,\r\n\r\n            The Reitzel Team \r\n                </p>\r\n               \r\n            \r\n            </Item>\r\n\r\n            \r\n\r\n\r\n        </Email>\r\n    )\r\n}\r\n\r\nexport default Confirmation;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesData.js",[],["402","403"],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillTemplate.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tab.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuotePrint.js",["404","405","406","407","408"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useParams } from \"react-router\";\r\nimport qData from \"./quoteData.js\";\r\nimport Headerforquoto from \"../headforquote\";\r\nimport Footerforquoto from \"../footer\";\r\nimport { message, Card } from \"antd\";\r\nimport {sendQuote, addNewQuote, addNewDetails, addNewProductLine} from '../../api/quotes';\r\nimport QuoteEmail from \"../../Components/Email_Templates/quote_template\";\r\nimport {renderEmail} from 'react-html-email';\r\nimport QuoteToWord from '../../Components/Word_Templates/quoteWord';\r\nvar Promise = require(\"bluebird\");\r\n\r\n\r\nfunction printQuote() {\r\n  var content = document.getElementById(\"printContents\");\r\n  var pri = document.getElementById(\"ifmcontentstoprint\").contentWindow;\r\n  pri.document.open();\r\n  pri.document.write(content.innerHTML);\r\n  pri.document.close();\r\n  pri.focus();\r\n  pri.print();\r\n}\r\n\r\nasync function emailQuote (customer){\r\n  try {\r\n    let quoteInfo = await addNewQuote(customer)\r\n    let quoteID = quoteInfo.data.insertId;\r\n    customer.details.map(async(details) => {\r\n      let detailsConfirm = await addNewDetails(details, quoteID);\r\n      let detailsID = detailsConfirm;\r\n      details.productArr.map(async(item) => {\r\n        await addNewProductLine(item, quoteID, detailsID.data.insertId);\r\n        return item;\r\n      })\r\n      return details;\r\n    })\r\n    message.success(\"Quote added\");\r\n  } catch (error) {\r\n    message.error(\"Something went wrong - please try again\");\r\n    console.log(error);\r\n  }\r\n  try {\r\n    if(customer.email !== 'undefined'){\r\n      sendQuote(customer.email, renderEmail(<QuoteEmail info={customer}/>))\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    message.error(\"Email failed to send\");\r\n  }\r\n}\r\n\r\nfunction downloadQuote(quote) {\r\n  QuoteToWord(quote);\r\n}\r\n\r\nfunction QuotePrint(props) {\r\n  let { qid } = useParams();\r\n\r\n  let history = useHistory();\r\n\r\n  let quotes = qData.quote_data;\r\n  let selectedQuote = parseInt(qid)\r\n    ? quotes.find((d) => {\r\n        return parseInt(d.id) === parseInt(qid);\r\n      })\r\n    : {};\r\n\r\n  if (Object.keys(selectedQuote).length === 0) {\r\n    history.push(`/quotes`);\r\n  }\r\n\r\n  const [quoteData, setQuoteData] = useState({});\r\n\r\n  useEffect(() => {\r\n    setQuoteData(selectedQuote);\r\n  }, [selectedQuote]);\r\n\r\n  const [quoteFormData, setQuoteFormData] = useState(props.quoteFormData);\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        id=\"printContents\"\r\n        className=\"Quote print-page\"\r\n        style={{ width: \"80%\", margin: \"auto\" }}\r\n      >\r\n        <Headerforquoto />\r\n        <Card>\r\n          <strong>Attention:</strong> {quoteFormData.first_name}{\" \"}\r\n          {quoteFormData.last_name}\r\n          <br /> Address: {quoteFormData.billing_address}\r\n          <br /> City: {quoteFormData.city}\r\n          <br /> Postal Code: {quoteFormData.post_code}\r\n          <br /> Phone: {quoteFormData.phone_number}\r\n          <br /> Email: {quoteFormData.email}\r\n          <br />\r\n        </Card>\r\n        <Card>\r\n          <strong>Site Address</strong>\r\n          <br /> Site Address: {quoteFormData.site_address}\r\n          <br /> Site City: {quoteFormData.site_city}\r\n          <br /> Site Province: {quoteFormData.site_prov}\r\n          <br /> Site Postal Code: {quoteFormData.site_postal}\r\n        </Card>\r\n        <div>\r\n          {quoteFormData.details.length > 0 && (\r\n            <table width=\"100%\" border=\"1\" cellPadding=\"10px\">\r\n              <thead>\r\n                <tr>\r\n                  <td colSpan=\"3\">Quote Details</td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {quoteFormData.details.map((item) => {\r\n\r\n                    return (\r\n                      <tr key={item.key} >\r\n                      <tr >\r\n                        <td colSpan=\"3\" style={{width:'100%', minWidth:\"875px\"}}>\r\n                          {item.details}\r\n                        </td>\r\n                        \r\n                      </tr>\r\n                      {item.productArr.map((prod) => {\r\n                        return (\r\n                            <tr key={prod.prodKey}>\r\n                              <td width=\"40%\">\r\n                                {prod.product}\r\n                              </td>\r\n                              <td width=\"40%\">\r\n                                {prod.notes}\r\n                              </td>\r\n                                <td width=\"20%\">\r\n                                  {prod.price}\r\n                                </td>\r\n                              </tr>\r\n                          );\r\n                          })}\r\n                      <tr>\r\n                        <td colSpan=\"3\" style={{textAlign:\"right\"}}>\r\n                          Subtotal:${item.total}\r\n                        </td>\r\n                      </tr>\r\n                      </tr>\r\n                    );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          )}\r\n        </div>\r\n        <p>Notes to customer: {quoteFormData.customer_notes}</p>\r\n        <p>Notes to installers: {quoteFormData.installer_notes}</p>\r\n        <p>Estimator: {quoteFormData.userInfo.FirstName + \" \" + quoteFormData.userInfo.LastName}</p>\r\n        <p>\r\n        WSIB# Account #1941844 /  Firm # 245166V\r\n        </p>\r\n              <Footerforquoto />\r\n      </div>\r\n      <button onClick={printQuote}> Print this Quote</button>\r\n      <button onClick={() => emailQuote(quoteFormData)}>Submit and send as Email</button>\r\n      <button onClick={() => downloadQuote(quoteFormData)}> Download this Quote</button>\r\n      <iframe\r\n        id=\"ifmcontentstoprint\"\r\n        style={{ height: \"0px\", width: \"0px\", position: \"absolute\" }}\r\n      ></iframe>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuotePrint;\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteEdit.js",["409","410","411","412","413","414","415","416","417","418","419"],"import {getQuoteDetails, getProductList, updateQuote, updateDetail, updateProduct, deleteProduct, deleteDetail, getAllInfoID } from \"../../api/quoteEditAPI\";\r\nimport {addNewDetails, addNewProductLine} from '../../api/quotes';\r\nimport React, {useState, useEffect} from 'react';\r\nimport Button from \"../../component/quotes/Button\";\r\nimport {useInput} from '../../hooks/input-hook';\r\nimport {Row, Col, Card, Checkbox, message} from 'antd';\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\n\r\nfunction QuoteEdit (props) {\r\n    let quoteID = useRouteMatch('/quotes/:qid/edit').params.qid;\r\n    let history = useHistory();\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    const [allData, setAllData] = useState([]);\r\n    const [quoteData, setQuoteData] = useState([]);\r\n    const [quoteDetail, setQuoteDetail] = useState([]);\r\n    const [productList, setProductList] = useState([]);\r\n    const [detailKey, setDetailKey] = useState(0);\r\n    const [prodKey, setProdKey] = useState(0);\r\n\r\n    useEffect( () => {\r\n        let func = async() => {\r\n            let allInfo = await getAllInfoID(quoteID);\r\n            console.log(allInfo.data[0]);\r\n            setAllData(allInfo.data[0]);\r\n            \r\n            let detailList = await getQuoteDetails(quoteID);\r\n            setQuoteDetail(detailList.data);\r\n            let products = await getProductList(quoteID);\r\n            setProductList(products.data);\r\n            createDetails(detailList.data, products.data);\r\n            setText(allInfo.data[0]);\r\n        }\r\n        try {\r\n            func();\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        setLoading(false);\r\n        setcounter(counter + 1);\r\n        console.log(quotedetails);\r\n        },[]);\r\n \r\n\r\n    const createDetails = (detlist, prodlist) => {\r\n        let temp = quotedetails;\r\n        detlist.map((detail) => {\r\n           let detailObj = {\r\n                    id: detail.SubtotalID,\r\n                    key:detailKey,\r\n                    details:detail.subtotalLines,\r\n                    total:detail.subtotalAmount,\r\n                    productArr:[]\r\n                \r\n            }\r\n            setDetailKey(detailKey + 1);\r\n            prodlist.map((prod) => {\r\n                if(prod.subtotalID === detail.SubtotalID){\r\n                    let prodObj = {\r\n                        id:prod.QuoteLineID,\r\n                        key:prodKey,\r\n                        product:prod.Product,\r\n                        notes:prod.Notes,\r\n                        price:prod.Subtotal\r\n                    }\r\n                    if(detailObj.productArr.length === 0){\r\n                        detailObj.productArr[0] =prodObj;\r\n                    }\r\n                    else{\r\n                        detailObj.productArr[detailObj.productArr.length] = prodObj;\r\n                    }\r\n                    setProdKey(prodKey + 1);\r\n                }\r\n            })\r\n            if(temp.length === 0){\r\n                temp[0] = detailObj;\r\n            }\r\n            else{\r\n                temp[temp.length] = detailObj;\r\n            }\r\n            setquotedetails(temp);\r\n        });        \r\n    }\r\n    const setText = (allInfo) => {\r\n        assignFirstName(allInfo.CustFirstName);\r\n        assignLastName(allInfo.CustLastName);\r\n        assignPhoneNumber(allInfo.Phone);\r\n        assignEmail(allInfo.Email);\r\n        assignBillingAddress(allInfo.BillingAddress);\r\n        assignCity(allInfo.CustCity);\r\n        assignPostCode(allInfo.CustPostalCode);\r\n        assignSiteAddress(allInfo.Address);\r\n        assignSiteCity(allInfo.City);\r\n        assignSiteCode(allInfo.PostalCode);\r\n        assignSiteProv(allInfo.Province);\r\n        assignCustomerNotes(allInfo.notesCustomers);\r\n        assignInstallerNotes(allInfo.notesInstallers);\r\n        assignUserFirstName(allInfo.FirstName);\r\n        assignUserLastName(allInfo.LastName);\r\n\r\n    setcounter(counter + 1);\r\n    }\r\n\r\n    const {value: firstName, assignValue: assignFirstName} = useInput();\r\n    const {value: lastName, assignValue: assignLastName} = useInput();\r\n    const {value: billingAddress,  assignValue: assignBillingAddress} = useInput();\r\n    const {value: city,  assignValue: assignCity} = useInput();\r\n    const {value: postCode, assignValue: assignPostCode} = useInput();\r\n    const {value: phoneNumber,  assignValue: assignPhoneNumber} = useInput();\r\n    const {value: email,  assignValue: assignEmail} = useInput();\r\n\r\n    const {value: siteAddress,  assignValue: assignSiteAddress} = useInput();\r\n    const {value: siteCity,  assignValue: assignSiteCity} = useInput();\r\n    const {value: siteCode, assignValue: assignSiteCode} = useInput();\r\n    const {value: siteProv,  assignValue: assignSiteProv} = useInput();\r\n    \r\n    const {value: customerNotes, bind: bindCustomerNotes, assignValue: assignCustomerNotes} = useInput();\r\n    const {value: installerNotes, bind: bindInstallerNotes, assignValue: assignInstallerNotes} = useInput();\r\n\r\n    const {value: userFirstName, assignValue: assignUserFirstName} = useInput();\r\n    const {value: userLastName, assignValue: assignUserLastName} = useInput();\r\n\r\n    const [tax, setTax] = useState(true);\r\n    const [counter, setcounter] = useState(1);\r\n    const [quotedetails, setquotedetails] = useState([]);\r\n    \r\n    const handleSubmit = async (evt) => {\r\n        evt.preventDefault();\r\n        var quoteInfo = \r\n        {\r\n            id:quoteID,\r\n            customer_notes: customerNotes,\r\n            installer_notes: installerNotes,\r\n            \r\n            total: getQuoteTotal(quotedetails)\r\n        }\r\n        try{\r\n        await updateQuote(quoteInfo);\r\n        quotedetails.map(async (details) => {\r\n            if(details.id !== null){\r\n                await updateDetail(details).then(() => {\r\n                details.productArr.map(async (prod) => {\r\n                    if(prod.id !== null){\r\n                        \r\n                        await updateProduct(prod);\r\n                    } \r\n                    else{\r\n                        \r\n                        await addNewProductLine(prod, quoteID, details.id);\r\n                    }\r\n                });\r\n            });\r\n                \r\n            }\r\n            else{\r\n                await addNewDetails(details, quoteID).then(() => {\r\n                     details.productArr.map(async (prod) => {\r\n                    if(prod.id !== null){\r\n                        await updateProduct(prod);\r\n                    } \r\n                    else{\r\n                        await addNewProductLine(prod, quoteID, details.id);\r\n                    }\r\n                });\r\n                });\r\n               \r\n            }\r\n        });\r\n        message.success(\"Quote successfully updated\");\r\n    }\r\n    catch(e){\r\n        message.error(\"Something went wrong. Try again in a bit\")\r\n    }\r\n    finally{\r\n        history.push('/quotes/quoteList');\r\n    }\r\n        \r\n    }\r\n\r\n    const changeTax = () => {\r\n        if (tax === true){\r\n            setTax(false);\r\n        }\r\n        else if (tax === false){\r\n            setTax(true);\r\n        }\r\n    }        \r\n    const addNewDetail = (e) => {\r\n        e.preventDefault();\r\n        setcounter(counter +1);\r\n        var temp = quotedetails;\r\n        if(temp[temp.length] === 0){\r\n            temp[0] = {\r\n                id:null,\r\n                key:detailKey,\r\n                details:\"\",\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        else{\r\n            temp[temp.length] = {\r\n                id:null,\r\n                key:detailKey,\r\n                details:\"\",\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        setDetailKey(detailKey + 1);\r\n        setquotedetails(temp);\r\n        console.log(quotedetails);\r\n    }\r\n    const handleAddProduct = (details,e) => {\r\n        e.preventDefault();\r\n        setcounter(counter + 1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        if(temp[index].productArr.length === 0){\r\n            temp[index].productArr[0] = {\r\n                id:null,\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                notes:\"\",\r\n                price:0.00\r\n            }\r\n        }\r\n        else{\r\n            temp[index].productArr[temp[index].productArr.length] = {\r\n                id:null,\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                notes:\"\",\r\n                price:0.00\r\n            }\r\n        }\r\n        setProdKey(prodKey + 1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleRemoveRow = async(details, prod ,e) => {\r\n        e.preventDefault();\r\n        await deleteProduct(prod.id);\r\n        setcounter(counter - 1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        var prodIndex = temp[index].productArr.indexOf(prod);\r\n        temp[index].productArr.splice(prodIndex,1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleRemoveDetail = async(details,e) => {\r\n        e.preventDefault();\r\n        details.productArr.forEach(async element => {\r\n            console.log(element.id);\r\n            await deleteProduct(element.id);\r\n        });\r\n        await deleteDetail(details.id);\r\n        setcounter(counter -1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        temp.splice(index,1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleDetailChange = (details, e) => {\r\n        details.details = e.target.value\r\n        details.details.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />')\r\n    }\r\n    const handleProductDetails = (prod, e) => {\r\n        prod.product = e.target.value;\r\n    }\r\n    const handleProductNotes = (prod, e) => {\r\n        prod.notes = e.target.value;\r\n    }\r\n    const handleProductPrice = (prod, e) => {\r\n        if(e.target.value === \"\"){\r\n            e.target.value = 0.00;\r\n        }\r\n        let newPrice = parseFloat(e.target.value);\r\n        let rounded = newPrice.toFixed(2);\r\n        prod.price = rounded;\r\n        setcounter(counter + 1);\r\n    }\r\n    const renderProducts = (details) => {\r\n        let rows = [];\r\n            if(details.productArr.length !== 0){\r\n                details.productArr.map((prod) => {\r\n\r\n                    rows.push(\r\n                         <tr>\r\n                             <td>\r\n                                 Product:\r\n                                 <input type=\"text\" key={prod.prodKey}  defaultValue={prod.product}\r\n                                    onChange={(e) => {\r\n                                        handleProductDetails(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n        \r\n                             </td>\r\n                            <td>\r\n                                Details:\r\n                                <input type=\"text\" key={prod.prodKey} defaultValue={prod.notes}\r\n                                    onChange={(e) => {\r\n                                        handleProductNotes(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n                            </td>\r\n                            <td>\r\n                                Price:\r\n                                <input type=\"number\" step=\".01\" key={prod.prodKey} defaultValue={prod.price}\r\n                                    onChange={(e) => {\r\n                                        handleProductPrice(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n                            </td>\r\n                             <td style={{textAlign:\"right\"}}>\r\n                             <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveRow(details, prod, e)}} >x</Button>\r\n                             </td>\r\n                         </tr>);\r\n                });\r\n            }\r\n            return rows;\r\n    }\r\n    const getTotal = (details) => {\r\n        let total = 0.00;\r\n        details.productArr.map((item) => {\r\n            total = total + parseFloat(item.price);\r\n        });\r\n        if (tax === true){\r\n            total = total * 1.13;\r\n        }\r\n        total = total.toFixed(2);\r\n        details.total = total;\r\n        return total;\r\n    }\r\n    const getQuoteTotal = (detail) => {\r\n        let total = 0.00;\r\n        detail.map((item) => {\r\n            total = total + parseFloat(item.total);\r\n        });\r\n        total = total.toFixed(2);\r\n        return total;\r\n    }\r\n    const renderRows = () => {\r\n        let rows = [];\r\n        if(quotedetails.length > 0){\r\n            \r\n            quotedetails.map((detail) => {\r\n            rows.push(\r\n            <tr>\r\n            <tr>\r\n            <tr>\r\n            <td colSpan=\"2\">\r\n                    <textarea \r\n                    key={detail.key}\r\n                    cols=\"150\" \r\n                    rows=\"6\" \r\n                    className=\"ant-input\"\r\n                    defaultValue={detail.details}\r\n                    onChange={(e) => {\r\n                            handleDetailChange(detail, e)\r\n                        }}\r\n                    >\r\n                    </textarea>\r\n                </td>\r\n                <td></td>\r\n                <td style={{textAlign:\"right\"}}>\r\n                    <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveDetail(detail,e)}} >Delete</Button>\r\n                </td>\r\n            </tr>\r\n            Products:\r\n            </tr>\r\n                <tr>\r\n                    {renderProducts(detail)}\r\n                </tr>\r\n        <tr>\r\n            <td>\r\n                <Button size=\"sm\" variant=\"primary\" onClick={(e) => {handleAddProduct(detail,e)}}>Add Product</Button>\r\n            </td>\r\n              \r\n        </tr>\r\n              \r\n            <tr>\r\n            <td style={{textAlign:\"right\"}}>\r\n                        Subtotal: {getTotal(detail)}\r\n                        </td>\r\n            </tr>\r\n            </tr>\r\n            );\r\n            \r\n        });\r\n        }\r\n        return rows;\r\n    }\r\n    \r\n\r\n    \r\n    if (isLoading) {\r\n        return <div className=\"App\">Loading...</div>;\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"Quote\" style={{width:\"80%\"}}>\r\n                <div>\r\n                    <Row gutter={16}>\r\n                        <Col span={10}>\r\n                            <Card title=\"Customer and Billing\" bordered={false}>\r\n                            Customer:<br />\r\n                    <p>{firstName} {lastName}</p>\r\n                    Address:\r\n                    <p>{billingAddress}</p>\r\n                    City:\r\n                    <p>{city}</p>\r\n                    Postal Code:\r\n                    <p>{postCode}</p>\r\n                    Phone:\r\n                    <p>{phoneNumber}</p>\r\n                    Email:\r\n                    <p>{email}</p>\r\n                            </Card>\r\n                        </Col>\r\n                         <Col span={10}>\r\n                            <Card title=\"Site Address\" bordered={false}>\r\n                    Address:\r\n                    <p>{siteAddress}</p>\r\n                    City:\r\n                    <p>{siteCity}</p>\r\n                    Province:\r\n                    <p>{siteProv}</p>\r\n                    Postal Code:\r\n                    <p>{siteCode}</p>\r\n                            </Card>\r\n                        </Col>\r\n                     </Row>\r\n                    <br/>\r\n                    <br/>\r\n                    <table style={{width:\"100%\"}}>\r\n                        <thead>\r\n                        <tr>\r\n                            <td>Quote Details and Products:</td>\r\n                            \r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {renderRows()}\r\n                        <tr>\r\n                            <td>\r\n                                <Button onClick={(e) => {addNewDetail(e)}}>Add Details</Button>\r\n                            </td>\r\n                        </tr>\r\n                        \r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Apply tax <Checkbox defaultChecked = {true} onChange={() => {changeTax()}}></Checkbox>\r\n                                </td>\r\n                                </tr>\r\n                                <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Quote Total: ${getQuoteTotal(quotedetails)}\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                </table>\r\n\r\n                    Notes to customer:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"customer_notes\"\r\n                    defaultValue={quoteData.customer_notes}\r\n                    onChange={(e) => {\r\n                        assignCustomerNotes(e.target.value);\r\n                    }  }\r\n                    {...bindCustomerNotes}\r\n                    >\r\n                    </textarea>\r\n\r\n                    <br/>\r\n\r\n                    Notes to installers:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"installer_notes\"\r\n                    defaultValue={quoteData.installer_notes}\r\n                    onChange={(e) => {\r\n                        assignInstallerNotes(e.target.value);\r\n                    }}\r\n                    {...bindInstallerNotes}\r\n                    >\r\n                    </textarea>\r\n                    <br/>\r\n                    <p>Estimator: {userFirstName + \" \" + userLastName}</p>< br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    \r\n                    <Button size=\"md\" variant=\"primary\" type=\"submit\" className=\"ant-btn ant-btn-primary\">Update Quote</Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default QuoteEdit;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteList.js",["420","421"],"import React, {useEffect, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Input, Space, Popover} from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {getAllInfo, getDetails, getProducts, SearchAllInfo} from \"../../api/quoteEditAPI\";\r\nimport { getUser } from '../../util/storage';\r\nimport getWordDoc from './quoteToWordBypass';\r\nconst {Search} = Input;\r\nconst {format } = require('date-fns-tz')\r\n\r\n  function QuoteList() {\r\n  let history = useHistory();\r\n  let user = getUser();\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [formData, setFormData] = useState([]);\r\n  const [testData, setTestData] = useState([]);\r\n  const [detailData, setDetailData] = useState([]);\r\n  const [prodData, setProdData] = useState([]);\r\n  \r\n    useEffect(() => {\r\n          const func = async () => {\r\n          await getAllInfo().then((result) => {\r\n            setTestData(result.data);\r\n          });\r\n        \r\n          await getDetails().then((item) => {\r\n            setDetailData(item.data);\r\n          });\r\n          await getProducts().then((item) => {\r\n            setProdData(item.data);\r\n          })\r\n        }\r\n        func();\r\n        \r\n        if(testData !== []){\r\n          setLoaded(true);\r\n        }\r\n        \r\n      },[]);\r\n\r\n      const getCompleted = (array) => {\r\n        let newArr = [];\r\n        array.forEach((item) => {\r\n          if (item.completed) {\r\n            newArr.push(item);\r\n          }\r\n        });\r\n        if(newArr.length === 0) return null;\r\n        else return newArr;\r\n      }\r\n      const getNotCompleted = (array) => {\r\n        let newArr = [];\r\n        array.forEach((item) => {\r\n          if (!item.completed) {\r\n            newArr.push(item);\r\n          }\r\n        });\r\n        if(newArr === []) return null;\r\n        else return newArr;\r\n      }\r\n      const getUserQuotes = (list) => {\r\n        let newList = [];\r\n        list.forEach((item) => {\r\n          if(item.UserID === user.UserID){\r\n            newList.push(item);\r\n          }\r\n        });\r\n        return newList;\r\n      }\r\n    const getDetailsByID = (id) => {\r\n        let array = [];\r\n        detailData.forEach((item) => {\r\n          if(item.quoteID === id){\r\n            array.push({\r\n              quoteID:item.quoteID,\r\n              id:item.subtotalID,\r\n              subtotalLines:item.subtotalLines,\r\n              total:item.subtotalAmount,\r\n              arr:getProductArr(item.SubtotalID)\r\n            });\r\n          }\r\n        });\r\n        return array;\r\n    }\r\n    const checkDate = (date) => {\r\n      let returnDate = \"\";\r\n      if(date === \"December 31st, 1969\"){\r\n      }\r\n      else{\r\n        returnDate = date;\r\n    }\r\n    return returnDate;\r\n    }\r\n    const getProductArr = (id) => {\r\n      let array = [];\r\n      prodData.forEach((item) => {\r\n             if(item.subtotalID === id){\r\n                  array.push({\r\n                    prodID:item.QuoteLineID,\r\n                    product:item.Product,\r\n                    notes:item.Notes,\r\n                    price:item.Subtotal\r\n                  })\r\n              }\r\n          });\r\n          return array;\r\n    }\r\n    const renderDetails = () => {\r\n      let rows = [];\r\n      formData.forEach((item) => {\r\n        rows.push(<Card title=\"Details\" bordered={true} type=\"inner\">\r\n          <p>{item.subtotalLines}</p>\r\n          <strong>Products</strong>\r\n          <table style={{width:'100%'}}>\r\n            <tbody>\r\n              {renderProducts(item.arr)}\r\n            </tbody>\r\n          </table>\r\n          \r\n          <p><strong>Total: </strong>{item.total}</p>\r\n        </Card>)\r\n\r\n      });\r\n      return rows;\r\n    }\r\n    const renderProducts = (array) => {\r\n      let rows = [];\r\n      array.forEach((item) => {\r\n        rows.push(\r\n          <tr width=\"100px\">\r\n            <td>{item.product}</td>\r\n            <td>{item.notes}</td>\r\n            <td>{item.price}</td>\r\n          </tr>\r\n      )})\r\n      return rows\r\n\r\n    }\r\n    const findQuote = async (value) => {\r\n      let result = await SearchAllInfo(value);\r\n      setTestData(result.data)\r\n    }\r\n    const columns =[\r\n      {\r\n        title:\"Customer Name\",\r\n        key:\"customer\",\r\n        render:(data) => (\r\n          <p>{data.CustFirstName + \" \" + data.CustLastName}</p>\r\n        )\r\n      },\r\n      {\r\n        title:\"Address\",\r\n        key:\"address\",\r\n        render:(data) => (\r\n          <p>{data.Address  + \", \" + data.City}</p>\r\n        )\r\n      },\r\n      {},\r\n\r\n      {\r\n        title:\"Salesman\",\r\n        key:\"user\",\r\n        render: (data) =>(\r\n          <div>\r\n             <p>{data.FirstName + \" \" + data.LastName}</p>\r\n          </div>\r\n         \r\n        )\r\n      },\r\n      {\r\n        title:\"Creation Date\",\r\n        key:\"date\",\r\n        render: (data) => (\r\n          <p>{format(new Date(data.creationDate),\"MMMM do',' yyyy\")}</p>\r\n        ),\r\n        sorter: (a,b) => new Date(a.creationDate) - new Date(b.creationDate)\r\n      },\r\n      {\r\n        title:\"Last Modified\",\r\n        key:\"modDate\",\r\n        render: (data) => (\r\n          <p>{checkDate(format(new Date(data.modifyDate), \"MMMM do',' yyyy\"))}</p>\r\n        ),\r\n        sorter: (a,b) => new Date(a.modifyDate) - new Date(b.modifyDate)\r\n      },\r\n      {\r\n        title:\"Options\",\r\n        key:\"options\",\r\n        render: (data) => (\r\n          <Popover content={\r\n          <div>\r\n            <Button\r\n              onClick={() => {\r\n                history.push(`/orders/${data.QuoteID}/new`)\r\n              }}>\r\n                Create Work Order\r\n              </Button>\r\n              <br />\r\n              <br />\r\n            <Button\r\n            onClick={() => {\r\n              getWordDoc(data);\r\n            }}>\r\n              Download Quote\r\n            </Button>\r\n            <br />\r\n            <br />\r\n            <Button\r\n            onClick={() => { \r\n                setFormData(getDetailsByID(data.QuoteID));\r\n                setShowForm(true);     \r\n                            }}>\r\n            View Quote</Button>\r\n            </div>}\r\n            trigger='clicked'>\r\n            <Button>. . .</Button>\r\n          </Popover>\r\n          \r\n        )\r\n      }   \r\n    ];\r\n\r\n    const colComplete = [\r\n      {\r\n        title:\"Customer Name\",\r\n        key:\"customer\",\r\n        render:(data) => (\r\n          <p>{data.CustFirstName + \" \" + data.CustLastName}</p>\r\n        )\r\n      },\r\n      {\r\n        title:\"Address\",\r\n        key:\"address\",\r\n        render:(data) => (\r\n          <p>{data.Address  + \", \" + data.City}</p>\r\n        )\r\n      },\r\n      {},\r\n\r\n      {\r\n        title:\"Salesman\",\r\n        key:\"user\",\r\n        render: (data) =>(\r\n          <div>\r\n             <p>{data.FirstName + \" \" + data.LastName}</p>\r\n          </div>\r\n         \r\n        )\r\n      },\r\n      {\r\n        title:\"Creation Date\",\r\n        key:\"date\",\r\n        render: (data) => (\r\n          <p>{format(new Date(data.creationDate),\"MMMM do',' yyyy\")}</p>\r\n        ),\r\n        sorter: (a,b) => new Date(a.creationDate) - new Date(b.creationDate)\r\n      },\r\n      {\r\n        title:\"Completed Date\",\r\n        key:\"completeDate\",\r\n        render: (data) => (\r\n          <p>{checkDate(format(new Date(data.modifyDate), \"MMMM do',' yyyy\"))}</p>\r\n        ),\r\n        sorter: (a,b) => new Date(a.modifyDate) - new Date(b.modifyDate)\r\n      },\r\n      {\r\n        title:\"Options\",\r\n        key:\"options\",\r\n        render: (data) => (\r\n          <Popover content={\r\n          <div>\r\n            <Button\r\n            onClick={() => {\r\n              getWordDoc(data);\r\n            }}>\r\n              Download Quote\r\n            </Button>\r\n            <br />\r\n            <br />\r\n            <Button\r\n            onClick={() => {\r\n                \r\n                setFormData(getDetailsByID(data.QuoteID));\r\n                setShowForm(true);     \r\n                            }}>\r\n            View Quote</Button>\r\n            </div>}\r\n            trigger='clicked'>\r\n            <Button>. . .</Button>\r\n          </Popover>\r\n          \r\n        )\r\n      }   \r\n    ]\r\n    if(loaded){\r\n\r\n      if(user.SecurityLevel === 'admin'){\r\n        return(\r\n        <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Quote\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n          \r\n\r\n        <h2>Active Quotes</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={getNotCompleted(testData)}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n        <h2>Completed Quotes</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={getCompleted(testData)}\r\n        columns={colComplete}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Quote\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quotes/${formData[0].quoteID}/edit`)}}\r\n        okText=\"Edit Quote\"\r\n        >\r\n         <div>\r\n           {renderDetails()}\r\n         </div>\r\n        </Modal>\r\n          </div>\r\n      )\r\n      }\r\n      else if (user.SecurityLevel === 'salesman'){\r\n        return (\r\n          <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Quote\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n          \r\n\r\n        <h2>Your Active Quotes</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={getUserQuotes(getNotCompleted(testData))}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n          <h2>Your Completed Quotes</h2>\r\n          <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={getUserQuotes(getCompleted(testData))}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Quote\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quoteinfo/${formData[0].quoteID}`)}}\r\n        okText=\"Edit Quote\"\r\n        >\r\n         <div>\r\n           {renderDetails()}\r\n         </div>\r\n        </Modal>\r\n          </div>\r\n        );\r\n      }\r\n      \r\n    }\r\n\r\n    else{\r\n      return(\r\n        <div>\r\n          Loading...\r\n        </div>\r\n        \r\n      );\r\n      \r\n    }\r\n    }\r\nexport default QuoteList;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuoteOne.js",["422","423","424","425","426","427","428","429"],"import React, {useState, useEffect} from \"react\";\r\nimport {useHistory } from \"react-router-dom\";\r\nimport Button from \"../../component/quotes/Button\";\r\nimport {useInput} from '../../hooks/input-hook';\r\nimport { useParams } from \"react-router\";\r\nimport { useDispatch} from \"react-redux\";\r\nimport qData from './quoteData.js';\r\nimport {getCustomerAddresses} from '../../api/customer';\r\nimport { getCustomers } from \"../../api/calendar\";\r\nimport {getUser} from '../../util/storage';\r\nimport { AutoComplete, Card, Row, Col, Checkbox } from \"antd\";\r\n\r\nfunction QuoteOne(props) {\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    let { qid } = useParams();\r\n    let history = useHistory();\r\n\r\n    \r\n    let  quotes = qData.quote_data;\r\n    let selectedQuote  = (parseInt(qid)) ? quotes.find((d) => { return parseInt(d.id) === parseInt(qid) }): {};\r\n    \r\n    \r\n    if(Object.keys(selectedQuote).length === 0){\r\n        history.push(`/quotes`);\r\n    }\r\n    const [user, setUser] = useState([]);\r\n    const [customers, setCustomers] = useState([]);\r\n    const [addresses, setAddresses] = useState([]);\r\n    \r\n    useEffect(async () => {\r\n        let result = await getCustomers();\r\n            let cust = result.data.map((c) => (\r\n                    {\r\n                    value : c.CustFirstName + \" \" + c.CustLastName + \" \" + c.CustomerID,\r\n                    id : c.CustomerID,\r\n                    name : c.CustFirstName + \" \" + c.CustLastName,\r\n                    first_name : c.CustFirstName,\r\n                    last_name : c.CustLastName,\r\n                    phone : c.Phone,\r\n                    email : c.Email,\r\n                    address : c.BillingAddress,\r\n                    city : c.CustCity,\r\n                    postal_code : c.CustPostalCode,\r\n                    region : c.CustRegion,\r\n                }\r\n            ));\r\n            setCustomers(cust);\r\n            setLoading(false);\r\n            setUser(getUser());    \r\n        },[selectedQuote]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {value: custID, assignValue: assignCustID} = useInput();\r\n    const {value: firstName, bind: bindFirstName, assignValue: assignFirstName} = useInput();\r\n    const {value: lastName, bind: bindLastName, assignValue: assignLastName} = useInput();\r\n    const {value: billingAddress, bind: bindBillingAddress, assignValue: assignBillingAddress} = useInput();\r\n    const {value: city, bind: bindCity, assignValue: assignCity} = useInput();\r\n    const {value: postCode, bind: bindPostCode, assignValue: assignPostCode} = useInput();\r\n    const {value: phoneNumber, bind: bindPhoneNumber, assignValue: assignPhoneNumber} = useInput();\r\n    const {value: email, bind: bindEmail, assignValue: assignEmail} = useInput();\r\n\r\n    const {value: addressID, assignValue: assignAddressID} = useInput();\r\n    const {value: siteAddress, bind: bindSiteAddress, assignValue: assignSiteAddress} = useInput();\r\n    const {value: siteCity, bind: bindSiteCity, assignValue: assignSiteCity} = useInput();\r\n    const {value: siteCode, bind: bindSiteCode, assignValue: assignSiteCode} = useInput();\r\n    const {value: siteProv, bind: bindSiteProv, assignValue: assignSiteProv} = useInput();\r\n    \r\n    const {value: customerNotes, bind: bindCustomerNotes,assignValue: assignCustomerNotes} = useInput();\r\n    const {value: installerNotes, bind: bindInstallerNotes, assignValue: assignInstallerNotes} = useInput();\r\n\r\n    const [tax, setTax] = useState(true);\r\n        const [counter, setcounter] = useState(1);\r\n        const [detailKey, setDetailKey] = useState(1);\r\n        const [prodKey, setProdKey] = useState(1);\r\n        const [quotedetails, setquotedetails] = useState([{\r\n                    key:0,\r\n                    details:selectedQuote.details,\r\n                    total:0.00,\r\n                    productArr:[{\r\n                        prodKey:0,\r\n                        product:\"\",\r\n                        notes:\"\",\r\n                        price:0.00\r\n                    }]\r\n                }]);\r\n\r\n    \r\n    \r\n    async function onCustomerSelect(e, option) {\r\n        if ((e === null || e === \"\" || e === undefined)) {\r\n            \r\n        } else {\r\n            assignCustID(option.id)\r\n            assignFirstName(option.first_name)\r\n            assignLastName(option.last_name)\r\n            assignPhoneNumber(option.phone)\r\n            assignEmail(option.email)\r\n            assignBillingAddress(option.address)\r\n            assignCity(option.city)\r\n            assignPostCode(option.postal_code)\r\n            let result = await getCustomerAddresses(option.id);\r\n            let addressList = result.data.map((item) => (\r\n                {\r\n                    value : item.Address,\r\n                    id:item.AddressID,\r\n                    address:item.Address,\r\n                    postal:item.PostalCode,\r\n                    city:item.City,\r\n                    prov:item.Province,\r\n                    region:item.Region\r\n\r\n                }\r\n            ));\r\n            setAddresses(addressList);\r\n        }\r\n    }\r\n\r\n    async function onAddressSelect(e, option){\r\n        if ((e === null || e === \"\" || e === undefined)) {\r\n            \r\n        } else {\r\n            assignAddressID(option.id)\r\n            assignSiteAddress(option.address)\r\n            assignSiteCity(option.city)\r\n            assignSiteProv(option.prov)\r\n            assignSiteCode(option.postal)\r\n        }\r\n    }\r\n    \r\n    const handleSubmit = (evt) => {\r\n\r\n        var payload = \r\n        {\r\n            userInfo:user,\r\n            id:custID,\r\n            addressID: addressID,\r\n            first_name: firstName,\r\n            last_name: lastName,\r\n            billing_address: billingAddress,\r\n            city: city,\r\n            post_code: postCode,\r\n            phone_number: phoneNumber,\r\n            email: email,\r\n            site_address: siteAddress,\r\n            site_city: siteCity,\r\n            site_prov:siteProv,\r\n            site_postal:siteCode,\r\n            customer_notes: customerNotes,\r\n            installer_notes: installerNotes,\r\n            details: quotedetails,\r\n            total: getQuoteTotal(quotedetails)\r\n        }\r\n\r\n        dispatch({\r\n            type: \"quote_one\",\r\n            payload: payload\r\n        })\r\n\r\n        props.onSetQuoteFormDataChange(payload);\r\n        evt.preventDefault();\r\n\r\n    }\r\n\r\n    const changeTax = () => {\r\n        if (tax === true){\r\n            setTax(false);\r\n        }\r\n        else if (tax === false){\r\n            setTax(true);\r\n        }\r\n    }        \r\n    const addNewDetail = (e) => {\r\n        e.preventDefault();\r\n        setcounter(counter +1);\r\n        var temp = quotedetails;\r\n        if(temp[temp.length] === 0){\r\n            temp[0] = {\r\n                key:detailKey,\r\n                details:\"\",\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        else{\r\n            temp[temp.length] = {\r\n                key:detailKey,\r\n                details:\"\",\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        setDetailKey(detailKey + 1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleAddProduct = (details,e) => {\r\n        e.preventDefault();\r\n        setcounter(counter + 1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        if(temp[index].productArr.length === 0){\r\n            temp[index].productArr[0] = {\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                notes:\"\",\r\n                price:0.00\r\n            }\r\n        }\r\n        else{\r\n            temp[index].productArr[temp[index].productArr.length] = {\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                notes:\"\",\r\n                price:0.00\r\n            }\r\n        }\r\n        setProdKey(prodKey + 1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleRemoveRow = (details, prod ,e) => {\r\n        e.preventDefault();\r\n        setcounter(counter - 1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        var prodIndex = temp[index].productArr.indexOf(prod);\r\n        temp[index].productArr.splice(prodIndex,1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleRemoveDetail = (details,e) => {\r\n        e.preventDefault();\r\n        setcounter(counter -1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        temp.splice(index,1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleDetailChange = (details, e) => {\r\n        details.details = e.target.value\r\n        details.details.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />')\r\n    }\r\n    const handleProductDetails = (prod, e) => {\r\n        prod.product = e.target.value;\r\n    }\r\n    const handleProductNotes = (prod, e) => {\r\n        prod.notes = e.target.value;\r\n    }\r\n    const handleProductPrice = (prod, e) => {\r\n        if(e.target.value === \"\"){\r\n            e.target.value = 0.00;\r\n        }\r\n        let newPrice = parseFloat(e.target.value);\r\n        let rounded = newPrice.toFixed(2);\r\n        prod.price = rounded;\r\n        setcounter(counter + 1);\r\n    }\r\n\r\n    const renderProducts = (details) => {\r\n        let rows = [];\r\n            if(details.productArr.length !== 0){\r\n                details.productArr.map((prod) => {\r\n\r\n                    rows.push(\r\n                         <tr>\r\n                             <td>\r\n                                 Product:\r\n                                 <input type=\"text\" key={prod.prodKey}  defaultValue={prod.product}\r\n                                    onChange={(e) => {\r\n                                        handleProductDetails(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n        \r\n                             </td>\r\n                            <td>\r\n                                Details:\r\n                                <input type=\"text\" key={prod.prodKey} defaultValue={prod.notes}\r\n                                    onChange={(e) => {\r\n                                        handleProductNotes(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n                            </td>\r\n                            <td>\r\n                                Price:\r\n                                <input type=\"number\" step=\".01\" key={prod.prodKey} defaultValue={prod.price}\r\n                                    onChange={(e) => {\r\n                                        handleProductPrice(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     defaultValue='0.00'\r\n                                     />\r\n                            </td>\r\n                             <td style={{textAlign:\"right\"}}>\r\n                             <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveRow(details, prod, e)}} >x</Button>\r\n                             </td>\r\n                         </tr>);\r\n                });\r\n            }\r\n            return rows;\r\n    }\r\n    const getTotal = (details) => {\r\n        let total = 0.00;\r\n        details.productArr.map((item) => {\r\n            total = total + parseFloat(item.price);\r\n        });\r\n        if (tax == true){\r\n            total = total * 1.13;\r\n        }\r\n        total = total.toFixed(2);\r\n        details.total = total;\r\n        return total;\r\n    }\r\n    const getQuoteTotal = (detail) => {\r\n        let total = 0.00;\r\n        detail.map((item) => {\r\n            total = total + parseFloat(item.total);\r\n        });\r\n        total = total.toFixed(2);\r\n        return total;\r\n    }\r\n    const renderRows = () => {\r\n        let rows = [];\r\n        if(quotedetails !== []){\r\n            \r\n            quotedetails.map((detail) => {\r\n            rows.push(\r\n            <tr>\r\n            <tr>\r\n            <tr>\r\n            <td colSpan=\"2\">\r\n                    <textarea \r\n                    key={detail.key}\r\n                    cols=\"150\" \r\n                    rows=\"6\" \r\n                    className=\"ant-input\"\r\n                    defaultValue={detail.details}\r\n                    onChange={(e) => {\r\n                            handleDetailChange(detail, e)\r\n                        }}\r\n                    >\r\n                    </textarea>\r\n                </td>\r\n                <td></td>\r\n                <td style={{textAlign:\"right\"}}>\r\n                    <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveDetail(detail,e)}} >Delete</Button>\r\n                </td>\r\n            </tr>\r\n            Products:\r\n            </tr>\r\n                <tr>\r\n                    {renderProducts(detail)}\r\n                </tr>\r\n        <tr>\r\n            <td>\r\n                <Button size=\"sm\" variant=\"primary\" onClick={(e) => {handleAddProduct(detail,e)}}>Add Product</Button>\r\n            </td>\r\n              \r\n        </tr>\r\n              \r\n            <tr>\r\n            <td style={{textAlign:\"right\"}}>\r\n                        Subtotal: {getTotal(detail)}\r\n                        </td>\r\n            </tr>\r\n            </tr>\r\n            );\r\n            \r\n        });\r\n        }\r\n        return rows;\r\n    }\r\n    \r\n\r\n    \r\n    if (isLoading) {\r\n        return <div className=\"App\">Loading...</div>;\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"Quote\" style={{width:\"80%\"}}>\r\n                <div>\r\n                    Select Customer:\r\n                    <AutoComplete \r\n                    onSelect={(e, option) => {onCustomerSelect(e, option)}}\r\n                    style={{ width: 200 }}\r\n                    options={customers}\r\n                    placeholder=\"Enter a customer\"\r\n                    filterOption={(inputValue, option) =>\r\n                        option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n                      }>    \r\n                    </AutoComplete>\r\n                    <br/>\r\n                    Select Site Address:\r\n                    <AutoComplete\r\n                    onSelect={(e, option) => {onAddressSelect(e, option)}}\r\n                    style={{ width: 200 }}\r\n                    options={addresses}\r\n                    placeholder=\"Choose an address\"\r\n                    filterOption={(inputValue, option) =>\r\n                        option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n                      }\r\n                    notFoundContent=\"Choose a customer first or no addresses found\"\r\n                    ></AutoComplete>\r\n                    <br/>\r\n                    <Row gutter={16}>\r\n                        <Col span={10}>\r\n                            <Card title=\"Customer and Billing\" bordered={false}>\r\n                            Customer:<br />\r\n                    <input type=\"text\" className=\"ant-input ant-col-8\" name=\"first_name\"\r\n                            placeholder=\"First Name\" {...bindFirstName} />\r\n                    <input type=\"text\" className=\"ant-input ant-col-8\" name=\"last_name\"\r\n                            placeholder=\"Last Name\" {...bindLastName} />\r\n                    <br/>\r\n                    Address:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"billing_address\"\r\n                            placeholder=\"Billing Address\" {...bindBillingAddress} />\r\n                    <br/>\r\n                    City:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"city\"\r\n                            placeholder=\"contractor city\" {...bindCity} />\r\n\r\n                    <br/>\r\n                    Postal Code:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"postal_code\"\r\n                            placeholder=\"contractor postal code\" {...bindPostCode} />\r\n                    <br/>\r\n                    Phone:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"phone_number\"\r\n                            placeholder=\"contractor phone number\" {...bindPhoneNumber} />\r\n\r\n                    <br/>\r\n                    Email:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"email\"\r\n                            placeholder=\"contractor email\" {...bindEmail} />\r\n                            </Card>\r\n                        </Col>\r\n                         <Col span={10}>\r\n                            <Card title=\"Site Address\" bordered={false}>\r\n                    Address:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"site_address\"\r\n                            placeholder=\"Site Address\" {...bindSiteAddress} />\r\n                    <br/>\r\n                    City:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"site_city\"\r\n                            placeholder=\"Site City\" {...bindSiteCity} />\r\n                    <br/>\r\n                    Province:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"site_prov\"\r\n                            placeholder=\"Site Province\" {...bindSiteProv} />\r\n                            < br/>\r\n                    Postal Code:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"site_code\"\r\n                            placeholder=\"Site Postal Code\" {...bindSiteCode} />\r\n                            </Card>\r\n                        </Col>\r\n                     </Row>\r\n                    <br/>\r\n                    <br/>\r\n                    <table style={{width:\"100%\"}}>\r\n                        <thead>\r\n                        <tr>\r\n                            <td>Quote Details and Products:</td>\r\n                            \r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {renderRows()}\r\n                        <tr>\r\n                            <td>\r\n                                <Button onClick={(e) => {addNewDetail(e)}}>Add Details</Button>\r\n                            </td>\r\n                        </tr>\r\n                        \r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Apply tax <Checkbox defaultChecked = {true} onChange={() => {changeTax()}}></Checkbox>\r\n                                </td>\r\n                                </tr>\r\n                                <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Quote Total: ${getQuoteTotal(quotedetails)}\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                </table>\r\n\r\n                    Notes to customer:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"customer_notes\"\r\n                    defaultValue={selectedQuote.customer_notes}\r\n                    onChange={(e) => {\r\n                        assignCustomerNotes(e.target.value);\r\n                    }  }\r\n                    {...bindCustomerNotes}\r\n                    >\r\n                    </textarea>\r\n\r\n                    <br/>\r\n\r\n                    Notes to installers:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"installer_notes\"\r\n                    defaultValue={selectedQuote.installer_notes}\r\n                    onChange={(e) => {\r\n                        assignInstallerNotes(e.target.value);\r\n                    }}\r\n                    {...bindInstallerNotes}\r\n                    >\r\n                    </textarea>\r\n                    <br/>\r\n                    Estimator: {user.FirstName + \" \" + user.LastName} \r\n\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <Button size=\"md\" variant=\"primary\" type=\"submit\" className=\"ant-btn ant-btn-primary\">Submit</Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default QuoteOne;\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\FormOne.js",["430","431","432"],"import React, { useState, useEffect } from \"react\";\r\nimport CustomSelect from \"../../component/quotes/CustomSelect.js\";\r\nimport qData from \"./quoteData.js\";\r\n\r\nconst data = qData.quote_data;\r\n\r\nfunction FormOne(props) {\r\n  const [quoteDataId, setQuoteDataId] = useState(props.quoteDataId);\r\n \r\n  function onSelectChange(e) {\r\n    if (!(e === null || e === \"\" || e === undefined)) {\r\n      props.onSetQuoteDataChange(data.find((d) => d.id == e));\r\n    } else {\r\n      props.onSetQuoteDataChange({});\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Form\">\r\n      <h2>Quote Selection</h2>\r\n      <form>\r\n        <div>\r\n          <label> Select Quote Type</label>\r\n          <CustomSelect\r\n            data={data}\r\n            quoteDataId={quoteDataId}\r\n            onSelectChange={onSelectChange}\r\n          />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormOne;\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteData.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\CustomSelect.js",["433","434"],"import React, { useState } from \"react\";\r\n\r\nfunction CustomSelect(props) {\r\n\tconst [data] = useState(props.data);\r\n\tconst [quoteDataId, setQuoteDataId] = useState(props.quoteDataId);\r\n\r\n\tfunction onChange(event) {\r\n\t\t// setQuoteDataId(event.target.value);\r\n\t\tif (props.onSelectChange) {\r\n\t\t\tprops.onSelectChange(event.target.value);\r\n\t\t}\r\n\t}\r\n\r\n\tlet options = data.map((d) => (\r\n\t\t<option key={d.id} value={d.id} data={d} >\r\n\t\t\t{d.name}\r\n\t\t</option>\r\n\t));\r\n\r\n\treturn (\r\n\t\t<select\r\n\t\t\tname=\"customSearch\"\r\n\t\t\tclassName=\"custom-search-select\"\r\n\t\t\tonChange={onChange}\r\n\t\t\tplaceholder=\"Select Item\"\r\n\t\t>\r\n\t\t\t<option value=\"\">Select Item</option>\r\n\t\t\t{options}\r\n\t\t</select>\r\n\t);\r\n}\r\nexport default CustomSelect;\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\quote_template.js",["435"],"import React from 'react';\r\nimport Text from 'react';\r\nimport { Email, Item, Box, Image} from 'react-html-email';\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst footer = \"https://i.ibb.co/tm6mdt0/footer.png\";\r\n\r\nconst getTotal = (array) => {\r\n    let gtotal = 0;\r\n    array.forEach((item) => {\r\n      gtotal = gtotal + parseFloat(item.total);\r\n    })\r\n    return gtotal;\r\n}\r\n\r\nfunction QuoteEmail (props) {\r\n  let customer = props.info;\r\nreturn (\r\n  <Email title=\"Reitzel Insulation Quote Details\"> \r\n    <Box>\r\n    <Image src={header} alt=\"Reitzel Insulation\" width={875} height={100}>\r\n    </Image>\r\n      <Item align=\"left\">\r\n     \r\n          <strong>Attention:</strong> {customer.first_name}{\" \"}\r\n          {customer.last_name}\r\n          <br /> Address: {customer.billing_address}\r\n          <br /> City: {customer.city}\r\n          <br /> Postal Code: {customer.post_code}\r\n          <br /> Phone: {customer.phone_number}\r\n          <br /> Email: {customer.email}\r\n          <br />\r\n\r\n          <strong>Site Address</strong>\r\n          <br /> Site Address: {customer.site_address}\r\n          <br /> Site City: {customer.site_city}\r\n          <br /> Site Province: {customer.site_prov}\r\n          <br /> Site Postal Code: {customer.site_postal}\r\n\r\n      </Item>\r\n      <div>\r\n          {customer.details.length > 0 && (\r\n            <table width=\"100%\" border=\"1\" cellPadding=\"10px\">\r\n              <thead>\r\n                <tr>\r\n                  <td colSpan=\"3\">Quote Details</td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {customer.details.map((item) => {\r\n\r\n                    return (\r\n                      <tr key={item.key}>\r\n                      <tr>\r\n                        <td colSpan=\"3\" style={{width:'100%', minWidth:\"875px\"}}>\r\n                          {item.details}\r\n                        </td>\r\n                        \r\n                      </tr>\r\n                      {item.productArr.map((prod) => {\r\n                        return (\r\n                            <tr key={prod.prodKey}>\r\n                              <td>\r\n                                {prod.product}\r\n                              </td>\r\n                              <td>\r\n                                {prod.notes}\r\n                              </td>\r\n                                <td>\r\n                                  {prod.price}\r\n                                </td>\r\n                              </tr>\r\n                          );\r\n                          })}\r\n                      <tr>\r\n                        <td colSpan=\"3\" style={{textAlign:\"right\"}}>\r\n                          Subtotal:${item.total}\r\n                        </td>\r\n                      </tr>\r\n                      </tr>\r\n                    );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          )}\r\n        </div>\r\n        <span>Notes: {customer.customer_notes}</span>\r\n        <br />\r\n        <span>Quote grand total: ${getTotal(customer.details)}</span>\r\n        <br />\r\n        <span>Please feel free to contact our office if you have any questions or concerns regarding this quotation. </span>\r\n        <br />\r\n        <span>Estimator:{customer.userInfo.FirstName + \" \" + customer.userInfo.LastName}</span>\r\n        <br/>\r\n        <span>Regards, Reitzel Insulation</span>\r\n\r\n  <Image src={footer} alt=\"Reitzel Insulation\" width={875} height={100}>\r\n    </Image>\r\n\r\n    </Box>\r\n  </Email>\r\n)\r\n}\r\n\r\nexport default QuoteEmail;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\Button.js",["436"],"// ./components/Button.js\r\nimport React, { useState } from \"react\";\r\nfunction Button(props) {\r\n  // const [size] = useState(props.size);\r\n  // const [variant] = useState(props.variant);\r\n  return (\r\n    <button class={`ant-btn ant-btn-${props.variant} ant-btn-${props.size}`} onClick={props.onClick}>{props.children}</button>\r\n  );\r\n}\r\nexport default Button;\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\hooks\\input-hook.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\quotes.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\footer\\index.js",["437","438","439","440"],"import { Center } from \"devextreme-react/map\";\r\nimport React from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst visa = \"https://i.ibb.co/XXWJ82B/visa.png\";\r\nconst master = \"https://i.ibb.co/DgctQDJ/master.png\";\r\nconst express = \"https://i.ibb.co/HhyY0k3/express.png\";\r\n\r\n\r\nexport default function Footerforquote() {\r\n  return (\r\n    <div className=\"footerforqueto\">\r\n      <div className=\"beware\">\r\n        PLEASE BE AWARE THAT POLYURETHANE SPRAY FOAM INSULATION REQUIRES A\r\n        THERMAL BARRIER I.E. DRYWALL, OR FIREPROOFING. ¼ INCH TOLERANCE DURING\r\n        APPLICATION IS REQUIRED.{\" \"}\r\n      </div>\r\n      <div className=\"payment\">\r\n        PAYMENT UPON COMPLETION OF WORK IS REQUIRED IN FULL BY CASH, CHEQUE,\r\n        VISA, MASTERCARD, OR AMERICAN EXPRESS. REITZEL INSULATION DOES NOT GIVE\r\n        TERMS UNLESS PRE-AUTHORIZED PRIOR TO PROJECT START DATE.\r\n      </div>\r\n      <div className=\"cardlogos\">\r\n        <img src={visa}></img>\r\n        <img src={express}></img>\r\n        <img src={master}></img>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\headforquote\\index.js",["441","442"],"import React from \"react\";\r\nimport \"./index.css\";\r\nconst logo=  \"https://i.ibb.co/FVFjQwV/logo.png\";\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\n\r\nexport default function HeadForQuote() {\r\n  return (\r\n    <div className=\"headerforquoto\">\r\n      <img src={header}></img>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderPreview.js",["443","444","445","446","447"],"import {Button, Space} from 'antd';\r\n\r\n\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst {format } = require('date-fns-tz');\r\n\r\n\r\nexport default function OrderPreview(props) {\r\n\r\n    const info = props.orderInfo;\r\n    const date = new Date();\r\n    const currentDate = date.getDay() + \" \" + date.getMonth() + \" \" + date.getFullYear();\r\n\r\n    function printContent() {\r\n        var content = document.getElementById(\"workForm\");\r\n        var pri = document.getElementById(\"ifmcontentstoprint\").contentWindow;\r\n        pri.document.open();\r\n        pri.document.write(content.innerHTML);\r\n        pri.document.close();\r\n        pri.focus();\r\n        pri.print();\r\n    }\r\n    function renderProducts(detail){\r\n        console.log(detail);\r\n        let prods=[];\r\n        detail.productArr.map((item) => {\r\n            prods.push(\r\n                <div>\r\n                    <p>{item.product} {item.notes}</p>\r\n                    <p>{item.price}</p>\r\n                </div>\r\n                \r\n            )\r\n        });\r\n        return prods;\r\n    }\r\n\r\n    function renderRows() {\r\n        let rows = [];\r\n        info.selectedDetails.map((item) => {\r\n            rows.push(\r\n                <tr>\r\n                    <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                        {info.allInfo.FirstName + \" \" + info.allInfo.LastName}\r\n                    </td>\r\n                    <td colSpan=\"2\"\r\n                    style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                        {item.details}\r\n                    </td>\r\n                    <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                        {renderProducts(item)}\r\n                    </td>\r\n                </tr>\r\n               \r\n               \r\n            )\r\n        })\r\n    return rows;\r\n    }\r\n\r\n    return (\r\n        <div style={{display:'flex', flexDirection:'column', alignItems:'center'}}>\r\n        <div id=\"workForm\" style={{width:\"80%\", border:\"1px solid grey\"}}>\r\n            <div className=\"head\" style={{display:\"flex\",flexDirection:\"row\", margin:\"auto\", padding:\"10px\"}}>\r\n                <div>\r\n                <img src={header}></img>\r\n                </div>\r\n                <div>\r\n                    <div style={{fontSize:\"xx-large\"}}>\r\n                    Sales Order\r\n                </div>\r\n                <div>\r\n                <table style={{border:\"1px solid grey\", margin:\"1px\", padding:\"2px\"}}>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\", minWidth:\"120px\"}}>\r\n                                Sales Date\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Sales Order #\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                {format(date,\"MMMM do',' yyyy\")}\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                            <input\r\n                            size='5'></input>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n                </div>\r\n                \r\n            <div>\r\n                <table style={{border:\"1px solid grey\"}}>\r\n                    <thead >\r\n                        <tr >\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                Customer Name and Address\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                Site Address\r\n                            </td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                {info.allInfo.CustFirstName + \" \" + info.allInfo.CustLastName}\r\n                                <br/>\r\n                                {info.allInfo.BillingAddress}\r\n                                <br/>\r\n                                {info.allInfo.CustCity}\r\n                                <br/>\r\n                                {info.allInfo.CustPostalCode}\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                {info.allInfo.Address}\r\n                                <br/>\r\n                                {info.allInfo.City + \", \" + info.allInfo.Province}\r\n                                <br/>\r\n                                {info.allInfo.PostalCode}\r\n                                <br/>\r\n                                Customer Phone: {info.allInfo.Phone}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div style={{float:'right', marginRight:'6%'}}>\r\n            <table style={{border:\"1px solid grey\", margin:\"1px\", padding:\"2px\"}}>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                P.O. #\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Terms\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                <input></input>\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                            <textarea>\r\n                            </textarea>\r\n                            <br />\r\n                            Due on receipt\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                    </table>\r\n            </div>\r\n            <div>\r\n                <table style={{border:\"1px solid grey\", width:\"100%\"}}>\r\n                    <thead>\r\n                        <tr style={{border:\"1px solid grey\", width:\"100%\"}}>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Item\r\n                            </td>\r\n                            <td colSpan='2'\r\n                            style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Description\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Ordered\r\n                            </td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {renderRows()}\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <td colSpan='3'\r\n                            style={{border:\"1px solid grey\", padding:\"2px\"}}>Additional Notes for Installers</td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>Total:</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan='3'\r\n                            style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                {info.allInfo.notesInstallers}\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                $ <input\r\n                                defaultValue={info.allInfo.QuoteTotal}>\r\n                                </input>\r\n                            </td>\r\n                        </tr>\r\n                    </tfoot>\r\n                </table>\r\n                <p>GST/HST No. 104459771</p>\r\n            </div>\r\n        </div>\r\n        <footer>\r\n            <br/>\r\n            <Space>\r\n                <Button\r\n                onClick={() => {printContent()}}>\r\n            Print\r\n                </Button>\r\n        <Button\r\n        size='large'\r\n        type=\"primary\">\r\n            Complete Work Order\r\n        </Button>\r\n        \r\n            </Space>\r\n             \r\n        </footer>\r\n        <iframe\r\n        id=\"ifmcontentstoprint\"\r\n        style={{ height: \"0px\", width: \"0px\", position: \"absolute\" }}\r\n      ></iframe>\r\n       \r\n    </div>\r\n    )\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderList.js",["448","449","450","451","452","453","454"],"import React, {useEffect, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Input, Popover} from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { SearchAllInfo} from \"../../api/quoteEditAPI\";\r\nimport { getAllInfoWO, getDetailsWO, getProductsWO } from '../../api/orders';\r\nimport { getUser } from '../../util/storage';\r\nimport WorkToPDFConvert from './workToPDFconvert';\r\nconst {Search} = Input;\r\nconst {format, zonedTimeToUtc } = require('date-fns-tz')\r\n\r\n  function OrderList() {\r\n  let history = useHistory();\r\n  let user = getUser();\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [formData, setFormData] = useState([]);\r\n  const [testData, setTestData] = useState([]);\r\n  const [detailData, setDetailData] = useState([]);\r\n  const [prodData, setProdData] = useState([]);\r\n\r\n    useEffect(() => {\r\n          const func = async () => {\r\n          await getAllInfoWO().then((result) => {\r\n            setTestData(result.data);\r\n          });\r\n        \r\n          await getDetailsWO().then((item) => {\r\n            setDetailData(item.data);\r\n          });\r\n          await getProductsWO().then((item) => {\r\n            setProdData(item.data);\r\n          })\r\n        }\r\n        func();\r\n        \r\n        if(testData !== []){\r\n          setLoaded(true);\r\n        }\r\n        \r\n      }, []);\r\n\r\n      const getUserQuotes = (list) => {\r\n        let newList = [];\r\n        list.map((item) => {\r\n          if(item.UserID === user.UserID){\r\n            newList.push(item);\r\n          }\r\n        });\r\n        return newList;\r\n      }\r\n    const getDetailsByID = (id) => {\r\n        let array = [];\r\n        detailData.map((item) => {\r\n          if(item.WODetailID === id){\r\n            array.push({\r\n              WorkOrderID:item.WorkOrderID,\r\n              id:item.WODetailID,\r\n              subtotalNotes:item.subtotalNotes,\r\n              total:item.subtotalAmount,\r\n              arr:getProductArr(item.WODetailID)\r\n            });\r\n          }\r\n        });\r\n        return array;\r\n    }\r\n    const getProductArr = (id) => {\r\n      let array = [];\r\n      prodData.map((item) => {\r\n             if(item.subtotalID === id){\r\n                  array.push({\r\n                    prodID:item.QuoteLineID,\r\n                    product:item.Product,\r\n                    notes:item.Notes,\r\n                    price:item.Subtotal\r\n                  })\r\n              }\r\n          });\r\n          return array;\r\n    }\r\n    const renderDetails = () => {\r\n      let rows = [];\r\n      formData.map((item) => {\r\n        rows.push(<Card title=\"Details\" bordered={true} type=\"inner\">\r\n          <p>{item.subtotalNotes}</p>\r\n          <strong>Products</strong>\r\n          <table style={{width:'100%'}}>\r\n            <tbody>\r\n              {renderProducts(item.arr)}\r\n            </tbody>\r\n          </table>\r\n          \r\n          <p><strong>Total: </strong>{item.total}</p>\r\n        </Card>)\r\n\r\n      });\r\n      return rows;\r\n    }\r\n    const renderProducts = (array) => {\r\n      let rows = [];\r\n      array.map((item) => {\r\n        rows.push(\r\n          <tr width=\"100px\">\r\n            <td>{item.product}</td>\r\n            <td>{item.notes}</td>\r\n            <td>{item.price}</td>\r\n          </tr>\r\n      )})\r\n      return rows\r\n\r\n    }\r\n    const findQuote = async (value) => {\r\n      let result = await SearchAllInfo(value);\r\n      setTestData(result.data)\r\n    }\r\n    const columns =[\r\n      {\r\n        title:\"Customer Name\",\r\n        key:\"customer\",\r\n        render:(data) => (\r\n          <p>{data.CustFirstName + \" \" + data.CustLastName}</p>\r\n        )\r\n      },\r\n      {\r\n        title:\"Address\",\r\n        key:\"address\",\r\n        render:(data) => (\r\n          <p>{data.Address  + \",\" + \" \" + data.City}</p>\r\n        )\r\n      },\r\n      {},\r\n\r\n      {\r\n        title:\"Salesman\",\r\n        key:\"user\",\r\n        render: (data) =>(\r\n          <div>\r\n             <p>{data.FirstName + \" \" + data.LastName}</p>\r\n          </div>\r\n         \r\n        )\r\n      },\r\n      {\r\n        title:\"Date Completed\",\r\n        key:\"completed\",\r\n        render: (data) =>{\r\n            if(data.completeDate !== null) {\r\n              return <p>{format(zonedTimeToUtc(data.completeDate,\"America/Toronto\"),\"MMMM do',' yyyy\")}</p>\r\n            }\r\n            else return <p> </p>\r\n        },\r\n        sorter: (a,b) => new Date(a.completeDate) - new Date(b.completeDate)\r\n      },\r\n      {\r\n        title:\"Options\",\r\n        key:\"options\",\r\n        render: (data) => (\r\n          <Popover content={\r\n            <div>\r\n             <Button\r\n            onClick={() => {\r\n              WorkToPDFConvert(data);\r\n            }}>\r\n              Download Work Order\r\n            </Button>\r\n            <br />\r\n            <br/>\r\n            <Button\r\n            onClick={() => { \r\n              setFormData(getDetailsByID(data.QuoteID));\r\n              setShowForm(true);     \r\n                          }}>\r\n              View Work Order\r\n            </Button>\r\n          </div>\r\n          }\r\n          trigger=\"clicked\">\r\n          <Button>. . . </Button>\r\n          </Popover>\r\n        )\r\n      }   \r\n    ]\r\n    if(loaded){\r\n\r\n      if(user.SecurityLevel === 'admin'){\r\n        return(\r\n        <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Order\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n\r\n        <h2>Active Work Orders</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={testData}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Work Order\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quoteinfo/${formData[0].quoteID}`)}}\r\n        okText=\"Edit Work Order\"\r\n        >\r\n         <div>\r\n           {renderDetails()}\r\n         </div>\r\n        </Modal>\r\n          </div>\r\n      )\r\n      }\r\n      else if (user.SecurityLevel === 'salesman'){\r\n        return (\r\n          <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Quote\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n          \r\n\r\n        <h2>Your Active Work Orders</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={getUserQuotes(testData)}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Work Order\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quoteinfo/${formData[0].quoteID}`)}}\r\n        okText=\"Edit Work Order\"\r\n        >\r\n         <div>\r\n           {renderDetails()}\r\n         </div>\r\n        </Modal>\r\n          </div>\r\n        );\r\n      }\r\n      \r\n    }\r\n\r\n    else{\r\n      return(\r\n        <div>\r\n          Loading...\r\n        </div>\r\n        \r\n      );\r\n      \r\n    }\r\n    }\r\nexport default OrderList;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\newOrder.js",["455","456","457","458","459","460","461","462"],"import React, {useState, useEffect} from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { Card, Checkbox, Row, Col, Form, DatePicker, Modal, Button, Select, message} from 'antd';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { getDetailsID, getProductsID, getAvailableTrucks, addNewOrder, addNewOrderDetail, addNewOrderProduct, updateQuoteOnComplete } from '../../api/orders';\r\nimport { getAllInfoID } from '../../api/quoteEditAPI';\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Item } = Form;\r\nconst {Option} = Select;\r\nconst { format } = require(\"date-fns-tz\");\r\n\r\nfunction NewOrder (props) {\r\n    \r\n    let quoteID = useRouteMatch('/orders/:oid/new').params.oid;\r\n    const history = useHistory();\r\n    const [quoteData, setQuoteData] = useState([]);\r\n    const [detailData, setDetailData] = useState([]);\r\n    const [prodData, setProdData] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [quoteDetails, setQuoteDetails] = useState([]);\r\n    const [showCalendar, setShowCalendar] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [trucks, setTrucks] = useState([]);\r\n\r\n    useEffect(async() => {\r\n      try {\r\n\r\n        await getAllInfoID(quoteID).then((result) => {\r\n          setQuoteData(result.data[0]);\r\n        });\r\n        let detailsInfo = await getDetailsID(quoteID);\r\n          setDetailData(detailsInfo.data);\r\n        let productInfo = await getProductsID(quoteID)\r\n          setProdData(productInfo.data);\r\n        createDetails(detailsInfo.data, productInfo.data);\r\n        await getAvailableTrucks().then((result) => {\r\n          setTrucks(result.data);\r\n        })\r\n      }\r\n      \r\n      catch(e) {\r\n        console.log(e);\r\n      }\r\n\r\n      \r\n      if(quoteData !== []){\r\n        \r\n        setLoaded(true);\r\n      }\r\n      \r\n    }, [])\r\n\r\n    const options = trucks.map((item) => (\r\n      <Option key = {item.TruckID}>{item.TruckNumber + \" \" + item.TruckInfo} </Option> \r\n    ))\r\n\r\n    const createOrder = async(values) => {\r\n    const validResult = await form.validateFields();\r\n    if (validResult.errorFields && validResult.errorFields.length > 0) return;\r\n      const workOrderInfo = {\r\n        allInfo:quoteData,\r\n        selectedDetails:findSelectedDetails(),\r\n        total:getSelectedTotal(findSelectedDetails()),\r\n        startDate: format(\r\n          values.selectedDate[0]._d,\r\n          \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\"\r\n        ),\r\n        endDate: format(\r\n          values.selectedDate[1]._d,\r\n          \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\"\r\n        ),\r\n        selectedTruck:values.selectedTruck,\r\n      }\r\n      let selectedTruckType = getTruckType(workOrderInfo.selectedTruck);\r\n      let order = await addNewOrder(workOrderInfo, selectedTruckType);\r\n      try {\r\n      let orderID = order.data.insertId;\r\n      workOrderInfo.selectedDetails.forEach(async(item) => {\r\n        let detail = await addNewOrderDetail(item, orderID);\r\n        let detailID = detail.data.insertId;\r\n        item.productArr.forEach(async(prod) => {\r\n          await addNewOrderProduct(prod, orderID, detailID);\r\n        });\r\n      })\r\n    }\r\n    catch(e) {\r\n      message.error(\"Something went wrong - please try again\");\r\n      console.log(e);\r\n    }\r\n    finally{\r\n      if(order.status === 200){\r\n        message.success(\"Order created\");\r\n      }\r\n      props.updateOrder(workOrderInfo);\r\n      updateAndCompleteQuote(workOrderInfo);\r\n      history.push('/home');\r\n    }\r\n    }\r\n\r\n    async function updateAndCompleteQuote(values) {\r\n      let confirm = await updateQuoteOnComplete(values);\r\n      return confirm;\r\n    }\r\n\r\n    function getTruckType(id) {\r\n      trucks.forEach((truck) => {\r\n        if(truck.TruckID === id) return truck.TruckType;\r\n      });\r\n    }\r\n\r\n    function getSelectedTotal() {\r\n      let total = 0;\r\n      quoteDetails.forEach((item) => {\r\n        if(item.selected){\r\n          total = total + item.total;\r\n        }\r\n      })\r\n      return total;\r\n    }\r\n\r\n    function findSelectedDetails() {\r\n      let selectItem = [];\r\n      quoteDetails.forEach((item) => {\r\n        if(item.selected){\r\n          selectItem.push(item);\r\n        }\r\n      });\r\n      return selectItem;\r\n    }\r\n    const createDetails = (detlist, prodlist) => {\r\n      if(quoteDetails !== []){\r\n      let temp = quoteDetails;\r\n      detlist.map((detail) => {\r\n         let detailObj = {\r\n                  id: detail.SubtotalID,\r\n                  details:detail.subtotalLines,\r\n                  total:detail.subtotalAmount,\r\n                  selected:false,\r\n                  productArr:[]\r\n              \r\n          }\r\n          prodlist.map((prod) => {\r\n              if(prod.subtotalID === detail.SubtotalID){\r\n                  let prodObj = {\r\n                      id:prod.QuoteLineID,\r\n                      product:prod.Product,\r\n                      notes:prod.Notes,\r\n                      price:prod.Subtotal\r\n                  }\r\n                  if(detailObj.productArr.length === 0){\r\n                      detailObj.productArr[0] =prodObj;\r\n                  }\r\n                  else{\r\n                      detailObj.productArr[detailObj.productArr.length] = prodObj;\r\n                  }\r\n                  \r\n              }\r\n          })\r\n          if(temp.length === 0){\r\n              temp[0] = detailObj;\r\n          }\r\n          else{\r\n              temp[temp.length] = detailObj;\r\n          }\r\n          setQuoteDetails(temp);\r\n      });        \r\n    }\r\n    else{\r\n      console.log(\"already created details\");\r\n    }\r\n  }\r\n\r\n    const renderList = () => {\r\n      let rows = [];\r\n      if(quoteDetails.length > 0){\r\n        quoteDetails.map((detail) => {\r\n          rows.push(\r\n            <div>\r\n              <tr>\r\n            <td>\r\n              <Checkbox onChange={() => {detail.selected = !detail.selected;}}></Checkbox>\r\n            </td>\r\n            <td colSpan='2' style={{fontSize:\"15px\"}}>\r\n              {detail.details}\r\n            </td>\r\n          </tr>\r\n            {renderProducts(detail.productArr)}\r\n            <tr>\r\n              <td>\r\n\r\n              </td>\r\n              <td style={{fontSize:\"15px\"}}>\r\n                <b>Total:</b>\r\n              </td>\r\n              <td>\r\n                {detail.total}\r\n              </td>\r\n            </tr>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n      return rows;\r\n    }\r\n\r\n    const renderProducts = (products) => {\r\n      let rows = [];\r\n      products.map((prod) => {\r\n        rows.push(\r\n          <tr>\r\n            <td>\r\n            </td>\r\n            <td>\r\n            </td>\r\n            <td>\r\n              {prod.product}\r\n            </td>\r\n            <td>\r\n              {prod.notes}\r\n            </td>\r\n            <td>\r\n              {prod.price}\r\n            </td>\r\n          </tr>\r\n        )\r\n      })\r\n\r\n      return rows;\r\n    }\r\n\r\n    if(loaded === true){\r\n     return (\r\n        <div>\r\n            <h2>New Order Creation</h2>\r\n            \r\n\r\n            \r\n            <Card title=\"Customer and Address Information\">\r\n                <Row>\r\n              <Col>\r\n                <Card title=\"Customer\" bordered={false} style={{ height:\"250px\"}}>\r\n                    <p>{quoteData.CustFirstName} {quoteData.CustLastName}</p>\r\n                    <p>{quoteData.Email}</p>\r\n                    <p>{quoteData.Phone}</p>\r\n                    <p>{quoteData.BillingAddress}</p>\r\n                </Card>\r\n              </Col>\r\n              <Col>\r\n              <Card title=\"Site Address\" bordered={false} style={{ height:\"250px\"}}>\r\n                  <p>{quoteData.Address}, {quoteData.City} {quoteData.Province}</p>\r\n                  <p></p>\r\n                  <p>{quoteData.PostalCode}</p>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n            </Card>\r\n            <Form form={form} onFinish={createOrder}>\r\n            <Card title='Select the details'>\r\n            <Item>\r\n              <table>\r\n                <tbody>\r\n                  {renderList()}\r\n                </tbody>\r\n              </table>\r\n            </Item>\r\n              </Card>\r\n              <Card title=\"Select the date\">\r\n                <Item\r\n              name=\"selectedDate\"\r\n              rules={[\r\n                {\r\n                   required:true,\r\n                   message:\"Please select a date\"\r\n                }\r\n              ]}\r\n            >\r\n              <RangePicker\r\n                showTime={{ format: \"HH:mm\" }}\r\n                format=\"YYYY-MM-DD HH:mm\"\r\n                className=\"datepicker\"\r\n              />\r\n              \r\n            </Item>\r\n            <Item>\r\n            <Button type=\"primary\" onClick={() => {setShowCalendar(true)}}>Show Calendar</Button>\r\n            </Item>\r\n              </Card>\r\n            \r\n            \r\n            <Card>\r\n              <Item>\r\n              <h1>Select truck</h1>\r\n            </Item>\r\n            <Item\r\n            name=\"selectedTruck\"\r\n            rules={[\r\n              {\r\n                 required:true,\r\n                 message:\"Please select a truck\"\r\n              }\r\n            ]}>\r\n              <Select\r\n              notFoundContent=\"No trucks available\">{options}</Select>\r\n            </Item>\r\n            </Card>\r\n            \r\n            <Item>\r\n              <Button size=\"large\" type=\"primary\" htmlType=\"submit\">Create Work Order</Button>\r\n            </Item>\r\n            \r\n            \r\n                </Form>\r\n            <Modal\r\n            visible={showCalendar}\r\n            onCancel={() => {setShowCalendar(false)}}\r\n            width=\"90%\"\r\n            >\r\n            </Modal>\r\n             \r\n        </div>\r\n    )   \r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                Loading...\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewOrder;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\orders.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\menucreate.js",["463"],"import { getMenu } from '../util/storage';\r\nimport {home, quotes, orders, invoices, customers, settings, users, trucks, roles} from './leftnavitems';\r\n\r\nexport function menuCreate() {\r\n    settings.children = [];\r\n    let menu = [settings];\r\n    let roleMenu = getMenu();\r\n    let menuArr = roleMenu.RoleMenu.split(', ');\r\n    let menuArrRev = menuArr.reverse();\r\n    menuArrRev.map((item) => {\r\n        switch (item) {\r\n            case '/home':\r\n                menu.unshift(home);\r\n                break;\r\n            case '/quotes':\r\n                menu.unshift(quotes);\r\n                break;\r\n            case '/orders':\r\n                menu.unshift(orders);\r\n                break;\r\n            case '/invoices':\r\n                menu.unshift(invoices);\r\n                break;\r\n            case '/customers':\r\n                menu.unshift(customers);\r\n                break;\r\n            case '/users':\r\n                settings.children.push(users);\r\n                break;\r\n            case '/trucks':\r\n                settings.children.push(trucks);\r\n                break;\r\n            case '/roles':\r\n                settings.children.push(roles);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    })\r\n    return menu;\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\leftnavitems.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\encryption.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\checks.js",[],["464","465"],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\leftnav.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesToolSnap.js",["466"],"import React, { useEffect, useState } from 'react';\r\nimport { getAddress } from '../../../api/addresses';\r\n\r\n\r\nconst {format} = require('date-fns-tz');\r\n\r\n\r\nexport default function SalesToolSnap (model) {\r\n  const data = model.data.appointmentData;\r\n  const [address, setAddress] = useState([]);\r\n  useEffect(() => {\r\n    const func = async() => {\r\n      let result = await getAddress(data.AddressID)\r\n      setAddress(result.data[0]);\r\n    }\r\n    func();\r\n  },[address.length]);\r\n\r\n  return (\r\n    <div>\r\n        <b style={{fontSize:15}}>\r\n         {data.text}\r\n        </b> \r\n      <p>\r\n       {address.Address} {address.City}, {address.Province}\r\n       <br/>\r\n       {address.PostalCode}\r\n      </p>\r\n      <p style={{color:'grey'}}>{`${format(new Date(data.startDate),\"h':'mm aa\")} - ${format(new Date(data.endDate),\"h':'mm aa\")}`}</p>\r\n    </div>\r\n  )\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\assets\\paths.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Word_Templates\\quoteWord.js",["467","468","469","470"],"import React from 'react';\r\nimport { Document, ImageRun, Packer, Paragraph, TextRun, Table, TableRow, TableCell } from 'docx';\r\n\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst footer = 'https://i.ibb.co/tm6mdt0/footer.png';\r\nconst docx = require(\"docx\");\r\nconst {format } = require('date-fns-tz');\r\nlet formatDate = format(new Date(), \"yyyy_MM_dd\");\r\n\r\n\r\n\r\nlet renderDetails = (info) => {\r\n    let rowArray = [];\r\n    info.details.map((item) => {\r\n        let newRow = new TableRow({\r\n            width:{\r\n                size:8000\r\n            },\r\n            children:[\r\n                new TableCell({\r\n                    width:{\r\n                        size:8000\r\n                    },\r\n                    children:[\r\n                        new Paragraph({\r\n                             text:item.details\r\n                        })\r\n                    ]\r\n                   \r\n                })\r\n            ]\r\n        });\r\n        let newProdTable = new TableRow({\r\n            width:{\r\n                size:8000\r\n            },\r\n            children:[\r\n                new TableCell({\r\n                    children:[\r\n                        new Table({\r\n                            rows:renderProds(item.productArr)\r\n                        }),\r\n                        new Paragraph({\r\n                            text:`Detail Total: ${item.total}`\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n            \r\n        })\r\n        rowArray.push(newRow);\r\n        rowArray.push(newProdTable);\r\n        return newRow;\r\n    })\r\n    return rowArray;\r\n}\r\n\r\nlet renderProds = (info) => {\r\n    console.log(info);\r\n    let detailArr = [];\r\n    info.map((item) => {\r\n        let newRow = new TableRow({\r\n            children:[\r\n                new TableCell({\r\n                  children:[\r\n                      new Paragraph({\r\n                          text:item.product\r\n                      })\r\n                  ]  \r\n                }),\r\n                new TableCell({\r\n                    children:[\r\n                        new Paragraph({\r\n                            text:item.notes\r\n                        })\r\n                    ]\r\n                }),\r\n                new TableCell({\r\n                    children:[\r\n                        new Paragraph({\r\n                            text:item.price\r\n                        })\r\n                    ]  \r\n                })\r\n            ]\r\n    });\r\n    detailArr.push(newRow);\r\n    return newRow;\r\n    })\r\n    console.log(info);\r\n    return detailArr;\r\n}\r\n\r\nexport default async function QuoteToWord(info) {\r\n    const head = await fetch(\r\n        \"https://i.ibb.co/0snCVqq/header.png\"\r\n    ).then(r => r.blob());\r\n    const foot = await fetch(\r\n        'https://i.ibb.co/tm6mdt0/footer.png'\r\n    ).then(r => r.blob());\r\n\r\n    const doc = new Document({\r\n            sections: [{\r\n                properties: {},\r\n                children: [\r\n                    new Paragraph({\r\n                        children:[\r\n                            new ImageRun({\r\n                                data:head,\r\n                                transformation:{\r\n                                    width:600,\r\n                                    height:125\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    new Paragraph({\r\n                        children: [\r\n                            new TextRun({\r\n                                text: \"Attention:\",\r\n                                bold: true,\r\n                            }),\r\n                            new TextRun({\r\n                                text: info.first_name + \" \" + info.last_name\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Address:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.billing_address\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"City:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.city\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Postal Code:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.post_code\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Phone:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.phone_number\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Email:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.email\r\n                            }),\r\n                        ],\r\n                    }),\r\n                    new Paragraph({\r\n                        children:[\r\n                            new TextRun({\r\n                                text:\"Site Information\",\r\n                                bold:true\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Site Address:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.site_address\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Site City:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.site_city\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Site Province\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.site_prov\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Site Postal Code:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.site_postal\r\n                            }),\r\n                        ],\r\n                    }),\r\n                    new Table({\r\n                        width:{\r\n                            size:8000\r\n                        },\r\n                        rows:[\r\n                            new TableRow({\r\n                                children:[\r\n                                    new TableCell({\r\n                                        width:{\r\n                                            size:8000\r\n                                        },\r\n                                        children:[\r\n                                            new Paragraph({\r\n                                                text:\"Quote Details\"\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    }),\r\n                    new Table({\r\n                        rows: renderDetails(info)\r\n                    }),\r\n                    new Paragraph({\r\n                        text:`Quote total: ${info.total}`\r\n                    }),\r\n                    new Paragraph({\r\n                        break:2\r\n                    }),\r\n                    new Paragraph({\r\n                        children:[\r\n                            new TextRun({\r\n                                text:\"Customer Notes: \",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.customer_notes\r\n                            })\r\n                        ]\r\n                    }),\r\n                    new Paragraph({\r\n                        children:[\r\n                            new TextRun({\r\n                                text:`PLEASE BE AWARE THAT POLYURETHANE SPRAY FOAM INSULATION REQUIRES A THERMAL BARRIER I.E. DRYWALL, OR FIREPROOFING. ¼ INCH TOLERANCE DURING APPLICATION IS REQUIRED.`,\r\n                                break:2,\r\n                                size:13\r\n                            }),\r\n                            new TextRun({\r\n                                text:`PAYMENT UPON COMPLETION OF WORK IS REQUIRED IN FULL BY CASH, CHEQUE, VISA, MASTERCARD, OR AMERICAN EXPRESS. REITZEL INSULATION DOES NOT GIVE TERMS UNLESS PRE-AUTHORIZED PRIOR TO PROJECT START DATE.`,\r\n                                break:1,\r\n                                size:13\r\n                            }),\r\n                            new ImageRun({\r\n                                data:foot,\r\n                                transformation:{\r\n                                    width:600,\r\n                                    height:80\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n            }],\r\n        });\r\n\r\n        const buffer = await Packer.toBuffer(doc);\r\n    const blob = new Blob([buffer], {type: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"});\r\n    const link = document.createElement('a');\r\n    link.href = window.URL.createObjectURL(blob);\r\n    link.download = `${info.first_name}_${info.last_name}_${formatDate}_Quote.docx`;\r\n    link.click();\r\n    return (\r\n        null\r\n    );\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteToWordBypass.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillTooltip.js",["471","472","473","474","475","476","477","478"],"import React, { useEffect, useState } from 'react';\r\nimport { getAddress } from '../../../api/addresses';\r\nimport { Button, Form, Popup, TextArea } from 'devextreme-react';\r\nimport { deleteWorkOrder } from '../../../api/calendar';\r\nimport {message, Modal} from 'antd';\r\n\r\nconst {format} = require('date-fns-tz');\r\n\r\n\r\nexport default function FillTooltip(model) {\r\n    const data = model.data.appointmentData;\r\n  const [address, setAddress] = useState([]);\r\n  const [showPop, setShowPop] = useState(false);\r\n  const [info, setInfo] = useState(data.text);\r\n  useEffect(() => {\r\n    const func = async() => {\r\n      let result = await getAddress(data.AddressID)\r\n      setAddress(result.data[0]);\r\n    }\r\n    func();\r\n  },[address.length]);\r\n  const deleteClicked = async() => {\r\n    Modal.confirm({title:\"Do you want to delete this appointment?\", onOk(){deleteWorkOrder(data.WorkOrderID)}});\r\n  }\r\n\r\n  const editClicked = async(data) => {\r\n    setShowPop(true);\r\n  }\r\n\r\n    return(\r\n        <div>\r\n             <div style={{float:'right'}}>\r\n        <Button hint='Edit appointment' icon='clearformat' onClick={editClicked}></Button><Button icon='clearsquare' hint=\"Delete appointment\" title='DeleteButton' onClick={deleteClicked}></Button>\r\n      </div>\r\n      <b style={{fontSize:15}}>\r\n         {data.text}\r\n      </b>\r\n      <p>\r\n       {address.Address} {address.City}, {address.Province}\r\n       <br/>\r\n       {address.PostalCode}\r\n      </p>\r\n      \r\n      <p style={{color:'grey'}}>{`${format(new Date(data.startDate),\"h':'mm aa\")} - ${format(new Date(data.endDate),\"h':'mm aa\")}`}</p>\r\n        </div>\r\n    )\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillFunctions.js",["479","480","481","482"],"import React from \"react\";\r\nimport {Checkbox} from 'antd';\r\nimport { getElementInfo } from \"devextreme-react/core/configuration/react/element\";\r\n \r\nexport function createDetails (detlist, prodlist) {\r\n    let temp = [];\r\n    detlist.map((detail) => {\r\n       let detailObj = {\r\n                id: detail.SubtotalID,\r\n                details:detail.subtotalLines,\r\n                total:detail.subtotalAmount,\r\n                selected:false,\r\n                productArr:[]\r\n        }\r\n        prodlist.map((prod) => {\r\n            if(prod.subtotalID === detail.SubtotalID){\r\n                let prodObj = {\r\n                    id:prod.QuoteLineID,\r\n                    product:prod.Product,\r\n                    notes:prod.Notes,\r\n                    price:prod.Subtotal\r\n                }\r\n                if(detailObj.productArr.length === 0){\r\n                    detailObj.productArr[0] =prodObj;\r\n                }\r\n                else{\r\n                    detailObj.productArr[detailObj.productArr.length] = prodObj;\r\n                }\r\n                \r\n            }\r\n        })\r\n        if(temp.length === 0){\r\n            temp[0] = detailObj;\r\n        }\r\n        else{\r\n            temp[temp.length] = detailObj;\r\n        }\r\n        return(temp);\r\n    });\r\n    return temp;        \r\n}\r\n\r\nexport function renderList (array) {\r\n    let rows = [];\r\n    if(array.length > 0){\r\n      array.map((detail) => {\r\n        rows.push(\r\n          <div>\r\n            <tr>\r\n                <td>\r\n                <Checkbox onChange={() => {detail.selected = !detail.selected;}}></Checkbox>\r\n                </td>\r\n          <td colSpan='2' style={{fontSize:\"15px\"}}>\r\n            {detail.details}\r\n          </td>\r\n        </tr>\r\n          {renderProducts(detail.productArr)}\r\n          <tr>\r\n            <td>\r\n\r\n            </td>\r\n            <td style={{fontSize:\"15px\"}}>\r\n              <b>Total:</b>\r\n            </td>\r\n            <td>\r\n              {detail.total}\r\n            </td>\r\n          </tr>\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n    return rows;\r\n  }\r\n\r\nfunction renderProducts (products) {\r\n    let rows = [];\r\n    products.map((prod) => {\r\n      rows.push(\r\n        <tr>\r\n          <td>\r\n          </td>\r\n          <td>\r\n          </td>\r\n          <td>\r\n            {prod.product}\r\n          </td>\r\n          <td>\r\n            {prod.notes}\r\n          </td>\r\n          <td>\r\n            {prod.price}\r\n          </td>\r\n        </tr>\r\n      )\r\n    })\r\n\r\n    return rows;\r\n  }\r\n\r\n  export function getTruckType(id, array) {\r\n    let workType = \"\";\r\n    array.forEach(element => {\r\n      if(element.id === id) {\r\n        workType = element.TruckType;\r\n      }\r\n    });\r\n    return workType;\r\n  }\r\n\r\n  export function getSelectedTotal(array) {\r\n    let totalAmt = 0;\r\n    array.forEach(element => {\r\n      if(element.selected) {\r\n        totalAmt = totalAmt + element.total\r\n      }\r\n    });\r\n    return totalAmt;\r\n  }\r\n\r\n  export function getSelectedDetails(array) {\r\n    let details = [];\r\n    array.forEach(element => {\r\n      if(element.selected) {\r\n        details.push(element);\r\n      }\r\n    });\r\n    return details;\r\n  }","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\confirm_work.js",["483"],"import { getCustomer } from \"../../api/customer\";\r\nimport React from 'react';\r\nimport { Email, Item} from 'react-html-email';\r\nimport { getUser } from '../../util/storage';\r\n\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst { format} = require(\"date-fns-tz\");\r\n\r\n\r\nexport default function ConfirmWorkOrder(props) {\r\n    const customer = async() => {\r\n        let info = await getCustomer(props.info.CustomerID);\r\n        return info.data[0];\r\n    } \r\n    const user = getUser();\r\n\r\n    return(\r\n        <Email title=\"Your upcoming Reitzel appointment\">\r\n            <Item>\r\n                <img src={header}></img>\r\n            </Item>\r\n            <Item>\r\n                <p>Hi {customer().CustFirstName} {customer().CustLastName},</p>\r\n            <br/>\r\n            <p>Thank you for choosing Reitzel Insulation! Here are the appointment details for your upcoming job:</p>\r\n\r\n            <p>Date: {format(new Date(props.info.startDate),\"MMMM do',' yyyy\")}</p>\r\n            <p> Approximate Arrival Time:  {format(new Date(props.info.startDate),\"K:mm\")}</p>\r\n            <br />\r\n            </Item>\r\n            <Item>\r\n            Please find the job details below.\r\n            </Item>\r\n            <Item>\r\n                <p>\r\n                    This is an automated email. If you have any questions after reading this document, please reply to your rep at {user.Email} or call the office at 519-886-6100.\r\n            Thank you for your business!\r\n                </p>\r\n               <Item>\r\n                  <p>\r\n                  Regards,\r\n                    \r\n            The Reitzel Team  \r\n               </p> \r\n               </Item>\r\n               \r\n            \r\n            </Item>\r\n\r\n\r\n        </Email>\r\n    )\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\update_work.js",["484"],"import React from 'react';\r\nimport { Email, Item} from 'react-html-email';\r\nimport { getUser } from '../../util/storage';\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\n\r\n\r\nconst { format} = require(\"date-fns-tz\");\r\n\r\nfunction UpdateWork(props){\r\n    const user = getUser();\r\n    return(\r\n        <Email title=\"\">\r\n            <Item>\r\n            <img src={header}></img>\r\n            </Item>\r\n            <Item>\r\n            <br />\r\n            <p>There has been a change in your appointment time. Here are the new details for your booking:</p>\r\n\r\n            <p>Date: {format(new Date(props.info.startDate),\"MMMM do',' yyyy\")}</p>\r\n            <p> Approximate Arrival Time:  {format(new Date(props.info.startDate),\"K:mm\")}</p>\r\n            <br />\r\n            </Item>\r\n            <Item>\r\n                <p>\r\n                    This is an automated email. If you have any questions after reading this email, please reply to your rep at {user.Email} or call the office at 519-886-6100.\r\n            Thank you for your business!\r\n                </p>\r\n                <br />\r\n                <p>\r\n                    Regards,\r\n\r\n            The Reitzel Team \r\n                </p>\r\n               \r\n            \r\n            </Item>\r\n\r\n            \r\n\r\n\r\n        </Email>\r\n    )\r\n}\r\n\r\nexport default UpdateWork;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\workToPDFconvert.js",["485"],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Word_Templates\\workPDF.js",["486","487"],"import React from 'react';\r\nimport { Document, ImageRun, Packer, Paragraph, TextRun, Table, TableRow, TableCell } from 'docx';\r\n\r\nconst docx = require(\"docx\");\r\nconst {format } = require('date-fns-tz');\r\nlet formatDate = format(new Date(), \"yyyy_MM_dd\");\r\n\r\n\r\n\r\nlet renderDetails = (info) => {\r\n    console.log(info);\r\n    let rowArray = [];\r\n    info.details.map((item) => {\r\n        let newRow = new TableRow({\r\n            width:{\r\n                size:8000\r\n            },\r\n            children:[\r\n                new TableCell({\r\n                    width:{\r\n                        size:8000\r\n                    },\r\n                    children:[\r\n                        new Paragraph({\r\n                             text:item.details\r\n                        })\r\n                    ]\r\n                   \r\n                })\r\n            ]\r\n        });\r\n        let newProdTable = new TableRow({\r\n            width:{\r\n                size:8000\r\n            },\r\n            children:[\r\n                new TableCell({\r\n                    children:[\r\n                        new Table({\r\n                            rows:renderProds(item.productArr)\r\n                        }),\r\n                        new Paragraph({\r\n                            text:`Detail Total: ${item.total}`\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n        rowArray.push(newRow);\r\n        rowArray.push(newProdTable);\r\n        return newRow;\r\n    })\r\n    return rowArray;\r\n}\r\n\r\nlet renderProds = (info) => {\r\n    let detailArr = [];\r\n    if(info.length > 0){\r\n    info.forEach((item) => {\r\n        let newRow = new TableRow({\r\n            children:[\r\n                new TableCell({\r\n                  children:[\r\n                      new Paragraph({\r\n                          text:item.product\r\n                      })\r\n                  ]  \r\n                }),\r\n                new TableCell({\r\n                    children:[\r\n                        new Paragraph({\r\n                            text:item.notes\r\n                        })\r\n                    ]\r\n                }),\r\n                new TableCell({\r\n                    children:[\r\n                        new Paragraph({\r\n                            text:item.price\r\n                        })\r\n                    ]  \r\n                })\r\n            ]\r\n    });\r\n    detailArr.push(newRow);\r\n    })\r\n}\r\n    else {\r\n        let noProdRow = new TableRow({\r\n            children:[\r\n                new TableCell({\r\n                    children:[\r\n                        new Paragraph({\r\n                            text:\"No products listed\"\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n        detailArr.push(noProdRow);\r\n    }\r\n    return detailArr;\r\n}\r\n\r\nexport default async function WorkToPDF(info) {\r\n    console.log(info);\r\n    const head = await fetch(\r\n        \"https://i.ibb.co/0snCVqq/header.png\"\r\n    ).then(r => r.blob());\r\n    const foot = await fetch(\r\n        'https://i.ibb.co/tm6mdt0/footer.png'\r\n    ).then(r => r.blob());\r\n\r\n    const doc = new Document({\r\n            sections: [{\r\n                properties: {},\r\n                children: [\r\n                    new Paragraph({\r\n                        children:[\r\n                            new ImageRun({\r\n                                data:head,\r\n                                transformation:{\r\n                                    width:600,\r\n                                    height:125\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    new Paragraph({\r\n                        children: [\r\n                            new TextRun({\r\n                                text: \"Attention:\",\r\n                                bold: true,\r\n                            }),\r\n                            new TextRun({\r\n                                text: info.first_name + \" \" + info.last_name\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Address:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.billing_address\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"City:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.city\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Postal Code:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.post_code\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Phone:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.phone_number\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Email:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.email\r\n                            }),\r\n                        ],\r\n                    }),\r\n                    new Paragraph({\r\n                        children:[\r\n                            new TextRun({\r\n                                text:\"Site Information\",\r\n                                bold:true\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Site Address:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.site_address\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Site City:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.site_city\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Site Province\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.site_prov\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Site Postal Code:\",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.site_postal\r\n                            }),\r\n                        ],\r\n                    }),\r\n                    new Table({\r\n                        width:{\r\n                            size:8000\r\n                        },\r\n                        rows:[\r\n                            new TableRow({\r\n                                children:[\r\n                                    new TableCell({\r\n                                        width:{\r\n                                            size:8000\r\n                                        },\r\n                                        children:[\r\n                                            new Paragraph({\r\n                                                text:\"Work Order Details\"\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    }),\r\n                    new Table({\r\n                        rows: renderDetails(info)\r\n                    }),\r\n                    new Paragraph({\r\n                        text:`Work total: ${info.total}`\r\n                    }),\r\n                    new Paragraph({\r\n                        break:2\r\n                    }),\r\n                    \r\n                    new Paragraph({\r\n                        children:[\r\n                            new TextRun({\r\n                                text:`PLEASE BE AWARE THAT POLYURETHANE SPRAY FOAM INSULATION REQUIRES A THERMAL BARRIER I.E. DRYWALL, OR FIREPROOFING. ¼ INCH TOLERANCE DURING APPLICATION IS REQUIRED.`,\r\n                                break:2,\r\n                                size:13\r\n                            }),\r\n                            new TextRun({\r\n                                text:`PAYMENT UPON COMPLETION OF WORK IS REQUIRED IN FULL BY CASH, CHEQUE, VISA, MASTERCARD, OR AMERICAN EXPRESS. REITZEL INSULATION DOES NOT GIVE TERMS UNLESS PRE-AUTHORIZED PRIOR TO PROJECT START DATE.`,\r\n                                break:1,\r\n                                size:13\r\n                            }),\r\n                            new ImageRun({\r\n                                data:foot,\r\n                                transformation:{\r\n                                    width:600,\r\n                                    height:80\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n            }],\r\n        });\r\n\r\n        const buffer = await Packer.toBuffer(doc);\r\n    const blob = new Blob([buffer], {type: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"});\r\n    const link = document.createElement('a');\r\n    link.href = window.URL.createObjectURL(blob);\r\n    link.download = `${info.first_name}_${info.last_name}_${formatDate}_WO.docx`;\r\n    link.click();\r\n    return (\r\n        null\r\n    );\r\n}",{"ruleId":"488","replacedBy":"489"},{"ruleId":"490","replacedBy":"491"},{"ruleId":"492","severity":1,"message":"493","line":24,"column":1,"nodeType":"494","endLine":37,"endColumn":3},{"ruleId":"495","severity":1,"message":"496","line":10,"column":8,"nodeType":"497","messageId":"498","endLine":10,"endColumn":11},{"ruleId":"495","severity":1,"message":"499","line":24,"column":13,"nodeType":"497","messageId":"498","endLine":24,"endColumn":17},{"ruleId":"495","severity":1,"message":"500","line":1,"column":17,"nodeType":"497","messageId":"498","endLine":1,"endColumn":25},{"ruleId":"495","severity":1,"message":"501","line":17,"column":7,"nodeType":"497","messageId":"498","endLine":17,"endColumn":9},{"ruleId":"495","severity":1,"message":"502","line":10,"column":15,"nodeType":"497","messageId":"498","endLine":10,"endColumn":18},{"ruleId":"503","severity":1,"message":"504","line":16,"column":35,"nodeType":"505","messageId":"506","endLine":16,"endColumn":37},{"ruleId":"503","severity":1,"message":"504","line":16,"column":51,"nodeType":"505","messageId":"506","endLine":16,"endColumn":53},{"ruleId":"495","severity":1,"message":"507","line":11,"column":23,"nodeType":"497","messageId":"498","endLine":11,"endColumn":37},{"ruleId":"495","severity":1,"message":"508","line":16,"column":10,"nodeType":"497","messageId":"498","endLine":16,"endColumn":18},{"ruleId":"509","severity":1,"message":"510","line":19,"column":15,"nodeType":"511","endLine":32,"endColumn":8},{"ruleId":"509","severity":1,"message":"512","line":32,"column":10,"nodeType":"513","endLine":32,"endColumn":28,"suggestions":"514"},{"ruleId":"503","severity":1,"message":"504","line":46,"column":27,"nodeType":"505","messageId":"506","endLine":46,"endColumn":29},{"ruleId":"515","severity":1,"message":"516","line":131,"column":16,"nodeType":"497","messageId":"517","endLine":131,"endColumn":30},{"ruleId":"503","severity":1,"message":"518","line":150,"column":18,"nodeType":"505","messageId":"506","endLine":150,"endColumn":20},{"ruleId":"503","severity":1,"message":"518","line":150,"column":35,"nodeType":"505","messageId":"506","endLine":150,"endColumn":37},{"ruleId":"509","severity":1,"message":"519","line":153,"column":6,"nodeType":"513","endLine":153,"endColumn":8,"suggestions":"520"},{"ruleId":"503","severity":1,"message":"518","line":154,"column":12,"nodeType":"505","messageId":"506","endLine":154,"endColumn":14},{"ruleId":"495","severity":1,"message":"521","line":4,"column":9,"nodeType":"497","messageId":"498","endLine":4,"endColumn":18},{"ruleId":"509","severity":1,"message":"522","line":62,"column":10,"nodeType":"513","endLine":62,"endColumn":17,"suggestions":"523"},{"ruleId":"503","severity":1,"message":"504","line":172,"column":27,"nodeType":"505","messageId":"506","endLine":172,"endColumn":29},{"ruleId":"524","severity":1,"message":"525","line":180,"column":26,"nodeType":"511","messageId":"526","endLine":180,"endColumn":28},{"ruleId":"495","severity":1,"message":"527","line":11,"column":10,"nodeType":"497","messageId":"498","endLine":11,"endColumn":21},{"ruleId":"495","severity":1,"message":"528","line":11,"column":23,"nodeType":"497","messageId":"498","endLine":11,"endColumn":35},{"ruleId":"495","severity":1,"message":"529","line":12,"column":10,"nodeType":"497","messageId":"498","endLine":12,"endColumn":15},{"ruleId":"495","severity":1,"message":"530","line":2,"column":16,"nodeType":"497","messageId":"498","endLine":2,"endColumn":25},{"ruleId":"503","severity":1,"message":"504","line":130,"column":25,"nodeType":"505","messageId":"506","endLine":130,"endColumn":27},{"ruleId":"495","severity":1,"message":"531","line":1,"column":17,"nodeType":"497","messageId":"498","endLine":1,"endColumn":26},{"ruleId":"532","severity":1,"message":"533","line":9,"column":5,"nodeType":"534","messageId":"535","endLine":11,"endColumn":8},{"ruleId":"536","severity":1,"message":"537","line":14,"column":17,"nodeType":"538","endLine":14,"endColumn":35},{"ruleId":"524","severity":1,"message":"525","line":331,"column":20,"nodeType":"511","messageId":"526","endLine":331,"endColumn":22},{"ruleId":"509","severity":1,"message":"539","line":22,"column":5,"nodeType":"513","endLine":22,"endColumn":21,"suggestions":"540"},{"ruleId":"524","severity":1,"message":"525","line":20,"column":31,"nodeType":"511","messageId":"526","endLine":20,"endColumn":33},{"ruleId":"495","severity":1,"message":"541","line":2,"column":23,"nodeType":"497","messageId":"498","endLine":2,"endColumn":24},{"ruleId":"536","severity":1,"message":"537","line":14,"column":13,"nodeType":"538","endLine":14,"endColumn":31},{"ruleId":"488","replacedBy":"542"},{"ruleId":"490","replacedBy":"543"},{"ruleId":"495","severity":1,"message":"544","line":12,"column":5,"nodeType":"497","messageId":"498","endLine":12,"endColumn":12},{"ruleId":"509","severity":1,"message":"545","line":63,"column":7,"nodeType":"546","endLine":67,"endColumn":9},{"ruleId":"495","severity":1,"message":"547","line":73,"column":10,"nodeType":"497","messageId":"498","endLine":73,"endColumn":19},{"ruleId":"495","severity":1,"message":"548","line":79,"column":25,"nodeType":"497","messageId":"498","endLine":79,"endColumn":41},{"ruleId":"549","severity":1,"message":"550","line":163,"column":7,"nodeType":"538","endLine":166,"endColumn":8},{"ruleId":"495","severity":1,"message":"551","line":14,"column":12,"nodeType":"497","messageId":"498","endLine":14,"endColumn":19},{"ruleId":"495","severity":1,"message":"552","line":15,"column":23,"nodeType":"497","messageId":"498","endLine":15,"endColumn":35},{"ruleId":"495","severity":1,"message":"553","line":16,"column":12,"nodeType":"497","messageId":"498","endLine":16,"endColumn":23},{"ruleId":"495","severity":1,"message":"554","line":17,"column":12,"nodeType":"497","messageId":"498","endLine":17,"endColumn":23},{"ruleId":"509","severity":1,"message":"555","line":43,"column":11,"nodeType":"513","endLine":43,"endColumn":13,"suggestions":"556"},{"ruleId":"524","severity":1,"message":"525","line":48,"column":30,"nodeType":"511","messageId":"526","endLine":48,"endColumn":32},{"ruleId":"524","severity":1,"message":"525","line":58,"column":33,"nodeType":"511","messageId":"526","endLine":58,"endColumn":35},{"ruleId":"524","severity":1,"message":"525","line":286,"column":47,"nodeType":"511","messageId":"526","endLine":286,"endColumn":49},{"ruleId":"524","severity":1,"message":"525","line":328,"column":39,"nodeType":"511","messageId":"526","endLine":328,"endColumn":41},{"ruleId":"524","severity":1,"message":"525","line":340,"column":27,"nodeType":"511","messageId":"526","endLine":340,"endColumn":29},{"ruleId":"524","severity":1,"message":"525","line":350,"column":39,"nodeType":"511","messageId":"526","endLine":350,"endColumn":41},{"ruleId":"495","severity":1,"message":"557","line":2,"column":45,"nodeType":"497","messageId":"498","endLine":2,"endColumn":50},{"ruleId":"509","severity":1,"message":"558","line":39,"column":9,"nodeType":"513","endLine":39,"endColumn":11,"suggestions":"559"},{"ruleId":"509","severity":1,"message":"560","line":21,"column":9,"nodeType":"546","endLine":21,"endColumn":111},{"ruleId":"509","severity":1,"message":"510","line":31,"column":15,"nodeType":"511","endLine":51,"endColumn":10},{"ruleId":"524","severity":1,"message":"525","line":261,"column":47,"nodeType":"511","messageId":"526","endLine":261,"endColumn":49},{"ruleId":"561","severity":1,"message":"562","line":291,"column":38,"nodeType":"563","endLine":291,"endColumn":57},{"ruleId":"524","severity":1,"message":"525","line":304,"column":39,"nodeType":"511","messageId":"526","endLine":304,"endColumn":41},{"ruleId":"503","severity":1,"message":"504","line":307,"column":17,"nodeType":"505","messageId":"506","endLine":307,"endColumn":19},{"ruleId":"524","severity":1,"message":"525","line":316,"column":27,"nodeType":"511","messageId":"526","endLine":316,"endColumn":29},{"ruleId":"524","severity":1,"message":"525","line":326,"column":39,"nodeType":"511","messageId":"526","endLine":326,"endColumn":41},{"ruleId":"495","severity":1,"message":"530","line":1,"column":27,"nodeType":"497","messageId":"498","endLine":1,"endColumn":36},{"ruleId":"495","severity":1,"message":"564","line":8,"column":23,"nodeType":"497","messageId":"498","endLine":8,"endColumn":37},{"ruleId":"503","severity":1,"message":"504","line":12,"column":56,"nodeType":"505","messageId":"506","endLine":12,"endColumn":58},{"ruleId":"495","severity":1,"message":"565","line":5,"column":9,"nodeType":"497","messageId":"498","endLine":5,"endColumn":20},{"ruleId":"495","severity":1,"message":"564","line":5,"column":22,"nodeType":"497","messageId":"498","endLine":5,"endColumn":36},{"ruleId":"495","severity":1,"message":"566","line":2,"column":8,"nodeType":"497","messageId":"498","endLine":2,"endColumn":12},{"ruleId":"495","severity":1,"message":"500","line":2,"column":17,"nodeType":"497","messageId":"498","endLine":2,"endColumn":25},{"ruleId":"495","severity":1,"message":"567","line":1,"column":10,"nodeType":"497","messageId":"498","endLine":1,"endColumn":16},{"ruleId":"536","severity":1,"message":"537","line":24,"column":9,"nodeType":"538","endLine":24,"endColumn":25},{"ruleId":"536","severity":1,"message":"537","line":25,"column":9,"nodeType":"538","endLine":25,"endColumn":28},{"ruleId":"536","severity":1,"message":"537","line":26,"column":9,"nodeType":"538","endLine":26,"endColumn":27},{"ruleId":"495","severity":1,"message":"568","line":3,"column":7,"nodeType":"497","messageId":"498","endLine":3,"endColumn":11},{"ruleId":"536","severity":1,"message":"537","line":9,"column":7,"nodeType":"538","endLine":9,"endColumn":25},{"ruleId":"495","severity":1,"message":"569","line":12,"column":11,"nodeType":"497","messageId":"498","endLine":12,"endColumn":22},{"ruleId":"524","severity":1,"message":"525","line":26,"column":38,"nodeType":"511","messageId":"526","endLine":26,"endColumn":40},{"ruleId":"524","severity":1,"message":"525","line":40,"column":41,"nodeType":"511","messageId":"526","endLine":40,"endColumn":43},{"ruleId":"536","severity":1,"message":"537","line":66,"column":17,"nodeType":"538","endLine":66,"endColumn":35},{"ruleId":"549","severity":1,"message":"550","line":216,"column":9,"nodeType":"538","endLine":219,"endColumn":8},{"ruleId":"509","severity":1,"message":"558","line":40,"column":10,"nodeType":"513","endLine":40,"endColumn":12,"suggestions":"570"},{"ruleId":"524","severity":1,"message":"525","line":44,"column":25,"nodeType":"511","messageId":"526","endLine":44,"endColumn":27},{"ruleId":"524","severity":1,"message":"525","line":53,"column":31,"nodeType":"511","messageId":"526","endLine":53,"endColumn":33},{"ruleId":"524","severity":1,"message":"525","line":68,"column":27,"nodeType":"511","messageId":"526","endLine":68,"endColumn":29},{"ruleId":"524","severity":1,"message":"525","line":82,"column":27,"nodeType":"511","messageId":"526","endLine":82,"endColumn":29},{"ruleId":"524","severity":1,"message":"525","line":100,"column":24,"nodeType":"511","messageId":"526","endLine":100,"endColumn":26},{"ruleId":"571","severity":1,"message":"572","line":127,"column":35,"nodeType":"505","messageId":"573","endLine":127,"endColumn":36},{"ruleId":"495","severity":1,"message":"574","line":18,"column":12,"nodeType":"497","messageId":"498","endLine":18,"endColumn":22},{"ruleId":"495","severity":1,"message":"575","line":19,"column":12,"nodeType":"497","messageId":"498","endLine":19,"endColumn":20},{"ruleId":"509","severity":1,"message":"510","line":26,"column":15,"nodeType":"511","endLine":52,"endColumn":6},{"ruleId":"509","severity":1,"message":"576","line":52,"column":8,"nodeType":"513","endLine":52,"endColumn":10,"suggestions":"577"},{"ruleId":"524","severity":1,"message":"525","line":134,"column":28,"nodeType":"511","messageId":"526","endLine":134,"endColumn":30},{"ruleId":"524","severity":1,"message":"525","line":143,"column":31,"nodeType":"511","messageId":"526","endLine":143,"endColumn":33},{"ruleId":"524","severity":1,"message":"525","line":177,"column":35,"nodeType":"511","messageId":"526","endLine":177,"endColumn":37},{"ruleId":"524","severity":1,"message":"525","line":209,"column":27,"nodeType":"511","messageId":"526","endLine":209,"endColumn":29},{"ruleId":"524","severity":1,"message":"525","line":10,"column":27,"nodeType":"511","messageId":"526","endLine":10,"endColumn":29},{"ruleId":"488","replacedBy":"578"},{"ruleId":"490","replacedBy":"579"},{"ruleId":"509","severity":1,"message":"539","line":17,"column":5,"nodeType":"513","endLine":17,"endColumn":21,"suggestions":"580"},{"ruleId":"495","severity":1,"message":"581","line":1,"column":8,"nodeType":"497","messageId":"498","endLine":1,"endColumn":13},{"ruleId":"495","severity":1,"message":"582","line":4,"column":7,"nodeType":"497","messageId":"498","endLine":4,"endColumn":13},{"ruleId":"495","severity":1,"message":"583","line":5,"column":7,"nodeType":"497","messageId":"498","endLine":5,"endColumn":13},{"ruleId":"495","severity":1,"message":"584","line":6,"column":7,"nodeType":"497","messageId":"498","endLine":6,"endColumn":11},{"ruleId":"495","severity":1,"message":"585","line":3,"column":18,"nodeType":"497","messageId":"498","endLine":3,"endColumn":22},{"ruleId":"495","severity":1,"message":"586","line":3,"column":24,"nodeType":"497","messageId":"498","endLine":3,"endColumn":29},{"ruleId":"495","severity":1,"message":"587","line":3,"column":31,"nodeType":"497","messageId":"498","endLine":3,"endColumn":39},{"ruleId":"495","severity":1,"message":"588","line":5,"column":9,"nodeType":"497","messageId":"498","endLine":5,"endColumn":16},{"ruleId":"495","severity":1,"message":"589","line":13,"column":10,"nodeType":"497","messageId":"498","endLine":13,"endColumn":17},{"ruleId":"495","severity":1,"message":"590","line":14,"column":10,"nodeType":"497","messageId":"498","endLine":14,"endColumn":14},{"ruleId":"495","severity":1,"message":"591","line":14,"column":16,"nodeType":"497","messageId":"498","endLine":14,"endColumn":23},{"ruleId":"509","severity":1,"message":"539","line":21,"column":5,"nodeType":"513","endLine":21,"endColumn":21,"suggestions":"592"},{"ruleId":"495","severity":1,"message":"593","line":3,"column":10,"nodeType":"497","messageId":"498","endLine":3,"endColumn":24},{"ruleId":"524","severity":1,"message":"525","line":15,"column":29,"nodeType":"511","messageId":"526","endLine":15,"endColumn":31},{"ruleId":"524","severity":1,"message":"525","line":46,"column":26,"nodeType":"511","messageId":"526","endLine":46,"endColumn":28},{"ruleId":"524","severity":1,"message":"525","line":78,"column":25,"nodeType":"511","messageId":"526","endLine":78,"endColumn":27},{"ruleId":"536","severity":1,"message":"537","line":20,"column":17,"nodeType":"538","endLine":20,"endColumn":35},{"ruleId":"536","severity":1,"message":"537","line":14,"column":13,"nodeType":"538","endLine":14,"endColumn":31},{"ruleId":"524","severity":1,"message":"525","line":12,"column":33,"nodeType":"511","messageId":"526","endLine":12,"endColumn":35},{"ruleId":"495","severity":1,"message":"581","line":1,"column":8,"nodeType":"497","messageId":"498","endLine":1,"endColumn":13},{"ruleId":"495","severity":1,"message":"584","line":4,"column":7,"nodeType":"497","messageId":"498","endLine":4,"endColumn":11},"no-native-reassign",["594"],"no-negated-in-lhs",["595"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'jwt' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'useState' is defined but never used.","'id' is assigned a value but never used.","'url' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setaddressinfo' is assigned a value but never used.","'formData' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'createTable', 'match', and 'testData'. Either include them or remove the dependency array.","ArrayExpression",["596"],"no-redeclare","'estimateResult' is already defined.","redeclared","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'regions' and 'salesmen'. Either include them or remove the dependency array.",["597"],"'getRegion' is defined but never used.","React Hook useEffect has missing dependencies: 'getAddressList' and 'match'. Either include them or remove the dependency array.",["598"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'addressList' is assigned a value but never used.","'setaddresses' is assigned a value but never used.","'form1' is assigned a value but never used.","'useEffect' is defined but never used.","'Component' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'data.AddressID'. Either include it or remove the dependency array.",["599"],"'A' is defined but never used.",["594"],["595"],"'Promise' is assigned a value but never used.","The 'selectedQuote' conditional could make the dependencies of useEffect Hook (at line 77) change on every render. To fix this, wrap the initialization of 'selectedQuote' in its own useMemo() Hook.","VariableDeclarator","'quoteData' is assigned a value but never used.","'setQuoteFormData' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'allData' is assigned a value but never used.","'setQuoteData' is assigned a value but never used.","'quoteDetail' is assigned a value but never used.","'productList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'counter', 'createDetails', 'quoteID', 'quotedetails', and 'setText'. Either include them or remove the dependency array. You can also do a functional update 'setcounter(c => ...)' if you only need 'counter' in the 'setcounter' call.",["600"],"'Space' is defined but never used.","React Hook useEffect has a missing dependency: 'testData'. Either include it or remove the dependency array.",["601"],"The 'selectedQuote' conditional could make the dependencies of useEffect Hook (at line 51) change on every render. To fix this, wrap the initialization of 'selectedQuote' in its own useMemo() Hook.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setQuoteDataId' is assigned a value but never used.","'quoteDataId' is assigned a value but never used.","'Text' is defined but never used.","'Center' is defined but never used.","'logo' is assigned a value but never used.","'currentDate' is assigned a value but never used.",["602"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'detailData' is assigned a value but never used.","'prodData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'createDetails', 'quoteData', and 'quoteID'. Either include them or remove the dependency array.",["603"],["594"],["595"],["604"],"'React' is defined but never used.","'header' is assigned a value but never used.","'footer' is assigned a value but never used.","'docx' is assigned a value but never used.","'Form' is defined but never used.","'Popup' is defined but never used.","'TextArea' is defined but never used.","'message' is defined but never used.","'showPop' is assigned a value but never used.","'info' is assigned a value but never used.","'setInfo' is assigned a value but never used.",["605"],"'getElementInfo' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"606","fix":"607"},{"desc":"608","fix":"609"},{"desc":"610","fix":"611"},{"desc":"612","fix":"613"},{"desc":"614","fix":"615"},{"desc":"616","fix":"617"},{"desc":"616","fix":"618"},{"desc":"619","fix":"620"},{"desc":"612","fix":"621"},{"desc":"612","fix":"622"},"Update the dependencies array to be: [createTable, match, tableData.length, testData]",{"range":"623","text":"624"},"Update the dependencies array to be: [regions, salesmen]",{"range":"625","text":"626"},"Update the dependencies array to be: [count, getAddressList, match]",{"range":"627","text":"628"},"Update the dependencies array to be: [address.length, data.AddressID]",{"range":"629","text":"630"},"Update the dependencies array to be: [counter, createDetails, quoteID, quotedetails, setText]",{"range":"631","text":"632"},"Update the dependencies array to be: [testData]",{"range":"633","text":"634"},{"range":"635","text":"634"},"Update the dependencies array to be: [createDetails, quoteData, quoteID]",{"range":"636","text":"637"},{"range":"638","text":"630"},{"range":"639","text":"630"},[1086,1104],"[createTable, match, tableData.length, testData]",[4939,4941],"[regions, salesmen]",[2375,2382],"[count, getAddressList, match]",[803,819],"[address.length, data.AddressID]",[1755,1757],"[counter, createDetails, quoteID, quotedetails, setText]",[1313,1315],"[testData]",[1375,1377],[1827,1829],"[createDetails, quoteData, quoteID]",[461,477],[719,735]]
[{"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\index.js":"1","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\App.js":"2","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\redux\\estimateStore.js":"3","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\redux\\reducers\\estimateReducer.js":"4","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\redux\\reducers\\quoteReducer.js":"5","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\redux\\reducers\\addressReducer.js":"6","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\login\\index.js":"7","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\admin\\index.js":"8","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\index.js":"9","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\util\\storage.js":"10","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\newpasswordform.js":"11","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\leftnav\\index.js":"12","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\main\\index.js":"13","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\searchbar\\index.js":"14","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\head\\index.js":"15","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\base.js":"16","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\config\\values.js":"17","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\calendar.js":"18","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\reset_password.js":"19","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\viewquoteform.js":"20","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\newestimateform.js":"21","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\viewworkform.js":"22","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Refresh.js":"23","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\newcustomerform.js":"24","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\orders.js":"25","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\quoteEditAPI.js":"26","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\avatar\\index.js":"27","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\linkbutton\\index.js":"28","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\EstimateForm.js":"29","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\neworder.js":"30","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\config\\checks.js":"31","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Form_Buttons\\newCustomerButton.js":"32","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\util\\storedArrays.js":"33","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\SalesDatasource.js":"34","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\DatePicker.js":"35","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\addresses.js":"36","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\customer.js":"37","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Form_Buttons\\findCustomerButton.js":"38","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesSnapshot.js":"39","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesToolSnap.js":"40","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesTemplate.js":"41","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\updateConfirm.js":"42","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\assets\\paths.js":"43","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\confirmation.js":"44","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\profile\\profile.js":"45","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\config\\menucreate.js":"46","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\newestimate\\index.js":"47","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\newcustomer\\index.js":"48","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\addressInfo\\index.js":"49","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\trucks\\index.js":"50","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\roles\\index.js":"51","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\customers\\index.js":"52","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\invoices\\index.js":"53","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\users\\index.js":"54","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\index.js":"55","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\index.js":"56","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\changeemailform.js":"57","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\changepassword.js":"58","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\home\\index.js":"59","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\config\\leftnavitems.js":"60","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\config\\leftnav.js":"61","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\home\\Template.js":"62","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\home\\SalesmanTemplate.js":"63","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderPreview.js":"64","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\trucks.js":"65","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\customers\\custInfo.js":"66","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\customers\\custList.js":"67","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\FormOne.js":"68","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\encryption.js":"69","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\newuserform.js":"70","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\modifyuserform.js":"71","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\newworkorderform.js":"72","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderList.js":"73","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\newOrder.js":"74","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteChange.js":"75","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteEdit.js":"76","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteList.js":"77","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuotePrint.js":"78","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuoteOne.js":"79","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteData.js":"80","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\CustomSelect.js":"81","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tabs.js":"82","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Legend.js":"83","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesCalendar.js":"84","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\Button.js":"85","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\FoamCalendar.js":"86","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillCalendar.js":"87","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\QuoteInfoCreate.js":"88","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\workToPDFconvert.js":"89","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\FoamSnapshot.js":"90","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillSnapshot.js":"91","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\quotes.js":"92","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteToWordBypass.js":"93","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\quote_template.js":"94","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\hooks\\input-hook.js":"95","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Word_Templates\\quoteWord.js":"96","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesTooltip.js":"97","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\confirm_work.js":"98","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\update_work.js":"99","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillTemplate.js":"100","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillFunctions.js":"101","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tab.js":"102","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\headforquote\\index.js":"103","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\footer\\index.js":"104","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillTooltip.js":"105","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Word_Templates\\workPDF.js":"106","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\assets\\header.js":"107"},{"size":421,"mtime":1664829259310,"results":"108","hashOfConfig":"109"},{"size":394,"mtime":1628787079344,"results":"110","hashOfConfig":"109"},{"size":472,"mtime":1664829259776,"results":"111","hashOfConfig":"109"},{"size":477,"mtime":1664829259785,"results":"112","hashOfConfig":"109"},{"size":474,"mtime":1664829259863,"results":"113","hashOfConfig":"109"},{"size":345,"mtime":1664829259781,"results":"114","hashOfConfig":"109"},{"size":2655,"mtime":1664829259356,"results":"115","hashOfConfig":"109"},{"size":1526,"mtime":1664829259139,"results":"116","hashOfConfig":"109"},{"size":5062,"mtime":1664829258858,"results":"117","hashOfConfig":"109"},{"size":503,"mtime":1664829259867,"results":"118","hashOfConfig":"109"},{"size":1692,"mtime":1664829258391,"results":"119","hashOfConfig":"109"},{"size":1678,"mtime":1664829259151,"results":"120","hashOfConfig":"109"},{"size":1517,"mtime":1664829259157,"results":"121","hashOfConfig":"109"},{"size":5875,"mtime":1664829259164,"results":"122","hashOfConfig":"109"},{"size":2131,"mtime":1664829259145,"results":"123","hashOfConfig":"109"},{"size":1463,"mtime":1664829258563,"results":"124","hashOfConfig":"109"},{"size":136,"mtime":1664829259304,"results":"125","hashOfConfig":"109"},{"size":9936,"mtime":1664829258842,"results":"126","hashOfConfig":"109"},{"size":735,"mtime":1664829258247,"results":"127","hashOfConfig":"109"},{"size":2559,"mtime":1664829258400,"results":"128","hashOfConfig":"109"},{"size":603,"mtime":1664829258389,"results":"129","hashOfConfig":"109"},{"size":2592,"mtime":1664829258402,"results":"130","hashOfConfig":"109"},{"size":241,"mtime":1664829258431,"results":"131","hashOfConfig":"109"},{"size":7265,"mtime":1664829258386,"results":"132","hashOfConfig":"109"},{"size":6179,"mtime":1664829258869,"results":"133","hashOfConfig":"109"},{"size":5678,"mtime":1664829258875,"results":"134","hashOfConfig":"109"},{"size":1670,"mtime":1628787079714,"results":"135","hashOfConfig":"109"},{"size":165,"mtime":1628787080218,"results":"136","hashOfConfig":"109"},{"size":5337,"mtime":1664836867737,"results":"137","hashOfConfig":"109"},{"size":1428,"mtime":1664829258864,"results":"138","hashOfConfig":"109"},{"size":1016,"mtime":1664829259266,"results":"139","hashOfConfig":"109"},{"size":2383,"mtime":1664829258356,"results":"140","hashOfConfig":"109"},{"size":771,"mtime":1664829259869,"results":"141","hashOfConfig":"109"},{"size":3328,"mtime":1664829258434,"results":"142","hashOfConfig":"109"},{"size":267,"mtime":1664829258235,"results":"143","hashOfConfig":"109"},{"size":994,"mtime":1664829258560,"results":"144","hashOfConfig":"109"},{"size":4200,"mtime":1664829258848,"results":"145","hashOfConfig":"109"},{"size":1219,"mtime":1664829258354,"results":"146","hashOfConfig":"109"},{"size":4403,"mtime":1664829258422,"results":"147","hashOfConfig":"109"},{"size":841,"mtime":1664829258425,"results":"148","hashOfConfig":"109"},{"size":628,"mtime":1664829259201,"results":"149","hashOfConfig":"109"},{"size":1450,"mtime":1664843143904,"results":"150","hashOfConfig":"109"},{"size":178,"mtime":1664829259133,"results":"151","hashOfConfig":"109"},{"size":1724,"mtime":1664829258244,"results":"152","hashOfConfig":"109"},{"size":2838,"mtime":1664829259406,"results":"153","hashOfConfig":"109"},{"size":1352,"mtime":1664829259274,"results":"154","hashOfConfig":"109"},{"size":199,"mtime":1664829259367,"results":"155","hashOfConfig":"109"},{"size":4715,"mtime":1664829259361,"results":"156","hashOfConfig":"109"},{"size":3783,"mtime":1664829259316,"results":"157","hashOfConfig":"109"},{"size":5756,"mtime":1664829259759,"results":"158","hashOfConfig":"109"},{"size":5788,"mtime":1664829259696,"results":"159","hashOfConfig":"109"},{"size":685,"mtime":1664829259331,"results":"160","hashOfConfig":"109"},{"size":242,"mtime":1664829259351,"results":"161","hashOfConfig":"109"},{"size":4487,"mtime":1664829259769,"results":"162","hashOfConfig":"109"},{"size":1939,"mtime":1664829259373,"results":"163","hashOfConfig":"109"},{"size":2417,"mtime":1664829259652,"results":"164","hashOfConfig":"109"},{"size":1487,"mtime":1664829258361,"results":"165","hashOfConfig":"109"},{"size":1875,"mtime":1664829258364,"results":"166","hashOfConfig":"109"},{"size":488,"mtime":1664829259346,"results":"167","hashOfConfig":"109"},{"size":1739,"mtime":1664829259270,"results":"168","hashOfConfig":"109"},{"size":2365,"mtime":1628787170541,"results":"169","hashOfConfig":"109"},{"size":855,"mtime":1664829259342,"results":"170","hashOfConfig":"109"},{"size":5110,"mtime":1664829259337,"results":"171","hashOfConfig":"109"},{"size":8787,"mtime":1628787080315,"results":"172","hashOfConfig":"109"},{"size":1689,"mtime":1664829259129,"results":"173","hashOfConfig":"109"},{"size":15809,"mtime":1664829259321,"results":"174","hashOfConfig":"109"},{"size":2573,"mtime":1664829259326,"results":"175","hashOfConfig":"109"},{"size":887,"mtime":1628790255971,"results":"176","hashOfConfig":"109"},{"size":327,"mtime":1664829258851,"results":"177","hashOfConfig":"109"},{"size":2476,"mtime":1664829258394,"results":"178","hashOfConfig":"109"},{"size":4421,"mtime":1664829258366,"results":"179","hashOfConfig":"109"},{"size":3807,"mtime":1664829258397,"results":"180","hashOfConfig":"109"},{"size":7442,"mtime":1664829259383,"results":"181","hashOfConfig":"109"},{"size":10866,"mtime":1664829259379,"results":"182","hashOfConfig":"109"},{"size":15286,"mtime":1664829259657,"results":"183","hashOfConfig":"109"},{"size":19922,"mtime":1664829259670,"results":"184","hashOfConfig":"109"},{"size":8451,"mtime":1664829259679,"results":"185","hashOfConfig":"109"},{"size":6961,"mtime":1664843701676,"results":"186","hashOfConfig":"109"},{"size":23820,"mtime":1664843476354,"results":"187","hashOfConfig":"109"},{"size":3753,"mtime":1664829259663,"results":"188","hashOfConfig":"109"},{"size":708,"mtime":1628787079822,"results":"189","hashOfConfig":"109"},{"size":1461,"mtime":1628787080076,"results":"190","hashOfConfig":"109"},{"size":1693,"mtime":1664829258428,"results":"191","hashOfConfig":"109"},{"size":6526,"mtime":1664829259196,"results":"192","hashOfConfig":"109"},{"size":360,"mtime":1628787079820,"results":"193","hashOfConfig":"109"},{"size":12848,"mtime":1664829259190,"results":"194","hashOfConfig":"109"},{"size":12862,"mtime":1664829259179,"results":"195","hashOfConfig":"109"},{"size":1307,"mtime":1664829258430,"results":"196","hashOfConfig":"109"},{"size":1841,"mtime":1664829259400,"results":"197","hashOfConfig":"109"},{"size":4797,"mtime":1664829258418,"results":"198","hashOfConfig":"109"},{"size":4788,"mtime":1664829258413,"results":"199","hashOfConfig":"109"},{"size":2028,"mtime":1664829258880,"results":"200","hashOfConfig":"109"},{"size":1920,"mtime":1664829259688,"results":"201","hashOfConfig":"109"},{"size":3798,"mtime":1664829259170,"results":"202","hashOfConfig":"109"},{"size":428,"mtime":1628787080129,"results":"203","hashOfConfig":"109"},{"size":15816,"mtime":1664829258438,"results":"204","hashOfConfig":"109"},{"size":3483,"mtime":1664829259261,"results":"205","hashOfConfig":"109"},{"size":1803,"mtime":1664829258238,"results":"206","hashOfConfig":"109"},{"size":1363,"mtime":1664829258347,"results":"207","hashOfConfig":"109"},{"size":344,"mtime":1664829259184,"results":"208","hashOfConfig":"109"},{"size":3147,"mtime":1664829258411,"results":"209","hashOfConfig":"109"},{"size":843,"mtime":1628787080074,"results":"210","hashOfConfig":"109"},{"size":304,"mtime":1628787080184,"results":"211","hashOfConfig":"109"},{"size":1047,"mtime":1628787080168,"results":"212","hashOfConfig":"109"},{"size":1616,"mtime":1664829258416,"results":"213","hashOfConfig":"109"},{"size":15497,"mtime":1664829258440,"results":"214","hashOfConfig":"109"},{"size":821,"mtime":1664843249721,"results":"215","hashOfConfig":"109"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},"1w3zleo",{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"218"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"218"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"218"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"218"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"218"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"218"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"218"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"218"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"218"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"218"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"218"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"218"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"218"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"218"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"218"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"218"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"218"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"218"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"218"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"218"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"218"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"218"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"218"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"218"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"218"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"218"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"218"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"218"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"218"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"218"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"218"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"218"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"218"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"218"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"407","messages":"408","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"218"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"218"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"218"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"218"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"218"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"218"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"218"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"218"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"218"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"218"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"218"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"218"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"218"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"218"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\index.js",[],["479","480"],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\App.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\redux\\estimateStore.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\redux\\reducers\\estimateReducer.js",["481"],"\r\nconst intialState = {\r\n    \"newEstimate\":{\r\n        firstName:\"\",\r\n        lastName:\"\",\r\n        phone:\"\",\r\n        email:\"\",\r\n        city:\"\",\r\n        postalCode:\"\",\r\n        region:\"\",\r\n        billing:\"\",\r\n    }\r\n}\r\n\r\n\r\nexport default (state = intialState, action) => {\r\n    switch (action.type) {\r\n        case \"customerUpdate\":\r\n            return {\r\n                newEstimate: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\redux\\reducers\\quoteReducer.js",["482"],"\r\nconst intialState = {\r\n    \"quoteChosen\":{\r\n        firstName:\"\",\r\n        lastName:\"\",\r\n        phone:\"\",\r\n        email:\"\",\r\n        city:\"\",\r\n        postalCode:\"\",\r\n        region:\"\",\r\n        billing:\"\",\r\n    }\r\n}\r\n\r\n\r\nexport default (state = intialState, action) => {\r\n    switch (action.type) {\r\n        case \"quoteUpdate\":\r\n            return {\r\n                quoteChosen: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\redux\\reducers\\addressReducer.js",["483"],"\r\nconst intialState = {\r\n    \"currentAddress\":\r\n    {\r\n        addressID:\"\",\r\n    }\r\n}\r\n\r\n\r\nexport default (state = intialState, action) => {\r\n    switch (action.type) {\r\n        case \"addressUpdate\":\r\n            return {\r\n                currentAddress : action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\login\\index.js",["484"],"import React, { useState } from \"react\";\r\nimport { Button, Form, Input, message, Modal } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport \"./index.css\";\r\nimport { getLogin, reqWeather, getMenuData } from \"../../api/index\";\r\nimport { setUser, getUser, setMenu, getMenu } from \"../../util/storage\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ResetPassword from \"../../Components/Forms/newpasswordform\";\r\n\r\nconst { Item } = Form;\r\nexport default function Login(props) {\r\n  const [showForm, setShowForm] = useState(false);\r\n  const handleSubmit = async (values) => {\r\n    const { loginId, loginPwd } = values;\r\n    const result = await getLogin(loginId, loginPwd);\r\n    reqWeather(\"toronto\");\r\n    if (result.data && result.data.length > 0) {\r\n      let menuData = await getMenuData(result.data[0]);\r\n      setUser(result.data[0]);\r\n      setMenu(menuData.data[0]);\r\n      if(getUser() && getMenu()){\r\n        props.history.replace(\"/\");\r\n      message.success(\"Login Success!\");\r\n      }\r\n    } else {\r\n      message.info(\"Username or Password not correct!\");\r\n    }\r\n  };\r\n  if (getUser()) return <Redirect to=\"/\" />;\r\n  return (\r\n    <div className=\"login_page\">\r\n      <div className=\"login\">\r\n        <h2>Login</h2>\r\n        <Form onFinish={handleSubmit} autoComplete=\"off\">\r\n          <Item\r\n            name=\"loginId\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Cannot be Empty\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              style={{ backgroundColor: \"transparent\" }}\r\n              prefix={<UserOutlined />}\r\n              placeholder=\"username\"\r\n            />\r\n          </Item>\r\n          <Item\r\n            name=\"loginPwd\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Cannot be Empty\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input.Password prefix={<LockOutlined />} placeholder=\"password\" />\r\n          </Item>\r\n          <Item className=\"login_button\">\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              shape=\"round\"\r\n              size=\"large\"\r\n              block\r\n            >\r\n              Login\r\n            </Button>\r\n\r\n            <a style={{fontSize:12}} onClick={() =>{setShowForm(true)}}>Forgot your password?</a>\r\n          </Item>\r\n        </Form>\r\n        <Modal visible={showForm}\r\n        onCancel={()=>{setShowForm(false)}}\r\n        title=\"Reset Password\"\r\n        footer={null}>\r\n          {ResetPassword()}\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\admin\\index.js",["485","486"],"import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Layout, Modal, message } from \"antd\";\r\nimport Main from \"../main\";\r\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\r\nimport \"./index.css\";\r\nimport Leftnav from \"../leftnav\";\r\nimport Head from \"../head\";\r\nimport { getUser } from \"../../util/storage\";\r\nimport Searchbar from \"../searchbar\";\r\nimport { datas } from \"../../api/index\";\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nexport default class Homepage extends React.Component {\r\n  state = {\r\n    user: \"\",\r\n  };\r\n  componentDidMount = async () => {\r\n    const user = getUser();\r\n    this.setState({ user });\r\n  };\r\n  render() {\r\n    const SecurityLevel =\r\n      (this.state.user && this.state.user.SecurityLevel) || \"\";\r\n    const FirstName = (this.state.user && this.state.user.FirstName) || \"\";\r\n    if (!getUser()) return <Redirect to=\"/login\" />;\r\n    return (\r\n      <Layout className=\"layout\">\r\n        <Sider>\r\n          <Leftnav role={SecurityLevel} imgUrl={datas.user[0].imgUrl}></Leftnav>\r\n        </Sider>\r\n        <Layout className=\"main-layout\">\r\n          <Header className=\"header\">\r\n            <Head username={FirstName} />\r\n          </Header>\r\n\r\n          <Content className=\"content\">\r\n            <Searchbar role={SecurityLevel} />\r\n            <Main />\r\n          </Content>\r\n          <Footer style={{ textAlign: \"center\" }}>\r\n            ©2021 Created by Andrew Miller Dev\r\n          </Footer>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n}\r\n}\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\util\\storage.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\newpasswordform.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\leftnav\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\main\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\searchbar\\index.js",["487","488","489","490"],"import React, { useState} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport { Button, Space, Modal, Select } from \"antd\";\r\nimport \"./index.css\";\r\nimport { withRouter } from \"react-router\";\r\nimport { getMenu, getUser } from \"../../util/storage\";\r\nimport { customerLookup } from \"../../api/customer\";\r\nimport { SearchAllInfo } from \"../../api/quoteEditAPI\";\r\nimport { SearchAllInfoWO } from \"../../api/orders\";\r\nimport { format } from \"date-fns-tz\";\r\nimport { parseISO } from \"date-fns\";\r\nimport NewCustomerForm from \"../../Components/Forms/newcustomerform\";\r\nimport Refresh from \"../../Components/Refresh\";\r\nimport NewEstimateForm from \"../../Components/Forms/newestimateform\";\r\nimport ViewQuoteForm from \"../../Components/Forms/viewquoteform\";\r\nimport ViewWorkForm from \"../../Components/Forms/viewworkform\";\r\n\r\nfunction Searchbar(props) {\r\n const history = useHistory();\r\n  const [customerList, setCustomerList] = useState([]);\r\n  const [quoteList, setQuoteList] = useState({});\r\n  const [orderList, setOrderList] = useState({});\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [formOption, setFormOption] = useState(null);\r\n\r\nconst closeForm = () =>{\r\n  setShowForm(false);\r\n  window.location.reload();\r\n}\r\n\r\nconst renderCustomer = (data) => {\r\n    const newArr = []\r\n    if(data.length > 0) { \r\n    data.forEach(element => {\r\n        let obj = {\r\n          label:element.CustFirstName + \" \" + element.CustLastName + \"   \" + element.BillingAddress,\r\n          value:\"customer\" + \" \" + element.CustomerID\r\n        }\r\n    newArr.push(obj);\r\n  })}\r\n  return newArr\r\n};\r\n\r\nconst renderQuotes = (data) => {\r\n  const newArr = [];\r\n    if(data.length > 0) { \r\n    data.forEach(element => {\r\n    newArr.push(renderItemQ(element));\r\n  })}\r\n  return newArr\r\n  };\r\n\r\nconst renderOrders = (data) => {\r\n  const newArr = [];\r\n    if(data.length > 0) { \r\n    data.forEach(element => {\r\n    newArr.push(renderItemO(element));\r\n  })}\r\n  return newArr\r\n}\r\nconst renderItem = (data) => {\r\n\r\n}\r\nconst renderItemQ = (data) => {\r\n  return {\r\n    value:\"quote\"+ \" \"+data.QuoteID,\r\n    label:(\r\n      <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n      }}>\r\n\r\n        {data.CustFirstName} {data.CustLastName} \r\n        <span>{data.Address}</span>\r\n        <span>Created:{format(parseISO(data.creationDate),\"MMMM dd, yyyy\")}</span>\r\n        <span>Total: {data.QuoteTotal}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst renderItemO = (data) => {\r\n  return {\r\n    value:\"order\"+ \" \" +data.WorkOrderID,\r\n    label:(\r\n      <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n      }}>\r\n\r\n        {data.CustFirstName} {data.CustLastName} \r\n        <span>{data.Address}</span>\r\n        <span>Created:{format(parseISO(data.completeDate),\"MMMM dd, yyyy\")}</span>\r\n        <span>Total: {data.TotalAmount}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n  const onSearch = async (value) => {\r\n    if(value.length >= 3) {\r\n    let customerResults = await customerLookup(value);\r\n    let customerArr = customerResults.data;\r\n    setCustomerList(customerArr);\r\n    let quoteResults = await SearchAllInfo(value);\r\n    setQuoteList(quoteResults.data);\r\n    let orderResults = await SearchAllInfoWO(value);\r\n    setOrderList(orderResults.data); \r\n  }\r\n  else {\r\n    setCustomerList([]);\r\n    setQuoteList([]);\r\n    setOrderList([]);\r\n  }\r\n  };\r\n\r\n const checkAndLoad = (item) => {\r\n   let arr = item.value.split(\" \");\r\n   let category = arr[0];\r\n   let id = arr[1];\r\n\r\n   switch (category) {\r\n     case \"customer\":\r\n       history.push(`/customers/${id}`);\r\n       break;\r\n     case \"quote\":\r\n       setFormOption(<ViewQuoteForm id={id} />);\r\n       setShowForm(true);\r\n       break;\r\n     case \"order\":\r\n      setFormOption(<ViewWorkForm id={id} />);\r\n      setShowForm(true);\r\n       break;\r\n     default:\r\n       console.log(\"something went very wrong\");\r\n       break;\r\n   }\r\n }\r\n  \r\nconst buttons = () => {\r\n  if (props.role === \"salesman\"){\r\n    return (\r\n      <Space>\r\n         <Button\r\n         onClick={() => {\r\n          history.push('/newcustomer');\r\n         }}>\r\n        New Customer\r\n      </Button>\r\n      </Space>\r\n    )\r\n\r\n    \r\n  }\r\n  else return (\r\n<Space>\r\n         <Button\r\n         onClick={() => {\r\n          setFormOption(<NewCustomerForm close = {() => {setShowForm(false)}} />);\r\n          setShowForm(true);\r\n         // history.push('/newcustomer');\r\n         }}>\r\n        New Customer\r\n      </Button>\r\n      <Button\r\n      onClick={() => {\r\n        setFormOption(<NewEstimateForm close={closeForm} salesman={{id:null,name:null}} />);\r\n        setShowForm(true);\r\n        //history.push('/newestimate');\r\n      }}>\r\n        New Estimate\r\n      </Button>\r\n      <Refresh />\r\n      </Space>\r\n  )\r\n}\r\nif(getUser() && getMenu()) {\r\n  return (\r\n    <div className=\"content-searchbar\">\r\n      <Select\r\n      defaultValue={{label:\"\",value:\"\"}}\r\n      placeholder=\"Search\"\r\n      filterOption={false}\r\n      onSelect={(data) => {\r\n        checkAndLoad(data);\r\n      }}\r\n      showSearch={true}\r\n      dropdownMatchSelectWidth={500}\r\n      labelInValue={true}\r\n      style={{width:300}}\r\n      onSearch={onSearch}\r\n      options={[\r\n        {\r\n          label:\"Customers\",\r\n          options:renderCustomer(customerList)\r\n        },\r\n        {\r\n          label:\"Quotes\",\r\n          options:renderQuotes(quoteList)\r\n        },\r\n        {\r\n          label:\"Work Orders\",\r\n          options:renderOrders(orderList)\r\n        }\r\n       \r\n      ]}>\r\n      </Select>\r\n      {buttons()}\r\n\r\n      <Modal\r\n      footer={false}\r\n      destroyOnClose={true}\r\n      visible={showForm}\r\n      onCancel={()=>{setShowForm(false)}}\r\n      width=\"75%\">\r\n        {formOption}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nelse return (\r\n  <div>\r\n    Loading...\r\n  </div>\r\n)\r\n}\r\nexport default withRouter(Searchbar);\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\head\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\base.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\config\\values.js",["491"],"\r\n\r\nconst realURL = \"https://reitzel-server.herokuapp.com\";\r\nconst testURL = \"http://localhost:5001\";\r\n\r\nexport const baseURL = realURL;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\calendar.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\reset_password.js",["492"],"import { Email, Item } from \"react-html-email\";\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\n\r\n\r\nexport default function ResetPasswordEmail(props) {\r\n    return(\r\n        <Email title=\"Your password reset\">\r\n            <Item>\r\n                <img src={header}></img>\r\n            </Item>\r\n            <Item>\r\n                <p>You are receiving this email because you requested a password reset.</p>\r\n                    <br/>\r\n                    <p>Your new password is:  </p>\r\n                    <p>{props.newPassword}</p>\r\n                    <br/>\r\n                    <p>Please use this password to log in and you can change your password from your user profile</p>\r\n            </Item>\r\n        </Email>\r\n    )\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\viewquoteform.js",["493","494"],"import React, { useEffect, useState } from \"react\"\r\nimport { getProductList, getQuoteDetails, getQuoteID } from \"../../api/quoteEditAPI\"\r\nimport { Card } from \"antd\";\r\n\r\nexport default function ViewQuoteForm (props) {\r\n    const [quoteInfo, setQuoteInfo] = useState([]);\r\n    const [detailInfo, setDetailInfo] = useState([]);\r\n    const [prodInfo, setProdInfo] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const func = async() => {\r\n            let quote = await getQuoteID(props.id);\r\n        setQuoteInfo(quote.data[0]);\r\n        let details = await getQuoteDetails(props.id);\r\n        let product = await getProductList(props.id);\r\n        setProdInfo(product.data);\r\n        let detailArr = getDetailsByID(details.data);\r\n        setDetailInfo(detailArr);\r\n        }\r\n      func();  \r\n        \r\n    },[]);\r\n\r\n    const getDetailsByID = (arr) => {\r\n\r\n        let array = [];\r\n        arr.forEach((item) => {\r\n            array.push({\r\n              quoteID:item.quoteID,\r\n              id:item.subtotalID,\r\n              subtotalLines:item.subtotalLines,\r\n              total:item.subtotalAmount,\r\n              arr:getProductArr(item.SubtotalID)\r\n            });\r\n        });\r\n        return array;\r\n    }\r\n\r\n    const getProductArr = (id) => {\r\n        let array = [];\r\n        prodInfo.forEach((item) => {\r\n               if(item.subtotalID === id){\r\n                    array.push({\r\n                      prodID:item.QuoteLineID,\r\n                      product:item.Product,\r\n                      price:item.Subtotal\r\n                    })\r\n                }\r\n            });\r\n            return array;\r\n      }\r\n\r\n    const renderDetails = () => {\r\n        let rows = [];\r\n        detailInfo.forEach((item) => {\r\n          rows.push(<Card title=\"Details\" bordered={true} type=\"inner\">\r\n            <p>{item.subtotalLines}</p>\r\n            <strong>Products</strong>\r\n            <table style={{width:'100%'}}>\r\n              <tbody>\r\n                {renderProducts(item.arr)}\r\n              </tbody>\r\n            </table>\r\n            \r\n            <p><strong>Total: </strong>{item.total}</p>\r\n          </Card>)\r\n  \r\n        });\r\n        return rows;\r\n      }\r\n      const renderProducts = (array) => {\r\n        let rows = [];\r\n        array.forEach((item) => {\r\n          rows.push(\r\n            <tr width=\"100px\">\r\n              <td>{item.product}</td>\r\n              <td>{item.price}</td>\r\n            </tr>\r\n        )})\r\n        return rows;\r\n        }\r\n    return (\r\n        <div>\r\n            {renderDetails()}\r\n        </div>\r\n    )\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\newestimateform.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\viewworkform.js",["495","496"],"import React, { useEffect, useState } from \"react\"\r\nimport { Card } from \"antd\";\r\nimport { GetDetailsByWID, GetOrderByID, GetProdsByWID } from \"../../api/orders\";\r\n\r\nexport default function ViewWorkForm (props) {\r\n    const [workInfo, setWorkInfo] = useState([]);\r\n    const [detailInfo, setDetailInfo] = useState([]);\r\n    const [prodInfo, setProdInfo] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const func = async() => {\r\n            let work = await GetOrderByID(props.id);\r\n            setWorkInfo(work.data[0]);\r\n            let details = await GetDetailsByWID(props.id);\r\n            let product = await GetProdsByWID(props.id);\r\n            setProdInfo(product.data);\r\n            let detailArr = getDetailsByID(details.data);\r\n            setDetailInfo(detailArr);\r\n        }\r\n      func();  \r\n        \r\n    },[]);\r\n\r\n    const getDetailsByID = (arr) => {\r\n\r\n        let array = [];\r\n        arr.forEach((item) => {\r\n            array.push({\r\n              workID:item.OrderID,\r\n              id:item.WODetailID,\r\n              quoteDetailID:item.SubtotalID,\r\n              details:item.Details,\r\n              total:item.DetailTotal,\r\n              arr:getProductArr(item.WODetailID)\r\n            });\r\n        });\r\n        return array;\r\n    }\r\n\r\n    const getProductArr = (id) => {\r\n        let array = [];\r\n        prodInfo.forEach((item) => {\r\n               if(item.WODetailID === id){\r\n                    array.push({\r\n                      prodID:item.WOProdID,\r\n                      product:item.Product,\r\n                      price:item.Price\r\n                    })\r\n                }\r\n            });\r\n            return array;\r\n      }\r\n\r\n    const renderDetails = () => {\r\n        let rows = [];\r\n        detailInfo.forEach((item) => {\r\n          rows.push(<Card title=\"Details\" bordered={true} type=\"inner\">\r\n            <p>{item.details}</p>\r\n            <strong>Products</strong>\r\n            <table style={{width:'100%'}}>\r\n              <tbody>\r\n                {renderProducts(item.arr)}\r\n              </tbody>\r\n            </table>\r\n            \r\n            <p><strong>Total: </strong>{item.total}</p>\r\n          </Card>)\r\n  \r\n        });\r\n        return rows;\r\n      }\r\n      const renderProducts = (array) => {\r\n        let rows = [];\r\n        array.forEach((item) => {\r\n          rows.push(\r\n            <tr width=\"100px\">\r\n              <td>{item.product}</td>\r\n              <td>{item.price}</td>\r\n            </tr>\r\n        )})\r\n        return rows;\r\n        }\r\n    return (\r\n        <div>\r\n            {renderDetails()}\r\n        </div>\r\n    )\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Refresh.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\newcustomerform.js",["497","498"],"import { Card, Col, Form, Input, Row, Button, Select, Checkbox, Switch, message } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { regions } from \"../../util/storedArrays\";\r\nimport { CheckForExisting, checkForMultipleBilling } from \"../../config/checks\";\r\nimport { addCustomer, addAddress } from \"../../api/neworder\";\r\nconst {Option} = Select;\r\nconst { Item } = Form;\r\n\r\nexport default function NewCustomerForm(props) {\r\n  const [form] = Form.useForm();\r\n\r\n    const sendInfo = async(values) => {\r\n      let billing = \"\";\r\n        form.validateFields();\r\n        if(values.addresses !== undefined){\r\n           values.addresses.forEach((item) => {\r\n          if(item.billing) billing = item;\r\n        })\r\n        }\r\n       let newInfo = {\r\n        CustFirstName : values.firstName,\r\n        CustLastName:values.lastName,\r\n        Phone:values.phone,\r\n        Email:values.email,\r\n        CustCity:billing.city,\r\n        CustPostalCode:billing.postal,\r\n        CustRegion:billing.region,\r\n        BillingAddress:billing.address\r\n       }\r\n        const check = await CheckForExisting(newInfo);\r\n        console.log(check);\r\n        if(check.length > 0){\r\n          message.warn(\"Customer already on file\");\r\n        }\r\n        else{\r\n        let customerInfo = await addCustomer(newInfo);\r\n        var latestCustomer = customerInfo.data.insertId;\r\n        if(values.addresses !== undefined){\r\n          values.addresses.forEach(async(item) => {\r\n            let addressInfo = {\r\n              City:item.city,\r\n              PostalCode:item.postal,\r\n              Region:item.region,\r\n              BillingAddress:item.address\r\n            }\r\n            var newAddress = await addAddress(latestCustomer, addressInfo);\r\n          })\r\n        }\r\n        const customer = {\r\n        CustomerID: latestCustomer,\r\n        CustFirstName : values.firstName,\r\n        CustLastName:values.lastName,\r\n        Phone:values.phone,\r\n        Email:values.email,\r\n        CustCity:billing.city,\r\n        CustPostalCode:billing.postal,\r\n        CustRegion:billing.region,\r\n        BillingAddress:billing.address\r\n        }\r\n        if(props.setDisplay){\r\n          props.setDisplay(customer);\r\n        }\r\n        message.success(\"Customer added\");\r\n        props.close();\r\n        }\r\n    }\r\n\r\n    const options = regions.map((item, index) => (\r\n      <Option key={index + 1}>{item}</Option>\r\n    ));\r\n\r\n    const checkBilling = () => {\r\n      let array = form.getFieldValue('addresses');\r\n      if(checkForMultipleBilling(array)){\r\n        return Promise.reject(new Error('Only one billing address'))\r\n      }\r\n      else return Promise.resolve();\r\n    }\r\n\r\n    return (\r\n        <Form form={form} layout=\"vertical\" onFinish={sendInfo} preserve={false}>\r\n            <Card title=\"Add new customer\">\r\n              <Row>\r\n                <Col>\r\n                <Card title=\"Contact Info\">\r\n                    <Row>\r\n                    <Col>\r\n                    <Item\r\n                    name=\"firstName\"\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                       message: \"Required\",\r\n                   },\r\n                    ]}>\r\n                    <Input placeholder=\"First Name\" />\r\n                </Item>\r\n                 </Col>\r\n                 <Col>\r\n                <Item\r\n                name=\"lastName\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                   message: \"Required\",\r\n               },\r\n                ]}>\r\n                    <Input placeholder=\"Last Name\" />\r\n                </Item>\r\n                     </Col>\r\n                 </Row>\r\n                 <Row>\r\n                     <Col>\r\n                     <Item\r\n                     name=\"email\"\r\n                     rules={[\r\n                          {\r\n                              type:\"email\",\r\n                              message:\"Not a valid email\"\r\n                          },\r\n                          {\r\n                               required: true,\r\n                              message: \"Required\",\r\n                          },\r\n                          \r\n                         \r\n                      ]}>\r\n                         <Input placeholder=\"Email\"\r\n                          />\r\n                     </Item>\r\n                     </Col>\r\n                     <Col>\r\n                     <Item\r\n                     name=\"phone\"\r\n                     rules={[\r\n                      {\r\n                        required: true,\r\n                       message: \"Required\",\r\n                   },\r\n                    ]}>\r\n                         <Input placeholder=\"Phone Number\" />\r\n                     </Item>\r\n                     </Col>\r\n                 </Row>\r\n            </Card>\r\n                </Col>\r\n                <Col>\r\n                <Card title=\"Addresses\">\r\n              <Form.Item >              \r\n            <Form.List name=\"addresses\" >\r\n        {(fields, { add, remove }) => (\r\n          <>\r\n            {fields.map(({ key, name, ...restField }) => (\r\n              <div>\r\n\r\n              \r\n              <Row>\r\n                <Col span={14}> <Form.Item\r\n                  {...restField}\r\n                  name={[name, 'address']}\r\n                >\r\n                  <Input placeholder=\"Address\"/>\r\n                </Form.Item>\r\n                </Col>\r\n               <Col>\r\n               <Form.Item\r\n                 {...restField}\r\n                 name={[name, 'billing']}\r\n                 valuePropName=\"checked\"\r\n                 rules={[{validator:checkBilling}]}\r\n                 >\r\n                   <Checkbox defaultValue={false}>Billing Address</Checkbox>\r\n                 </Form.Item>\r\n                </Col>\r\n              </Row>\r\n             <Row>\r\n                <Form.Item\r\n                  {...restField}\r\n                  name={[name, 'city']}\r\n                >\r\n                  <Input placeholder=\"City\"/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                  {...restField}\r\n                  name={[name, 'postal']}\r\n                >\r\n                  <Input placeholder=\"Postal Code\"/>\r\n                </Form.Item>\r\n             </Row>\r\n             <Row gutter={16}>\r\n               <Col span={18}>\r\n               <Form.Item\r\n               {...restField}\r\n               name={[name, 'region']}>\r\n                 <Select placeholder=\"Select a region\">{options}</Select>\r\n               </Form.Item>\r\n               </Col>\r\n               \r\n               <MinusCircleOutlined onClick={() => remove(name)} />\r\n             </Row>\r\n             \r\n              </div>\r\n            ))}\r\n            <Form.Item>\r\n              <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                Add another address\r\n              </Button>\r\n            </Form.Item>\r\n          </>\r\n        )}\r\n      </Form.List>\r\n      </Form.Item>\r\n            </Card>\r\n                </Col>\r\n              </Row>\r\n                \r\n            \r\n            </Card>\r\n        <Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">Add Customer</Button>\r\n        </Item>\r\n        </Form> \r\n    )\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\orders.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\quoteEditAPI.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\avatar\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\linkbutton\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\EstimateForm.js",["499","500","501"],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\neworder.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\config\\checks.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Form_Buttons\\newCustomerButton.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\util\\storedArrays.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\SalesDatasource.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\DatePicker.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\addresses.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\customer.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Form_Buttons\\findCustomerButton.js",["502","503"],"import { Card, Select } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getCustomers } from \"../../api/calendar\";\r\n\r\nexport default function FindCustomer(props){\r\n    const [customerList, setCustomerList] = useState([]);\r\n\r\n    const options3 = customerList.map((item) => (\r\n        {\r\n          label:`${item.CustFirstName} ${item.CustLastName}`,\r\n          value:`${item.CustomerID}`\r\n        }\r\n    ));\r\n    \r\n    const getCustomerList = async() => {\r\n        const data = await getCustomers();\r\n        setCustomerList(data.data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCustomerList();\r\n      }, []);\r\n  \r\n\r\n    return (\r\n        <div>\r\n            <Select\r\n            showSearch={true}\r\n          style={{width:'150px'}}\r\n          options={options3}\r\n          placeholder=\"Look up customer by name\"\r\n          filterOption={(inputValue, option) =>\r\n            option.label.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n          }\r\n          onSelect={async(value) => {\r\n            let customer = customerList.find((arr) => {\r\n                return arr.CustomerID == value;\r\n            });\r\n            props.setDisplay(customer);\r\n        }}\r\n/>\r\n<br/>\r\n    </div>\r\n)\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesSnapshot.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesToolSnap.js",["504"],"import React, { useEffect, useState } from 'react';\r\nimport { getAddress } from '../../../api/addresses';\r\n\r\n\r\nconst {format} = require('date-fns-tz');\r\n\r\n\r\nexport default function SalesToolSnap (model) {\r\n  const data = model.data.appointmentData;\r\n  const [address, setAddress] = useState([]);\r\n  useEffect(() => {\r\n    const func = async() => {\r\n      let result = await getAddress(data.AddressID)\r\n      setAddress(result.data[0]);\r\n    }\r\n    func();\r\n  },[address.length]);\r\n\r\n  return (\r\n    <div>\r\n        <b style={{fontSize:15}}>\r\n         {data.text}\r\n        </b> \r\n      <p>\r\n       {address.Address}, {address.City}\r\n       <br/>\r\n       {address.PostalCode}\r\n      </p>\r\n      <p style={{color:'grey'}}>{`${format(new Date(data.startDate),\"h':'mm aa\")} - ${format(new Date(data.endDate),\"h':'mm aa\")}`}</p>\r\n    </div>\r\n  )\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesTemplate.js",["505"],"import React,{useState, useEffect} from 'react';\r\nimport { getAddress } from '../../../api/addresses';\r\n\r\nexport default function SalesTemplate(model) {\r\n  const data = model.data.appointmentData;\r\n  const [address, setAddress] = useState([]);\r\n  useEffect(() => {\r\n    const func = async() => {\r\n      let result = await getAddress(data.AddressID)\r\n      setAddress(result.data[0]);\r\n    }\r\n    func();\r\n  },[address.length]);\r\n  return (\r\n    <div\r\n    style={{\r\n      fontSize:11,\r\n      wordWrap:\"break-word\",\r\n      whiteSpace:\"normal\"\r\n    }}>\r\n        <div>\r\n        {address.Address}\r\n        </div>\r\n    </div>\r\n  );\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\updateConfirm.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\assets\\paths.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\confirmation.js",["506","507"],"import React from 'react';\r\nimport { Email, Item} from 'react-html-email';\r\nimport { getUser } from '../../util/storage';\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst user = getUser();\r\n\r\nconst { format, utcToZonedTime} = require(\"date-fns-tz\");\r\n\r\nfunction Confirmation(props){\r\n    return(\r\n        <Email title=\"Thank you for choosing Reitzel!\">\r\n            <Item>\r\n                <img src={header}></img>\r\n            </Item>\r\n            <Item>\r\n                <p>Hi {props.customerInfo.FirstName} {props.customerInfo.LastName},</p>\r\n            <br/>\r\n            <p>Thank you for choosing Reitzel Insulation! Here are the details for your booking:</p>\r\n            <p>Job Type: {props.estimateInfo.JobType}</p>\r\n            <p>Date: {format(new Date(props.estimateInfo.startDate),\"MMMM do',' yyyy\")}</p>\r\n            <p> Approximate Arrival Time:  {format(new Date(props.estimateInfo.startDate),\"K:mm b\")}</p>\r\n            <br />\r\n            </Item>\r\n            <Item>\r\n            Please read the attached PDF for preparing your home.\r\n            </Item>\r\n            <Item>\r\n                <p>\r\n                    This is an automated email. If you have any questions after reading this document, please reply to your representative at {user.Email} or call the office at 519-886-6100 or\r\n                    toll free at 1-800-265-8869.\r\n            Thank you for your business!\r\n                </p>\r\n               <Item>\r\n                  <p>\r\n                  Regards,\r\n                    \r\n            The Reitzel Team  \r\n               </p> \r\n               </Item>\r\n               \r\n            \r\n            </Item>\r\n\r\n\r\n        </Email>\r\n    )\r\n}\r\n\r\nexport default Confirmation;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\profile\\profile.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\config\\menucreate.js",["508","509"],"import { getMenu } from '../util/storage';\r\nimport {home, quotes, orders, invoices, customers, settings, users, trucks, roles, profile} from './leftnavitems';\r\n\r\nexport function menuCreate() {\r\n    settings.children = [];\r\n    let menu = [settings];\r\n    let roleMenu = getMenu();\r\n    let menuArr = roleMenu.RoleMenu.split(', ');\r\n    let menuArrRev = menuArr.reverse();\r\n    menuArrRev.map((item) => {\r\n        switch (item) {\r\n            case '/home':\r\n                menu.unshift(home);\r\n                break;\r\n            case '/quotes':\r\n                menu.unshift(quotes);\r\n                break;\r\n            case '/orders':\r\n                menu.unshift(orders);\r\n                break;\r\n            /*\r\n            case '/invoices':\r\n                menu.unshift(invoices);\r\n                break;\r\n            */\r\n            case '/customers':\r\n                menu.unshift(customers);\r\n                break;\r\n            case '/users':\r\n                settings.children.push(users);\r\n                break;\r\n            case '/trucks':\r\n                settings.children.push(trucks);\r\n                break;\r\n            case '/roles':\r\n                settings.children.push(roles);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    })\r\n    settings.children.push(profile);\r\n    return menu;\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\newestimate\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\newcustomer\\index.js",["510"],"import React, {useState} from \"react\";\r\nimport { Form, Input, Button, Select, message } from \"antd\";\r\nimport { addCustomer, addAddress } from \"../../api/neworder\";\r\nimport \"./index.css\";\r\nimport validator from \"validator\";\r\nimport { regions } from \"../../util/storedArrays\";\r\nimport { CheckForExisting } from \"../../config/checks\";\r\nconst layout = {\r\n  labelCol: { span: 2 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst { Item } = Form;\r\nconst { Option } = Select;\r\nexport default function NewCustomer(props) {\r\n  const [form] = Form.useForm();\r\n  const [validEmail, setValidEmail] = useState('');\r\n  const [errorColor, setErrorColor] = useState('red');\r\n  const options = regions.map((item, index) => (\r\n    <Option key={index + 1}>{item}</Option>\r\n  ));\r\n  const onFinish = async (values) => {\r\n    let newVal = {\r\n      BillingAddress : values.BillingAddress,\r\n      City: values.City,\r\n      Email: values.Email,\r\n      FirstName:values.FirstName,\r\n      LastName:values.LastName,\r\n      Phone:values.Phone,\r\n      PostalCode:values.PostalCode,\r\n      Region:values.Region\r\n    }\r\n    const check = await CheckForExisting(newVal);\r\n    if(check.length > 0) {\r\n      message.warn(\"Customer already on file\");\r\n    }\r\n    else{  \r\n    let customerInfo = await addCustomer(newVal);\r\n    var latestCustomer = customerInfo.data.insertId;\r\n    var newAddress = await addAddress(latestCustomer, newVal);\r\n    if (newAddress.status == 200) {\r\n      message.success(\"Added successfully\");\r\n      props.history.push(\"/customers\");\r\n    } else message.warn(\"Something went wrong\");\r\n  }\r\n  };\r\n  const emailCheck = (value) => {\r\n    let word = value.target.value;\r\n    if(validator.isEmail(word)){\r\n      setValidEmail('Valid email');\r\n      setErrorColor('green');\r\n    }\r\n    else {\r\n      setValidEmail('Not a valid email');\r\n      setErrorColor('red');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"neworder\">\r\n      <Form form={form} onFinish={onFinish} {...layout}>\r\n        <Item\r\n        label=\"First Name\"\r\n          name=\"FirstName\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"First Name\" />\r\n        </Item>\r\n        <Item\r\n        label=\"Last Name\"\r\n          name=\"LastName\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Last Name\" />\r\n        </Item>\r\n        <Item\r\n        label=\"Address\"\r\n          name=\"BillingAddress\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Billing Address\" />\r\n        </Item>\r\n        <Item\r\n          label=\"City\"\r\n          name=\"City\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"City\" />\r\n        </Item>\r\n        <Item\r\n          label=\"Postal Code\"\r\n          name=\"PostalCode\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Postal Code\" />\r\n        </Item>\r\n        <Item\r\n          label=\"Phone\"\r\n          name=\"Phone\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Phone Number\" />\r\n        </Item>\r\n        <Item\r\n          label=\"Email\"\r\n          name=\"Email\"\r\n          rules={[{\r\n            required: true,\r\n            message:\"Required Field\"\r\n          }]}\r\n        >\r\n          <Input onChange={emailCheck} placeholder=\"Email\" />\r\n        </Item>\r\n        <Item\r\n            label=\"Email Check\">\r\n              <span \r\n              style={{\r\n                fontSize:12,\r\n                color:errorColor\r\n              }}>\r\n          {validEmail}\r\n          </span>\r\n            </Item>\r\n        <Item\r\n          label=\"Region\"\r\n          name=\"Region\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select>{options}</Select>\r\n        </Item>\r\n        <Item className=\"login_button\">\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            block\r\n          >\r\n            Add\r\n          </Button>\r\n        </Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\addressInfo\\index.js",["511","512","513","514"],"import React, {useEffect, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Form } from \"antd\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport {getAllInfo} from \"../../api/quoteEditAPI\";\r\nconst { Item } = Form;\r\nconst {format } = require('date-fns-tz')\r\n\r\nexport default function AddressInfo() {\r\n \r\n  let match = useRouteMatch('/addressinfo/:address').params.address;\r\n  const [addressInfo, setaddressinfo] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [formView] = Form.useForm();\r\n  const [formData, setFormData] = useState([]);\r\n  const [testData, setTestData] = useState([]);\r\n\r\n    useEffect(async() => {\r\n        const func = async () => {\r\n          let result2 = await getAllInfo(match);\r\n          console.log(result2);\r\n          setTestData(result2.data);\r\n    };\r\n        func();\r\n        \r\n        if(testData !== []){\r\n          setTableData(createTable());\r\n          setLoaded(true);\r\n        }\r\n        \r\n      }, [tableData.length]);\r\n\r\n    const checkDate = (date) => {\r\n      console.log('date', date);\r\n      let returnDate = \"\";\r\n      if(date === \"December 31st, 1969\"){\r\n      }\r\n      else{\r\n        returnDate = date;\r\n    }\r\n    return returnDate;\r\n    }\r\n    const createTable = () => {\r\n      let tableList = testData.map((item) => (\r\n        {\r\n          id: item.QuoteID,\r\n          salesman: item.FirstName + \" \" + item.LastName,\r\n          creationDate: format(new Date(item.creationDate),\"MMMM do',' yyyy\"),\r\n          modifyDate: checkDate(format(new Date(item.modifyDate), \"MMMM do',' yyyy\")),\r\n          total: item.QuoteTotal\r\n      }));\r\n      return tableList;\r\n    };\r\n\r\n    const columns =[\r\n      \r\n      {\r\n        title:\"Salesman\",\r\n        dataIndex:\"FirstName\",\r\n        key:\"user\"\r\n      },\r\n      {\r\n        title:\"Quote Total\",\r\n        dataIndex:\"QuoteTotal\",\r\n        key:\"total\"\r\n      },\r\n      {\r\n        title:\"Show/Edit Quote Info\",\r\n        key:\"OpenQuote\",\r\n        render: (data) => \r\n          (\r\n            <div>\r\n              <Button\r\n         \r\n          href={`/quoteinfo/${data.id}`}>\r\n          Edit Quote  \r\n          </Button>\r\n            <Button\r\n            onClick={() => {setShowForm(true);\r\n                            setFormData(data);\r\n                            }}>\r\n            View Quote</Button>\r\n            </div>)\r\n      },\r\n      {\r\n        title:\"Creation Date\",\r\n        dataIndex:\"creationDate\",\r\n        key:\"date\"\r\n      },\r\n      {\r\n        title:\"Last Modified\",\r\n        dataIndex:\"modifyDate\",\r\n        key:\"modDate\"\r\n      }   \r\n\r\n    ]\r\n    if(loaded){\r\n\r\n      return(\r\n        <div>\r\n          <Card title=\"Customer Information\"></Card>\r\n        <Card title=\"Address Information\">\r\n           {addressInfo.address}\r\n           <br />\r\n           {addressInfo.city}\r\n           <br />\r\n          {addressInfo.postal}\r\n        </Card>\r\n\r\n        <h2>Active Quotes</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={testData}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n\r\n\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Quote\"\r\n        onOk={() => {console.log(\"submit\")}}\r\n        onCancel={() => {setShowForm(false)}}>\r\n          <Form \r\n          form={formView}\r\n          labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}>\r\n            <Item name=\"test\">\r\n\r\n            </Item>\r\n          </Form>\r\n        </Modal>\r\n          </div>\r\n      )\r\n    }\r\n\r\n    else{\r\n      return(\r\n        <div>\r\n          Loading...\r\n        </div>\r\n        \r\n      );\r\n      \r\n    }\r\n    }","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\trucks\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\roles\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\customers\\index.js",["515"],"import React from \"react\";\r\nimport \"./index.css\";\r\nimport { withRouter, useRouteMatch, Switch, Route } from \"react-router-dom\";\r\nimport CustomerList from \"./custList\";\r\nimport { CustomerInfo } from \"./custInfo\";\r\n\r\nfunction Customers(props) {\r\n  let { path, url } = useRouteMatch();\r\n\r\n  return (\r\n    <div style={{padding: \"10px\", margin: \"10px\"}}>\r\n      <div>\r\n        <h2>Customers</h2>\r\n      </div>\r\n      <hr/>\r\n      <Switch>\r\n        <Route exact path={path}>\r\n          <CustomerList />\r\n        </Route>\r\n        <Route path=\"/customers/:qid\">\r\n          <CustomerInfo />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n    \r\n  );\r\n}\r\nexport default withRouter(Customers);\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\invoices\\index.js",["516","517","518"],"import { Input } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useEncrypt } from \"../../api/encryption\";\r\nconst {Search} = Input;\r\n\r\n\r\nexport default function Invoices() {\r\n  return (\r\n  <div>Invoices\r\n  </div>\r\n\r\n  )\r\n}\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\users\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\index.js",["519","520","521"],"import { Route, Switch,  Link, useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport React, {useState} from \"react\";\r\nimport OrderList from \"../orders/orderList\";\r\nimport NewOrder from \"./newOrder\";\r\nimport OrderPreview from './orderPreview';\r\nimport { Button, Space, Modal } from \"antd\";\r\nimport \"./index.css\";\r\nimport NewWorkOrderForm from \"../../Components/Forms/newworkorderform\";\r\n\r\nexport default function Orders() {\r\n  let { path, url } = useRouteMatch();\r\n  let history = useHistory();\r\n\r\n const [orderData, setOrderData] = useState({});\r\n const [formOption, setFormOption] = useState({});\r\n const [showForm, setShowForm] = useState(false);\r\n\r\nfunction newOrder() {\r\n  setFormOption(<NewWorkOrderForm />);\r\n  setShowForm(true);\r\n}\r\n\r\nfunction closeForm(){\r\n  setShowForm(false);\r\n}\r\n\r\n function updateOrderData(values) {\r\n  if (!(values == null || values  == \"\" || values == undefined)) {\r\n    setOrderData(values);\r\n    history.push(`/home`);\r\n}else{\r\n    setOrderData({});\r\n}\r\n } \r\n  return (\r\n    <div style={{padding: \"10px\", margin: \"10px\"}}>\r\n      <div>\r\n        <h2> Orders<Space style={{marginLeft:\"25px\"}}><Link to=\"/orders/orderList\" ><Button>View All Work Orders</Button></Link><Link ><Button onClick={newOrder}>New Work Order</Button></Link></Space></h2>\r\n      </div> \r\n      <hr/>\r\n      <Switch>\r\n        <Route exact path={path} >\r\n        <OrderList/>\r\n          </Route>\r\n        <Route path=\"/orders/:oid/new\" >\r\n          <NewOrder updateOrder = {updateOrderData} />\r\n        </Route>\r\n        <Route path=\"/orders/:oid/edit\" >\r\n\r\n        </Route>\r\n        <Route path=\"/orders/orderList\">\r\n          <OrderList/>\r\n        </Route>\r\n        <Route path='/orders/preview'>\r\n          <OrderPreview orderInfo = {orderData} />\r\n        </Route>\r\n      </Switch>\r\n      <Modal \r\n        visible={showForm}\r\n        onCancel={closeForm}\r\n      >\r\n        {formOption}\r\n      </Modal>\r\n      </div>\r\n  );\r\n}\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\changeemailform.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\changepassword.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\home\\index.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\config\\leftnavitems.js",["522"],"import {\r\n    DollarCircleOutlined,\r\n    TeamOutlined,\r\n    SnippetsOutlined,\r\n    SettingOutlined,\r\n    ShoppingCartOutlined,\r\n    HomeOutlined,\r\n    UserOutlined,\r\n    KeyOutlined,\r\n    ToolOutlined,\r\n    SkinOutlined\r\n  } from \"@ant-design/icons\";\r\n  import React from \"react\";\r\n\r\nexport const home = {\r\n    key: \"/home\",\r\n    icon: <HomeOutlined />,\r\n    path: \"/home\",\r\n    content: \"Home\",\r\n    isPublic: true,\r\n  };\r\n\r\nexport const quotes = \r\n{\r\n    key: \"/quotes\",\r\n    icon: <DollarCircleOutlined />,\r\n    path: \"/quotes\",\r\n    content: \"Quotes\",\r\n  }\r\n\r\nexport const orders = \r\n  {\r\n    key: \"/orders\",\r\n    icon: <SnippetsOutlined />,\r\n    path: \"/orders\",\r\n    content: \"Orders\",\r\n  }\r\n/*\r\nexport const invoices =\r\n  {\r\n    key: \"/invoices\",\r\n    icon: <ShoppingCartOutlined />,\r\n    path: \"/invoices\",\r\n    content: \"Invoices\",\r\n  }\r\n*/\r\nexport const customers =\r\n  {\r\n    key: \"/customers\",\r\n    icon: <TeamOutlined />,\r\n    path: \"/customers\",\r\n    content: \"Customers\",\r\n  }\r\n\r\nexport const settings =  \r\n    {\r\n    key: \"/settings\",\r\n    icon: <SettingOutlined />,\r\n    content: \"Settings\",\r\n    children: []\r\n    }\r\n\r\nexport const users =\r\n      {\r\n        key: \"/users\",\r\n        icon: <UserOutlined />,\r\n        path: \"/users\",\r\n        content: \"Users\",\r\n      }\r\n\r\nexport const roles =\r\n      {\r\n        key: \"/roles\",\r\n        icon: <KeyOutlined />,\r\n        path: \"/roles\",\r\n        content: \"Roles\",\r\n      }\r\n\r\nexport const trucks = \r\n      {\r\n        key: \"/trucks\",\r\n        icon: <ToolOutlined />,\r\n        path: \"/trucks\",\r\n        content: \"Trucks\"\r\n      }\r\nexport const profile = \r\n      {\r\n        key: \"/profile\",\r\n        icon: <SkinOutlined />,\r\n        path: \"/profile\",\r\n        content: \"Profile\"\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\config\\leftnav.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\home\\Template.js",["523"],"import React from 'react';\r\nimport Tabs from \"../../Components/HomeTemplate/Tabs\"; \r\nimport SalesCalendar from '../../Components/HomeTemplate/SalesCalendar/SalesCalendar';\r\nimport FoamCalendar from '../../Components/HomeTemplate/FoamCalendar/FoamCalendar';\r\nimport FillCalendar from '../../Components/HomeTemplate/FillCalendar/FillCalendar';\r\nimport './Template.css';\r\n\r\nclass Template extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n      \r\n    render() {\r\n        \r\n        return(\r\n      <div>\r\n       <Tabs> \r\n         <div label=\"Sales\"> \r\n           <SalesCalendar />\r\n         </div> \r\n         <div label=\"Foam\"> \r\n           <FoamCalendar />\r\n         </div> \r\n         <div label=\"Fill\"> \r\n         <FillCalendar />\r\n         </div> \r\n       </Tabs> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n  export default Template;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\home\\SalesmanTemplate.js",["524"],"import React from \"react\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport Scheduler, {Resource} from 'devextreme-react/scheduler';\r\nimport {getUsers,  getRegionAPI, getEstimateByIDToday, getEstimateByIDTomorrow} from '../../api/calendar';\r\nimport CustomStore from 'devextreme/data/custom_store';\r\nimport { getUser } from \"../../util/storage\";\r\nimport Legend from \"../../Components/Legend\";\r\nimport SalesToolSnap from \"../../Components/HomeTemplate/SalesCalendar/salesToolSnap\";\r\n\r\nconst { zonedTimeToUtc, format } = require('date-fns-tz');\r\n\r\nconst currentDate = new Date();\r\nlet date = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();\r\nlet hourCheck = currentDate.getHours();\r\n\r\nconst dataSource = new CustomStore({\r\n  key: \"EstimateID\",\r\n  load: async () => {\r\n    let user = getUser();\r\n    if(hourCheck < 18){\r\n    const data = await getEstimateByIDToday(user.UserID);\r\n    let formatData = data.data.map((item) => ({\r\n      EstimateID : item.EstimateID,\r\n      CustomerID : item.CustomerID,\r\n      AddressID : item.AddressID,\r\n      UserID : item.UserID,\r\n      CreationDate : item.CreationDate,\r\n      text : item.EstimateInfo,\r\n      RegionID : item.RegionID,\r\n      startDate : timeFormat(item.startDate),\r\n      endDate : timeFormat(item.endDate)\r\n    }));\r\n    return formatData\r\n    }\r\n    else {\r\n      const data = await getEstimateByIDTomorrow(user.UserID);\r\n    let formatData = data.data.map((item) => ({\r\n      EstimateID : item.EstimateID,\r\n      CustomerID : item.CustomerID,\r\n      AddressID : item.AddressID,\r\n      UserID : item.UserID,\r\n      CreationDate : item.CreationDate,\r\n      text : item.EstimateInfo,\r\n      RegionID : item.RegionID,\r\n      startDate : timeFormat(item.startDate),\r\n      endDate : timeFormat(item.endDate)\r\n    }));\r\n    return formatData\r\n    }\r\n  }\r\n});\r\n\r\nconst timeFormat = (date) => {\r\n   let newdate = zonedTimeToUtc(new Date(date), 'America/Edmonton');\r\n   var formatteddate = format(newdate, \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\");\r\n   return formatteddate;\r\n}\r\n\r\n\r\nconst views = ['day'];\r\n\r\nconst renderResourceCell = (model) => {\r\n  return (\r\n      <b>{model.data.FirstName}</b>\r\n  );\r\n}\r\n\r\nclass SalesmanTemplate extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      groupByDate:false,\r\n      cancel:true,\r\n      userList:\"\",\r\n      regionList:\"\",\r\n      info:false\r\n    };\r\n    \r\n    this.onGroupByDateChanged = this.onGroupByDateChanged.bind(this);\r\n    this.onAppointmentForm = this.onAppointmentForm.bind(this);\r\n    this.salesmanSource = this.salesmanSource.bind(this);\r\n    this.regionSource = this.regionSource.bind(this);\r\n    this.InfoIsHere = this.InfoIsHere.bind(this);\r\n  }\r\n  async InfoIsHere() {\r\n  let regionData = await this.regionSource();\r\n  let userData = await this.salesmanSource();\r\n  this.setState({userList:userData});\r\n  this.setState({regionList:regionData});\r\n  this.setState({info:true});\r\n} \r\n  \r\n  onAppointmentForm(args) {\r\n    args.cancel = true;\r\n  }\r\n  onGroupByDateChanged(args) {\r\n    this.setState({\r\n      groupByDate: args.value\r\n    });\r\n  }\r\n  async regionSource() {\r\n    const data = await getRegionAPI();\r\n    let regionData = data.data.map((item) => ({\r\n      id  : item.RegionID,\r\n      region: item.Region,\r\n      color: item.color\r\n    }))\r\n    return regionData;\r\n  }\r\n\r\n  async salesmanSource() {\r\n    const data = await getUsers();\r\n    let salesData = data.data.map((item) => ({\r\n      id: item.UserID,\r\n      FirstName : item.FirstName,\r\n      LastName: item.LastName\r\n    }))\r\n    return salesData;\r\n  }\r\n  componentDidMount(){\r\n    this.InfoIsHere();\r\n}\r\n\r\n \r\n  render() {\r\n    if (this.state.info == false){\r\n        return (\r\n          <p>Loading information...</p>\r\n        )\r\n      }\r\n      else{\r\n\r\n      \r\n    return (\r\n      \r\n      <div style={{display:\"flex\",flexDirection:\"row\", margin:\"auto\"}}>\r\n          <div style={{width:\"30%\"}}>\r\n        <Legend />\r\n        </div>\r\n          <div style={{padding:\"15px\", width:\"100%\"}}>\r\n            <h1>Your work day</h1>\r\n             <Scheduler\r\n              timeZone=\"America/Edmonton\"\r\n              resourceCellRender={renderResourceCell}\r\n              dataSource={dataSource}\r\n              views={views}\r\n              defaultCurrentView=\"day\"\r\n              defaultCurrentDate={date}\r\n              width={'60%'}\r\n              height={800}\r\n              startDayHour={7}\r\n              endDayHour={19}\r\n              appointmentTooltipComponent={SalesToolSnap}\r\n              onAppointmentAdding={(e) => {e.cancel = true}}\r\n              onAppointmentDeleting={(e) => {e.cancel = true}}\r\n              onAppointmentFormOpening={(e) => {e.cancel = true}}\r\n              onAppointmentUpdating={(e) => {e.cancel = true}}\r\n        >\r\n        <Resource\r\n          dataSource={this.state.regionList}\r\n          fieldExpr=\"RegionID\"\r\n          useColorAsDefault={true}\r\n        ></Resource>\r\n        </Scheduler>\r\n        </div>\r\n        \r\n     \r\n    </div>\r\n    );\r\n  }\r\n}\r\n}\r\n\r\nexport default SalesmanTemplate;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderPreview.js",["525","526","527","528","529"],"import {Button, Space} from 'antd';\r\n\r\n\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst {format } = require('date-fns-tz');\r\n\r\n\r\nexport default function OrderPreview(props) {\r\n\r\n    const info = props.orderInfo;\r\n    const date = new Date();\r\n    const currentDate = date.getDay() + \" \" + date.getMonth() + \" \" + date.getFullYear();\r\n\r\n    function printContent() {\r\n        var content = document.getElementById(\"workForm\");\r\n        var pri = document.getElementById(\"ifmcontentstoprint\").contentWindow;\r\n        pri.document.open();\r\n        pri.document.write(content.innerHTML);\r\n        pri.document.close();\r\n        pri.focus();\r\n        pri.print();\r\n    }\r\n    function renderProducts(detail){\r\n        console.log(detail);\r\n        let prods=[];\r\n        detail.productArr.map((item) => {\r\n            prods.push(\r\n                <div>\r\n                    <p>{item.product} {item.notes}</p>\r\n                    <p>{item.price}</p>\r\n                </div>\r\n                \r\n            )\r\n        });\r\n        return prods;\r\n    }\r\n\r\n    function renderRows() {\r\n        let rows = [];\r\n        info.selectedDetails.map((item) => {\r\n            rows.push(\r\n                <tr>\r\n                    <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                        {info.allInfo.FirstName + \" \" + info.allInfo.LastName}\r\n                    </td>\r\n                    <td colSpan=\"2\"\r\n                    style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                        {item.details}\r\n                    </td>\r\n                    <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                        {renderProducts(item)}\r\n                    </td>\r\n                </tr>\r\n               \r\n               \r\n            )\r\n        })\r\n    return rows;\r\n    }\r\n\r\n    return (\r\n        <div style={{display:'flex', flexDirection:'column', alignItems:'center'}}>\r\n        <div id=\"workForm\" style={{width:\"80%\", border:\"1px solid grey\"}}>\r\n            <div className=\"head\" style={{display:\"flex\",flexDirection:\"row\", margin:\"auto\", padding:\"10px\"}}>\r\n                <div>\r\n                <img src={header}></img>\r\n                </div>\r\n                <div>\r\n                    <div style={{fontSize:\"xx-large\"}}>\r\n                    Sales Order\r\n                </div>\r\n                <div>\r\n                <table style={{border:\"1px solid grey\", margin:\"1px\", padding:\"2px\"}}>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\", minWidth:\"120px\"}}>\r\n                                Sales Date\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Sales Order #\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                {format(date,\"MMMM do',' yyyy\")}\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                            <input\r\n                            size='5'></input>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n                </div>\r\n                \r\n            <div>\r\n                <table style={{border:\"1px solid grey\"}}>\r\n                    <thead >\r\n                        <tr >\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                Customer Name and Address\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                Site Address\r\n                            </td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                {info.allInfo.CustFirstName + \" \" + info.allInfo.CustLastName}\r\n                                <br/>\r\n                                {info.allInfo.BillingAddress}\r\n                                <br/>\r\n                                {info.allInfo.CustCity}\r\n                                <br/>\r\n                                {info.allInfo.CustPostalCode}\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                {info.allInfo.Address}\r\n                                <br/>\r\n                                {info.allInfo.City + \", \" + info.allInfo.Province}\r\n                                <br/>\r\n                                {info.allInfo.PostalCode}\r\n                                <br/>\r\n                                Customer Phone: {info.allInfo.Phone}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div style={{float:'right', marginRight:'6%'}}>\r\n            <table style={{border:\"1px solid grey\", margin:\"1px\", padding:\"2px\"}}>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                P.O. #\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Terms\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                <input></input>\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                            <textarea>\r\n                            </textarea>\r\n                            <br />\r\n                            Due on receipt\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                    </table>\r\n            </div>\r\n            <div>\r\n                <table style={{border:\"1px solid grey\", width:\"100%\"}}>\r\n                    <thead>\r\n                        <tr style={{border:\"1px solid grey\", width:\"100%\"}}>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Item\r\n                            </td>\r\n                            <td colSpan='2'\r\n                            style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Description\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Ordered\r\n                            </td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {renderRows()}\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <td colSpan='3'\r\n                            style={{border:\"1px solid grey\", padding:\"2px\"}}>Additional Notes for Installers</td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>Total:</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan='3'\r\n                            style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                {info.allInfo.notesInstallers}\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                $ <input\r\n                                defaultValue={info.allInfo.QuoteTotal}>\r\n                                </input>\r\n                            </td>\r\n                        </tr>\r\n                    </tfoot>\r\n                </table>\r\n                <p>GST/HST No. 104459771</p>\r\n            </div>\r\n        </div>\r\n        <footer>\r\n            <br/>\r\n            <Space>\r\n                <Button\r\n                onClick={() => {printContent()}}>\r\n            Print\r\n                </Button>\r\n        <Button\r\n        size='large'\r\n        type=\"primary\">\r\n            Complete Work Order\r\n        </Button>\r\n        \r\n            </Space>\r\n             \r\n        </footer>\r\n        <iframe\r\n        id=\"ifmcontentstoprint\"\r\n        style={{ height: \"0px\", width: \"0px\", position: \"absolute\" }}\r\n      ></iframe>\r\n       \r\n    </div>\r\n    )\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\trucks.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\customers\\custInfo.js",["530","531","532","533","534"],"import React, {useEffect, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Form, Input, message, Select, Space } from \"antd\";\r\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\r\nimport {getRegion, updateCustomer, getCustomer, getCustomerAddresses, deleteCustomer, addNotes, getNotes, deleteNote} from '../../api/customer';\r\nimport { addAddress } from '../../api/neworder';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {getUser} from '../../util/storage';\r\nimport { getRegionAPI } from '../../api/calendar';\r\n\r\nconst { Item } = Form;\r\nconst { confirm } = Modal;\r\nconst { Option } = Select;\r\nconst { format } = require('date-fns-tz')\r\n\r\n\r\nexport function CustomerInfo() {\r\n\r\n  let match = useRouteMatch('/customers/:customer').params.customer;\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [showAddress, setShowAddress] = useState(false);\r\n  const [formAddress] = Form.useForm();\r\n  const [form1] = Form.useForm();\r\n  const [regions, setRegions] = useState([]);\r\n  const [customerInfo, setcustomerinfo] = useState([]);\r\n  const [addressList, setAddressList] = useState([]);\r\n  const [user, setUser] = useState(\"\");\r\n  const [notes, setNotes] = useState([]);\r\n  const [count, setCount] = useState(0);\r\n\r\n  const options = regions.map((item) => (\r\n    <Option key={item.id}>{item.name}</Option>\r\n  ));\r\n    useEffect(() => {\r\n        const func = async () => {\r\n           await getCustomer(match).then((info) => {\r\n            var customerInfo = info.data.map((item) =>({\r\n            id: item.CustomerID,\r\n            firstName: item.CustFirstName,\r\n            lastName: item.CustLastName,\r\n            email: item.Email,\r\n            phone: item.Phone,\r\n            billing: item.BillingAddress,\r\n            city: item.CustCity,\r\n            postal: item.CustPostalCode,\r\n            region: item.CustRegion\r\n          }));\r\n          setcustomerinfo(customerInfo[0]);\r\n          });\r\n          let userInfo = getUser();\r\n          let initial = userInfo.FirstName.charAt(0) + userInfo.LastName.charAt(0);\r\n          setUser(initial);\r\n           await getNotes(match).then((notes) => {\r\n            setNotes(notes.data);\r\n          })\r\n        };\r\n        func();\r\n        getAddressList();\r\n        getRegions();\r\n      }, [count]);\r\n\r\n    const getAddressList = async () => {\r\n        await getCustomerAddresses(match).then((list) => {\r\n          var addresses = list.data.map((item) =>({\r\n          id: item.AddressID,\r\n          address: item.Address,\r\n          postalcode: item.PostalCode,\r\n          city: item.City,\r\n          region: item.Region\r\n        }));\r\n        setAddressList(addresses);\r\n        })\r\n      };\r\n      const getRegions = async() => {\r\n        var result = await getRegionAPI();\r\n        var regionList = result.data.map((item) =>({\r\n          id:item.RegionID,\r\n          name:item.Region\r\n        }));\r\n        setRegions(regionList);\r\n      }\r\n      const title = (\r\n        <div>\r\n          <Space>\r\n\r\n          \r\n          <Button\r\n            type=\"primary\"\r\n          onClick={() => {\r\n              setShowForm(true);\r\n              form1.setFieldsValue({\r\n              firstName: customerInfo.firstName,\r\n              lastName: customerInfo.lastName,\r\n              email: customerInfo.email,\r\n              phone: customerInfo.phone,\r\n              billing: customerInfo.billing,\r\n             city: customerInfo.city,\r\n              postal: customerInfo.postal,\r\n              region: customerInfo.region\r\n             });\r\n            }}\r\n          >\r\n            Modify\r\n          </Button>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => {\r\n              handleDeleteCustomer(customerInfo.id);\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n      const handleUpdate = async () => {\r\n        const validResult = await form1.validateFields();\r\n        if (validResult.errorFields && validResult.errorFields.length > 0) return;\r\n        const value = form1.getFieldsValue();\r\n        const id = customerInfo.id;\r\n        //update data in the backend\r\n        const result = await updateCustomer(id, value.firstName, value.lastName, value.email, value.phone, value.billing, value.city, value.postal, value.region);\r\n        setShowForm(false);\r\n\r\n        if (result.status === 200) {\r\n          message.success(\"Successfully updated customer information\");\r\n        }\r\n      };\r\n      const handleDeleteCustomer = async (id) => {\r\n        confirm({\r\n          title: \"Are you sure you want to delete this customer?\",\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: \"\",\r\n          okText: \"Yes\",\r\n          okType: \"danger\",\r\n          cancelText: \"No\",\r\n          onOk() {\r\n            return new Promise((resolve, reject) => {\r\n              const result = deleteCustomer(id);\r\n              message.success(\"Customer has been successfully deleted\");\r\n              resolve();\r\n              \r\n            });\r\n          },\r\n          onCancel() {\r\n            console.log(\"Cancel\");\r\n          },\r\n        });\r\n\r\n      }\r\n      const handleNewAddress = async () =>{\r\n        const validResult = await formAddress.validateFields();\r\n        if (validResult.errorFields && validResult.errorFields.length > 0) return;\r\n        const value = formAddress.getFieldsValue();\r\n        const info = {\r\n          BillingAddress: value.address,\r\n          PostalCode: value.postalCode,\r\n          City: value.city,\r\n          Region: value.region\r\n        }\r\n        let id = customerInfo.id;\r\n        var result = await addAddress(id, info);\r\n        if (result.status == 200){\r\n          message.success(\"added new address\");\r\n        }\r\n        setShowAddress(false);\r\n      }\r\n      const getNoteTable = () => {\r\n        let rows = [];\r\n        notes.map((item) => {\r\n          rows.push(\r\n            <tr>\r\n              <td>\r\n                {item.custNotes}\r\n              </td>\r\n              <td>\r\n                {format(new Date(item.dateAdded), \"MMMM do',' yyyy\")}\r\n              </td>\r\n              <td>\r\n                {item.UserInitial}\r\n              </td>\r\n              <td>\r\n                <Button type=\"primary\" danger\r\n                onClick={async() => {\r\n                  await deleteNote(item.custNotesID);\r\n                  message.success(\"Note deleted\");\r\n                  setCount(count + 1);\r\n                }}\r\n                >X</Button>\r\n              </td>\r\n            </tr>\r\n         \r\n            \r\n          );\r\n        });\r\n        return rows;\r\n      }\r\n    const columns =[\r\n      {\r\n        title:\"Address\",\r\n        dataIndex:\"address\",\r\n        key:\"address\"\r\n      },\r\n      {\r\n        title:\"Postal Code\",\r\n        dataIndex:\"postalcode\",\r\n        key:\"postal\"\r\n      },\r\n      {\r\n        title:\"City\",\r\n        dataIndex:\"city\",\r\n        key:\"city\"\r\n      },\r\n      {\r\n        title:\"Region\",\r\n        dataIndex:\"region\",\r\n        key:\"region\"\r\n      }\r\n      \r\n    ]\r\n      return(\r\n        <div>\r\n          <Card\r\n          title = {title}\r\n          >\r\n            <div>\r\n              <div style={{float:\"left\", width:\"30%\"}}>\r\n              <Card title=\"Customer Information\">\r\n              <table>\r\n                <tr>\r\n                  <td>\r\n                    First Name:\r\n                  </td>\r\n                  <td>\r\n                    {customerInfo.firstName}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    Last Name:\r\n                  </td>\r\n                  <td>\r\n                    {customerInfo.lastName}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    Email:\r\n                  </td>\r\n                  <td>\r\n                    {customerInfo.email}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    Phone:\r\n                  </td>\r\n                  <td>\r\n                    {customerInfo.phone}\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            <br />      \r\n        </Card>\r\n        <Card title=\"Billing Address\">\r\n          <table>\r\n            <tr>\r\n              <td>\r\n                Billing Address:\r\n              </td>\r\n              <td>\r\n                {customerInfo.billing}\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                City:\r\n              </td>\r\n              <td>\r\n                {customerInfo.city}\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                Postal Code:\r\n              </td>\r\n              <td>\r\n                {customerInfo.postal}\r\n              </td>\r\n            </tr>\r\n          </table>\r\n        </Card>\r\n            </div>\r\n            <div style={{float:\"right\", width:\"50%\"}}>\r\n              <h1>Customer Notes</h1>\r\n              <Item>\r\n                <table style={{display:'block', height:\"350px\", overflowY:\"scroll\", width:\"100%\"}}\r\n              >\r\n                <thead>\r\n                  <tr>\r\n                    <td style={{position:\"sticky\", top:\"0\", width:\"60%\", backgroundColor:\"white\"}}>\r\n                      <strong>Notes</strong>\r\n                    </td>\r\n                    \r\n                    <td style={{position:\"sticky\", top:\"0\", width:\"25%\", backgroundColor:\"white\"}}>\r\n                      <strong>Date Added</strong>\r\n                    </td>\r\n                    <td style={{position:\"sticky\", top:\"0\", width:\"10%\", backgroundColor:\"white\"}}>\r\n                      <strong>User Initial</strong>\r\n                    </td>\r\n                    <td style={{position:\"sticky\", top:\"0\", width:\"10%\", backgroundColor:\"lightgrey\"}}>\r\n                      <strong>Delete</strong>\r\n                    </td>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {getNoteTable()}\r\n                </tbody>\r\n              </table>\r\n              </Item>\r\n              \r\n              <Item>\r\n                <textarea\r\n                id='notes2'\r\n                rows=\"3\"\r\n                cols=\"75\">\r\n                </textarea>\r\n              </Item>\r\n              <Item>\r\n                <Button\r\n                onClick={async() => {\r\n                  let box2 = document.getElementById(\"notes2\");\r\n                  await addNotes(box2.value, user, match)\r\n                  .then(async(item) => {\r\n                    box2.value = \"\";\r\n                    if(item.status === 200){\r\n                    message.success(\"added new note\");\r\n                   setCount(count + 1);\r\n                  }\r\n                  else{\r\n                    message.error(\"Something went wrong. Please try again.\");\r\n                  }        });\r\n                }}>\r\n                Submit\r\n                </Button>\r\n              </Item>\r\n              \r\n            </div>\r\n            </div>\r\n            \r\n        \r\n            \r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        bordered\r\n        dataSource={addressList}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n\r\n          </Table>\r\n          <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            setShowAddress(true);\r\n            formAddress.resetFields();\r\n          }}\r\n          >New Address</Button>\r\n\r\n          <Modal\r\n          visible={showForm}\r\n          title=\"Update Customer\"\r\n          onOk={handleUpdate}\r\n          onCancel={() => setShowForm(false)}\r\n        >\r\n          <Form form={form1} labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}>\r\n            <Item\r\n              label=\"First Name\"\r\n              name=\"firstName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n                \r\n              ]}\r\n              \r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Last Name\"\r\n              name=\"lastName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Email\"\r\n              name=\"email\"\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Phone\"\r\n              name=\"phone\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Billing Address\"\r\n              name=\"billing\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"City\"\r\n              name=\"city\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Postal Code\"\r\n              name=\"postal\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n              </Item>\r\n              <Item\r\n              label=\"Region\"\r\n              name=\"region\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select>{options}</Select>\r\n            </Item>\r\n          </Form>\r\n        </Modal>\r\n        <Modal\r\n          visible={showAddress}\r\n          title=\"New Address\"\r\n          onOk={handleNewAddress}\r\n          onCancel={() => setShowAddress(false)}\r\n          >\r\n          <Form\r\n              form={formAddress}\r\n              labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}\r\n              >\r\n              <Item \r\n              label=\"Address\"\r\n              name=\"address\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n              >\r\n                <Input />\r\n              </Item>\r\n              <Item \r\n              label=\"Postal Code\"\r\n              name=\"postalCode\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n              >\r\n                <Input />\r\n              </Item>\r\n              <Item \r\n              label=\"City\"\r\n              name=\"city\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n              >\r\n                <Input />\r\n              </Item>\r\n              <Item \r\n              label=\"Region\"\r\n              name=\"region\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select>{options}</Select>\r\n              </Item>\r\n\r\n          </Form>\r\n        </Modal>\r\n        </Card>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    export default withRouter(CustomerInfo)","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\customers\\custList.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\FormOne.js",["535","536","537"],"import React, { useState, useEffect } from \"react\";\r\nimport CustomSelect from \"../../component/quotes/CustomSelect.js\";\r\nimport qData from \"./quoteData.js\";\r\n\r\nconst data = qData.quote_data;\r\n\r\nfunction FormOne(props) {\r\n  const [quoteDataId, setQuoteDataId] = useState(props.quoteDataId);\r\n \r\n  function onSelectChange(e) {\r\n    if (!(e === null || e === \"\" || e === undefined)) {\r\n      props.onSetQuoteDataChange(data.find((d) => d.id == e));\r\n    } else {\r\n      props.onSetQuoteDataChange({});\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Form\">\r\n      <h2>Quote Selection</h2>\r\n      <form>\r\n        <div>\r\n          <label> Select Quote Type</label>\r\n          <CustomSelect\r\n            data={data}\r\n            quoteDataId={quoteDataId}\r\n            onSelectChange={onSelectChange}\r\n          />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormOne;\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\encryption.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\newuserform.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\modifyuserform.js",["538"],"import {Form, message, Select, Input, Button, Modal } from 'antd';\r\nimport { useEffect } from 'react';\r\nimport { updateUser } from '../../api';\r\nimport { updatePassword } from '../../api';\r\nimport { sendEmail } from '../../api/calendar';\r\nimport { renderEmail } from 'react-html-email';\r\nimport ResetPasswordEmail from '../Email_Templates/reset_password';\r\nconst crypto = require(\"crypto\");\r\nconst { Item } = Form;\r\nconst { Option } = Select;\r\n\r\n\r\nexport default function ModifyUser(props) {\r\n    const [form] = Form.useForm();\r\n\r\n    const handleUpdate = async () => {\r\n        console.log(props.data);\r\n        //validate first\r\n        const validResult = await form.validateFields();\r\n        if (validResult.errorFields && validResult.errorFields.length > 0) return;\r\n        const value = form.getFieldsValue();\r\n        const { loginFirstName, loginLastName, email, role } = value;\r\n        const id = props.data.id;\r\n        //update data in the backend\r\n        const result = await updateUser(id, loginFirstName, loginLastName, email, role);\r\n        console.log(result);\r\n        if (result.status === 200) {\r\n        message.success(\"Updated user\");\r\n        props.count();\r\n        props.closeForm();\r\n        }\r\n      };\r\n\r\n      const options = props.roleList.map((item) => (\r\n        <Option key={item.RoleName}>{item.RoleName}</Option>\r\n      ));\r\n\r\n      useEffect(()=>{\r\n          form.setFieldsValue({\r\n            key:props.data.id,\r\n            loginFirstName: props.data.loginFirstName,\r\n            loginLastName: props.data.loginLastName,\r\n            email: props.data.email,\r\n            role: props.data.role,\r\n          })\r\n      },[props.data]);\r\n\r\n      const resetPassword = () =>{\r\n          Modal.confirm({\r\n              title:\"Reset Password\",\r\n              content:\"This will reset this user's password and send a new one to the email saved on the account. Proceed?\",\r\n              onOk(){\r\n                return new Promise(async(resolve, reject) => {\r\n                     var token = crypto.randomBytes(5).toString('hex');\r\n        try{\r\n            let emailCheck = await updatePassword(props.data.email,token);\r\n            if(emailCheck.data.changedRows === 0){\r\n                message.warn(\"No email found\");\r\n            }\r\n            else{ \r\n            sendEmail(props.data.email, renderEmail(<ResetPasswordEmail newPassword = {token} />),\"Password Reset\");\r\n            message.success(\"Password reset\");\r\n            resolve();\r\n            props.closeForm();\r\n        }\r\n        }\r\n        catch(e){\r\n            console.log(e);\r\n            message.warn(\"Something went wrong. Please try again\");\r\n        }\r\n                })\r\n        }\r\n              \r\n      })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Update</h3>\r\n             <Form onFinish={handleUpdate} form={form} labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}>\r\n          <Item\r\n              label=\"First Name\"\r\n              name=\"loginFirstName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Last Name\"\r\n              name=\"loginLastName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Reset Password\">\r\n             <Button type=\"primary\" onClick={resetPassword}>Reset</Button>\r\n            </Item>\r\n            <Item\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n\r\n            <Item\r\n              label=\"Role\"\r\n              name=\"role\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select>{options}</Select>\r\n            </Item>\r\n            <Item>\r\n                <Button type=\"primary\" htmlType='submit'>Update</Button>\r\n            </Item>\r\n          </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Forms\\newworkorderform.js",["539","540"],"import FindCustomer from \"../Form_Buttons/findCustomerButton\";\r\nimport {Card, Row, Col, Select, Checkbox} from 'antd';\r\nimport { getCustomerQuotes } from \"../../api/calendar\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport QuoteInfoCreate from \"../QuoteInfoCreate\";\r\nimport { set } from \"store\";\r\n\r\nexport default function NewWorkOrderForm(props) {\r\n    const dispatch = useDispatch();\r\n    const select = useSelector((state) => state);\r\n    const [selectCustomer, setSelectCustomer] = useState([]);\r\n    const [quoteList, setQuoteList] = useState([]);\r\n    const [quoteDetails, setQuoteDetails] = useState({quote:null,detailArray:[]});\r\n\r\n\r\n    const setDisplay = async(customer) => {\r\n        setSelectCustomer(customer);\r\n        dispatch({type:\"customerUpdate\", payload:customer});\r\n        const list = await getCustomerQuotes(customer.CustomerID);\r\n        setQuoteList(list.data);\r\n        document.getElementById(\"CustomerInfo\").style.display = \"block\";\r\n      }\r\n\r\n      const optionsQuotes = quoteList.map((item) => (\r\n        {\r\n          label:`${item.Address}`,\r\n          value:item.QuoteID\r\n        }\r\n      ))\r\n\r\n      const renderList = (array) => {\r\n        let rows = [];\r\n        if(array.length > 0){\r\n          array.forEach((detail) => {\r\n            rows.push(\r\n              <div>\r\n                <tr>\r\n              <td>\r\n                <Checkbox onChange={() => {detail.selected = !detail.selected;}}></Checkbox>\r\n              </td>\r\n              <td colSpan='2' style={{fontSize:\"15px\"}}>\r\n                {detail.subtotalLines}\r\n              </td>\r\n            </tr>\r\n              {renderProducts(detail.arr)}\r\n              <tr>\r\n                <td>\r\n  \r\n                </td>\r\n                <td style={{fontSize:\"15px\"}}>\r\n                  <b>Total:</b>\r\n                </td>\r\n                <td>\r\n                  $ {detail.total}\r\n                </td>\r\n              </tr>\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n        return rows;\r\n      }\r\n  \r\n      const renderProducts = (products) => {\r\n        let rows = [];\r\n        products.forEach((prod) => {\r\n          rows.push(\r\n            <tr>\r\n              <td>\r\n              </td>\r\n              <td>\r\n                {prod.product}\r\n              </td>\r\n              <td>\r\n                {prod.price}\r\n              </td>\r\n            </tr>\r\n          )\r\n        })\r\n  \r\n        return rows;\r\n      }\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col>\r\n                <Card title=\"Customer\">\r\n                <FindCustomer setDisplay={setDisplay} />\r\n\r\n                <div id=\"CustomerInfo\" style={{display:\"none\"}}>\r\n                    <Card title=\"Info\">\r\n                      {selectCustomer.CustFirstName}  {selectCustomer.CustLastName} <br />\r\n                      {selectCustomer.BillingAddress} <br/>\r\n                      {selectCustomer.CustCity} {selectCustomer.CustPostalCode}\r\n                    </Card>\r\n                    <Card title=\"Open Quotes\">\r\n                      <Select style={{width:'150px'}} \r\n                      options={optionsQuotes}\r\n                      onSelect={async(value) => {\r\n                        let data = await QuoteInfoCreate(value);\r\n                        setQuoteDetails(data);\r\n                        dispatch({type:\"quoteUpdate\",payload:data})\r\n                      }}>\r\n                      </Select>\r\n                    </Card>\r\n                </div>\r\n            </Card>\r\n                </Col>\r\n                <Col>\r\n                <Card title=\"Select Details\">\r\n                      {renderList(quoteDetails.detailArray)}\r\n                </Card>\r\n                </Col>\r\n            </Row>\r\n            \r\n        </div>\r\n    )\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderList.js",["541","542"],"import React, {useEffect, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Input, Popover} from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { SearchAllInfo} from \"../../api/quoteEditAPI\";\r\nimport { getAllInfoWO, getDetailsWO, getProductsWO } from '../../api/orders';\r\nimport { getUser } from '../../util/storage';\r\nimport WorkToPDFConvert from './workToPDFconvert';\r\nconst {Search} = Input;\r\nconst {format, zonedTimeToUtc } = require('date-fns-tz')\r\n\r\n  function OrderList() {\r\n  let history = useHistory();\r\n  let user = getUser();\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [formData, setFormData] = useState([]);\r\n  const [testData, setTestData] = useState([]);\r\n  const [detailData, setDetailData] = useState([]);\r\n  const [prodData, setProdData] = useState([]);\r\n\r\n    useEffect(() => {\r\n          const func = async () => {\r\n          await getAllInfoWO().then((result) => {\r\n            setTestData(result.data);\r\n          });\r\n        \r\n          await getDetailsWO().then((item) => {\r\n            setDetailData(item.data);\r\n          });\r\n          await getProductsWO().then((item) => {\r\n            setProdData(item.data);\r\n          })\r\n        }\r\n        func();\r\n        \r\n        if(testData !== []){\r\n          setLoaded(true);\r\n        }\r\n        \r\n      }, []);\r\n\r\n      const getUserQuotes = (list) => {\r\n        let newList = [];\r\n        list.forEach((item) => {\r\n          if(item.UserID === user.UserID){\r\n            newList.push(item);\r\n          }\r\n        });\r\n        return newList;\r\n      }\r\n    const getDetailsByID = (id) => {\r\n        let array = [];\r\n        detailData.forEach((item) => {\r\n          if(item.OrderID === id){\r\n            array.push({\r\n              WorkOrderID:item.OrderID,\r\n              id:item.WODetailID,\r\n              details:item.Details,\r\n              total:item.DetailTotal,\r\n              arr:getProductArr(item.WODetailID)\r\n            });\r\n          }\r\n        });\r\n        return array;\r\n    }\r\n    const getProductArr = (id) => {\r\n      let array = [];\r\n      prodData.forEach((item) => {\r\n             if(item.WODetailID === id){\r\n                  array.push({\r\n                    prodID:item.WOProdID,\r\n                    product:item.Product,\r\n                    price:item.Price\r\n                  })\r\n              }\r\n          });\r\n          return array;\r\n    }\r\n    const renderDetails = () => {\r\n      let rows = [];\r\n      formData.forEach((item) => {\r\n        rows.push(\r\n        <Card title=\"Details\" bordered={true} type=\"inner\">\r\n          <p>{item.details}</p>\r\n          <strong>Products</strong>\r\n          <table style={{width:'100%'}}>\r\n            <tbody>\r\n              {renderProducts(item.arr)}\r\n            </tbody>\r\n          </table>\r\n          \r\n          <p><strong>Total: </strong>{item.total}</p>\r\n        </Card>)\r\n\r\n      });\r\n      return rows;\r\n    }\r\n    const renderProducts = (array) => {\r\n      let rows = [];\r\n      array.forEach((item) => {\r\n        rows.push(\r\n          <tr width=\"100px\">\r\n            <td>{item.product}</td>\r\n            <td>{item.notes}</td>\r\n            <td>{item.price}</td>\r\n          </tr>\r\n      )})\r\n      return rows\r\n\r\n    }\r\n    const findQuote = async (value) => {\r\n      let result = await SearchAllInfo(value);\r\n      setTestData(result.data)\r\n    }\r\n    const columns =[\r\n      {\r\n        title:\"Customer Name\",\r\n        key:\"customer\",\r\n        render:(data) => (\r\n          <p>{data.CustFirstName + \" \" + data.CustLastName}</p>\r\n        )\r\n      },\r\n      {\r\n        title:\"Address\",\r\n        key:\"address\",\r\n        render:(data) => (\r\n          <p>{data.Address  + \",\" + \" \" + data.City}</p>\r\n        )\r\n      },\r\n      {},\r\n\r\n      {\r\n        title:\"Salesman\",\r\n        key:\"user\",\r\n        render: (data) =>(\r\n          <div>\r\n             <p>{data.FirstName + \" \" + data.LastName}</p>\r\n          </div>\r\n         \r\n        )\r\n      },\r\n      {\r\n        title:\"Date Completed\",\r\n        key:\"completed\",\r\n        render: (data) =>{\r\n            if(data.completeDate !== null) {\r\n              return <p>{format(zonedTimeToUtc(data.completeDate,\"America/Toronto\"),\"MMMM do',' yyyy\")}</p>\r\n            }\r\n            else return <p> </p>\r\n        },\r\n        sorter: (a,b) => new Date(a.completeDate) - new Date(b.completeDate)\r\n      },\r\n      {\r\n        title:\"Options\",\r\n        key:\"options\",\r\n        render: (data) => (\r\n          <Popover content={\r\n            <div>\r\n             <Button\r\n            onClick={() => {\r\n              WorkToPDFConvert(data);\r\n            }}>\r\n              Download Work Order\r\n            </Button>\r\n            <br />\r\n            <br/>\r\n            <Button\r\n            onClick={() => { \r\n              setFormData(getDetailsByID(data.WorkOrderID));\r\n              setShowForm(true);     \r\n                          }}>\r\n              View Work Order\r\n            </Button>\r\n          </div>\r\n          }\r\n          trigger=\"clicked\">\r\n          <Button>. . . </Button>\r\n          </Popover>\r\n        )\r\n      }   \r\n    ]\r\n    if(loaded){\r\n\r\n      if(user.SecurityLevel === 'admin'){\r\n        return(\r\n        <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Order\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n\r\n        <h2>Active Work Orders</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={testData}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Work Order\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quoteinfo/${formData[0].quoteID}`)}}\r\n        okText=\"Edit Work Order\"\r\n        >\r\n         <div>\r\n           {renderDetails()}\r\n         </div>\r\n        </Modal>\r\n          </div>\r\n      )\r\n      }\r\n      else if (user.SecurityLevel === 'salesman'){\r\n        return (\r\n          <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Quote\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n          \r\n\r\n        <h2>Your Active Work Orders</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={getUserQuotes(testData)}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Work Order\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quoteinfo/${formData[0].quoteID}`)}}\r\n        okText=\"Edit Work Order\"\r\n        >\r\n         <div>\r\n           {renderDetails()}\r\n         </div>\r\n        </Modal>\r\n          </div>\r\n        );\r\n      }\r\n      \r\n    }\r\n\r\n    else{\r\n      return(\r\n        <div>\r\n          Loading...\r\n        </div>\r\n        \r\n      );\r\n      \r\n    }\r\n    }\r\nexport default OrderList;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\newOrder.js",["543","544","545"],"import React, {useState, useEffect} from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { Card, Checkbox, Row, Col, Form, DatePicker, Modal, Button, Select, message} from 'antd';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { getDetailsID, getProductsID, getAvailableTrucks, addNewOrder, addNewOrderDetail, addNewOrderProduct, updateQuoteOnComplete } from '../../api/orders';\r\nimport { getAllInfoID } from '../../api/quoteEditAPI';\r\nimport Tabs from '../../Components/HomeTemplate/Tabs';\r\nimport FoamSnapshot from '../../Components/HomeTemplate/FoamCalendar/FoamSnapshot';\r\nimport FillSnapshot from '../../Components/HomeTemplate/FillCalendar/FillSnapshot';\r\nimport { disabledMinuteArr, disabledHourArr } from '../../util/storedArrays';\r\n\r\nconst { Item } = Form;\r\nconst {Option} = Select;\r\nconst { format } = require(\"date-fns-tz\");\r\n\r\nfunction NewOrder (props) {\r\n    \r\n    let quoteID = useRouteMatch('/orders/:oid/new').params.oid;\r\n    const history = useHistory();\r\n    const [quoteData, setQuoteData] = useState([]);\r\n    const [setDetailData] = useState([]);\r\n    const [setProdData] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [quoteDetails, setQuoteDetails] = useState([]);\r\n    const [showCalendar, setShowCalendar] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [trucks, setTrucks] = useState([]);\r\n\r\n    useEffect(async() => {\r\n      try {\r\n\r\n        await getAllInfoID(quoteID).then((result) => {\r\n          setQuoteData(result.data[0]);\r\n        });\r\n        let detailsInfo = await getDetailsID(quoteID);\r\n          setDetailData(detailsInfo.data);\r\n        let productInfo = await getProductsID(quoteID)\r\n          setProdData(productInfo.data);\r\n        createDetails(detailsInfo.data, productInfo.data);\r\n        await getAvailableTrucks().then((result) => {\r\n          setTrucks(result.data);\r\n        })\r\n      }\r\n      \r\n      catch(e) {\r\n        console.log(e);\r\n      }\r\n\r\n      \r\n      if(quoteData !== []){\r\n        \r\n        setLoaded(true);\r\n      }\r\n      \r\n    }, [])\r\n\r\n    const options = trucks.map((item) => (\r\n      <Option key = {item.TruckID}>{item.TruckNumber + \" \" + item.TruckInfo} </Option> \r\n    ))\r\n    \r\n    const createOrder = async(values) => {\r\n    const validResult = await form.validateFields();\r\n    if (validResult.errorFields && validResult.errorFields.length > 0) return;\r\n      const endDate = new Date(values.selectedDate._d);\r\n      const addedHours = endDate.setHours(endDate.getHours() + 3);\r\n      const workOrderInfo = {\r\n        allInfo:quoteData,\r\n        selectedDetails:findSelectedDetails(),\r\n        total:getSelectedTotal(findSelectedDetails()),\r\n        startDate: format(\r\n          values.selectedDate._d,\r\n          \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\"\r\n        ),\r\n        endDate:format(\r\n          addedHours,\r\n          \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\"\r\n        ),\r\n        selectedTruck:values.selectedTruck,\r\n      };\r\n      let selectedTruckType = getTruckType(workOrderInfo.selectedTruck);\r\n      let order = await addNewOrder(workOrderInfo, selectedTruckType, quoteID);\r\n      try {\r\n      let orderID = order.data.insertId;\r\n      workOrderInfo.selectedDetails.forEach(async(item) => {\r\n        let detail = await addNewOrderDetail(item, orderID);\r\n        let detailID = detail.data.insertId;\r\n        item.productArr.forEach(async(prod) => {\r\n          await addNewOrderProduct(prod, orderID, detailID);\r\n        });\r\n      })\r\n    }\r\n    catch(e) {\r\n      message.error(\"Something went wrong - please try again\");\r\n      console.log(e);\r\n    }\r\n    finally{\r\n      if(order.status === 200){\r\n        message.success(\"Order created\");\r\n      }\r\n      props.updateOrder(workOrderInfo);\r\n      updateAndCompleteQuote(workOrderInfo);\r\n      history.push('/home');\r\n    }\r\n    }\r\n\r\n    async function updateAndCompleteQuote(values) {\r\n      let confirm = await updateQuoteOnComplete(values);\r\n      return confirm;\r\n    }\r\n\r\n    function getTruckType(id) {\r\n      let workType = \"\";\r\n      trucks.forEach((truck) => {\r\n        console.log(truck);\r\n        if(truck.TruckID == id){\r\n          workType = truck.TruckType;\r\n        }         \r\n      })\r\n      return workType;\r\n    }\r\n\r\n    function getSelectedTotal() {\r\n      let total = 0;\r\n      quoteDetails.forEach((item) => {\r\n        if(item.selected){\r\n          total = total + item.total;\r\n        }\r\n      })\r\n      return total;\r\n    }\r\n\r\n    function findSelectedDetails() {\r\n      let selectItem = [];\r\n      quoteDetails.forEach((item) => {\r\n        if(item.selected){\r\n          selectItem.push(item);\r\n        }\r\n      });\r\n      return selectItem;\r\n    }\r\n    const createDetails = (detlist, prodlist) => {\r\n      if(quoteDetails !== []){\r\n      let temp = quoteDetails;\r\n      detlist.forEach((detail) => {\r\n         let detailObj = {\r\n                  id: detail.SubtotalID,\r\n                  details:detail.subtotalLines,\r\n                  total:detail.subtotalAmount,\r\n                  selected:false,\r\n                  productArr:[]\r\n              \r\n          }\r\n          prodlist.forEach((prod) => {\r\n              if(prod.subtotalID === detail.SubtotalID){\r\n                  let prodObj = {\r\n                      id:prod.QuoteLineID,\r\n                      product:prod.Product,\r\n                      notes:prod.Notes,\r\n                      price:prod.Subtotal\r\n                  }\r\n                  if(detailObj.productArr.length === 0){\r\n                      detailObj.productArr[0] =prodObj;\r\n                  }\r\n                  else{\r\n                      detailObj.productArr[detailObj.productArr.length] = prodObj;\r\n                  }\r\n                  \r\n              }\r\n          })\r\n          if(temp.length === 0){\r\n              temp[0] = detailObj;\r\n          }\r\n          else{\r\n              temp[temp.length] = detailObj;\r\n          }\r\n          setQuoteDetails(temp);\r\n      });        \r\n    }\r\n    else{\r\n      console.log(\"already created details\");\r\n    }\r\n  }\r\n\r\n    const renderList = () => {\r\n      let rows = [];\r\n      if(quoteDetails.length > 0){\r\n        quoteDetails.forEach((detail) => {\r\n          rows.push(\r\n            <div>\r\n              <tr>\r\n            <td>\r\n              <Checkbox onChange={() => {detail.selected = !detail.selected;}}></Checkbox>\r\n            </td>\r\n            <td colSpan='2' style={{fontSize:\"15px\"}}>\r\n              {detail.details}\r\n            </td>\r\n          </tr>\r\n            {renderProducts(detail.productArr)}\r\n            <tr>\r\n              <td>\r\n\r\n              </td>\r\n              <td style={{fontSize:\"15px\"}}>\r\n                <b>Total:</b>\r\n              </td>\r\n              <td>\r\n                {detail.total}\r\n              </td>\r\n            </tr>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n      return rows;\r\n    }\r\n\r\n    const renderProducts = (products) => {\r\n      let rows = [];\r\n      products.forEach((prod) => {\r\n        rows.push(\r\n          <tr>\r\n            <td>\r\n            </td>\r\n            <td>\r\n            </td>\r\n            <td>\r\n              {prod.product}\r\n            </td>\r\n            <td>\r\n              {prod.notes}\r\n            </td>\r\n            <td>\r\n              {prod.price}\r\n            </td>\r\n          </tr>\r\n        )\r\n      })\r\n\r\n      return rows;\r\n    }\r\n\r\n    if(loaded === true){\r\n     return (\r\n        <div>\r\n            <h2>New Order Creation</h2>\r\n            \r\n\r\n            \r\n            <Card title=\"Customer and Address Information\">\r\n                <Row>\r\n              <Col>\r\n                <Card title=\"Customer\" bordered={false} style={{ height:\"250px\"}}>\r\n                    <p>{quoteData.CustFirstName} {quoteData.CustLastName}</p>\r\n                    <p>{quoteData.Email}</p>\r\n                    <p>{quoteData.Phone}</p>\r\n                    <p>{quoteData.BillingAddress}</p>\r\n                </Card>\r\n              </Col>\r\n              <Col>\r\n              <Card title=\"Site Address\" bordered={false} style={{ height:\"250px\"}}>\r\n                  <p>{quoteData.Address}, {quoteData.City} {quoteData.Province}</p>\r\n                  <p></p>\r\n                  <p>{quoteData.PostalCode}</p>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n            </Card>\r\n            <Form form={form} onFinish={createOrder}>\r\n            <Card title='Select the details'>\r\n            <Item>\r\n              <table>\r\n                <tbody>\r\n                  {renderList()}\r\n                </tbody>\r\n              </table>\r\n            </Item>\r\n              </Card>\r\n              <Card title=\"Select the date\">\r\n                <Item\r\n              name=\"selectedDate\"\r\n              rules={[\r\n                {\r\n                   required:true,\r\n                   message:\"Please select a date\"\r\n                }\r\n              ]}\r\n            >\r\n              <DatePicker\r\n                disabledTime={() => {\r\n                  return {\r\n                    disabledHours:() => disabledHourArr,\r\n                    disabledMinutes: () => disabledMinuteArr\r\n                  }\r\n                }}\r\n                showTime={{ \r\n                  hideDisabledOptions:true,\r\n                  format: \"HH:mm\" }}\r\n                format=\"YYYY-MM-DD HH:mm\"\r\n                className=\"datepicker\"\r\n              />\r\n              \r\n            </Item>\r\n            <Item>\r\n            <Button type=\"primary\" onClick={() => {setShowCalendar(true)}}>Show Calendar</Button>\r\n            </Item>\r\n              </Card>\r\n            \r\n            \r\n            <Card>\r\n              <Item>\r\n              <h1>Select truck</h1>\r\n            </Item>\r\n            <Item\r\n            name=\"selectedTruck\"\r\n            rules={[\r\n              {\r\n                 required:true,\r\n                 message:\"Please select a truck\"\r\n              }\r\n            ]}>\r\n              <Select\r\n              notFoundContent=\"No trucks available\">\r\n                {options}</Select>\r\n            </Item>\r\n            </Card>\r\n            \r\n            <Item>\r\n              <Button size=\"large\" type=\"primary\" htmlType=\"submit\">Create Work Order</Button>\r\n            </Item>\r\n            \r\n            \r\n                </Form>\r\n            <Modal\r\n            visible={showCalendar}\r\n            onCancel={() => {setShowCalendar(false)}}\r\n            width=\"90%\"\r\n            >\r\n            <div>\r\n              <Tabs>\r\n                <div label=\"Foam\">\r\n                  <FoamSnapshot />\r\n                </div>\r\n                <div label =\"Fill\">\r\n                <FillSnapshot />\r\n                </div>\r\n              </Tabs>\r\n            </div>\r\n            </Modal>\r\n             \r\n        </div>\r\n    )   \r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                Loading...\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewOrder;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteChange.js",["546","547","548"],"import React, {useState, useEffect} from 'react';\r\nimport Button from \"../../component/quotes/Button\";\r\nimport {useInput} from '../../hooks/input-hook';\r\nimport {Row, Col, Card, Checkbox, InputNumber, Select} from 'antd';\r\nimport qData from './quoteData.js';\r\nconst { Option } = Select;\r\n\r\nfunction QuoteChange (props) {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [quoteData, setQuoteData] = useState(props.quoteFormData);\r\n    const [detailKey, setDetailKey] = useState(props.quoteFormData.details.length);\r\n    const [prodKey, setProdKey] = useState(0);\r\n    const [taxRate, setTaxRate] = useState(13);\r\n    let quotes = qData.quote_data;\r\n\r\n    const quoteList = () => {\r\n        return (\r\n            quotes.map((item) => {\r\n                return(\r\n                <Option value={item.id}>{item.name}</Option>\r\n           ) })\r\n        )\r\n    }\r\n\r\n    useEffect( () => {\r\n        let func = () => {\r\n            setQuoteData(props.quoteFormData);\r\n            setText(props.quoteFormData);\r\n        }\r\n        try {\r\n            func();\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        setLoading(false);\r\n        setcounter(counter + 1);\r\n        },[]);\r\n \r\n    const setText = (allInfo) => {\r\n        assignFirstName(allInfo.first_name);\r\n        assignLastName(allInfo.last_name);\r\n        assignPhoneNumber(allInfo.phone_number);\r\n        assignEmail(allInfo.email);\r\n        assignBillingAddress(allInfo.billing_address);\r\n        assignCity(allInfo.city);\r\n        assignPostCode(allInfo.post_code);\r\n        assignSiteAddress(allInfo.site_address);\r\n        assignSiteCity(allInfo.site_city);\r\n        assignSiteCode(allInfo.site_postal);\r\n        assignCustomerNotes(allInfo.customer_notes);\r\n        assignInstallerNotes(allInfo.installer_notes);\r\n        assignUserFirstName(allInfo.userInfo.FirstName);\r\n        assignUserLastName(allInfo.userInfo.LastName);\r\n\r\n    setcounter(counter + 1);\r\n    }\r\n\r\n    const {value: firstName, assignValue: assignFirstName} = useInput();\r\n    const {value: lastName, assignValue: assignLastName} = useInput();\r\n    const {value: billingAddress,  assignValue: assignBillingAddress} = useInput();\r\n    const {value: city,  assignValue: assignCity} = useInput();\r\n    const {value: postCode, assignValue: assignPostCode} = useInput();\r\n    const {value: phoneNumber,  assignValue: assignPhoneNumber} = useInput();\r\n    const {value: email,  assignValue: assignEmail} = useInput();\r\n\r\n    const {value: siteAddress,  assignValue: assignSiteAddress} = useInput();\r\n    const {value: siteCity,  assignValue: assignSiteCity} = useInput();\r\n    const {value: siteCode, assignValue: assignSiteCode} = useInput();\r\n    \r\n    const {value: customerNotes, bind: bindCustomerNotes, assignValue: assignCustomerNotes} = useInput();\r\n    const {value: installerNotes, bind: bindInstallerNotes, assignValue: assignInstallerNotes} = useInput();\r\n\r\n    const {value: userFirstName, assignValue: assignUserFirstName} = useInput();\r\n    const {value: userLastName, assignValue: assignUserLastName} = useInput();\r\n\r\n    const [tax, setTax] = useState(true);\r\n    const [counter, setcounter] = useState(1);\r\n    \r\n    const handleSubmit = async (evt) => {\r\n        quoteData.customer_notes = customerNotes;\r\n        quoteData.installer_notes = installerNotes;\r\n        evt.preventDefault();\r\n        props.onSetQuoteFormDataChange(quoteData);\r\n    }\r\n\r\n    const changeTax = () => {\r\n        if (tax === true){\r\n            setTax(false);\r\n        }\r\n        else if (tax === false){\r\n            setTax(true);\r\n        }\r\n    }        \r\n    const addNewDetail = (id) => {\r\n        let quote = {};\r\n        quotes.forEach((item) => {\r\n            if(item.id === id) {\r\n                quote=item;\r\n            }\r\n        });\r\n        var temp = quoteData;\r\n        if(temp.details[temp.details.length] === 0){\r\n            temp[0] = {\r\n                key:detailKey,\r\n                details:quote.details,\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        else{\r\n            temp.details[temp.details.length] = {\r\n                key:detailKey,\r\n                details:quote.details,\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        setDetailKey(detailKey + 1);\r\n        setQuoteData(temp);\r\n        setcounter(counter +1);\r\n    }\r\n    const handleAddProduct = (details) => {\r\n        setcounter(counter + 1);\r\n        var temp = quoteData;\r\n        var index = temp.details.indexOf(details);\r\n        if(temp.details[index].productArr.length === 0){\r\n            temp.details[index].productArr[0] = {\r\n                id:null,\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                price:0.00\r\n            }\r\n        }\r\n        else{\r\n            temp.details[index].productArr[temp.details[index].productArr.length] = {\r\n                id:null,\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                price:0.00\r\n            }\r\n        }\r\n        setProdKey(prodKey + 1);\r\n        setQuoteData(temp);\r\n    }\r\n    const handleRemoveRow = (details, prod ,e) => {\r\n        e.preventDefault();\r\n        setcounter(counter - 1);\r\n        var temp = quoteData;\r\n        var index = temp.details.indexOf(details);\r\n        var prodIndex = temp.details[index].productArr.indexOf(prod);\r\n        temp.details[index].productArr.splice(prodIndex,1);\r\n        setQuoteData(temp);\r\n    }\r\n    const handleRemoveDetail = (details,e) => {\r\n        e.preventDefault();\r\n        setcounter(counter -1);\r\n        var temp = quoteData;\r\n        var index = temp.details.indexOf(details);\r\n        temp.details.splice(index,1);\r\n        setQuoteData(temp);\r\n    }\r\n    const handleDetailChange = (details, e) => {\r\n        details.details = e.target.value\r\n        details.details.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />')\r\n    }\r\n    const handleProductDetails = (prod, e) => {\r\n        prod.product = e.target.value;\r\n    }\r\n    const handleProductPrice = (prod, e) => {\r\n        if(e.target.value === \"\"){\r\n            e.target.value = 0.00;\r\n        }\r\n        let newPrice = parseFloat(e.target.value);\r\n        let rounded = newPrice.toFixed(2);\r\n        prod.price = rounded;\r\n        setcounter(counter + 1);\r\n    }\r\n    const renderProducts = (details) => {\r\n        let rows = [];\r\n            if(details.productArr.length !== 0){\r\n                details.productArr.forEach((prod) => {\r\n\r\n                    rows.push(\r\n                         <tr>\r\n                             <td>\r\n                                 Details:\r\n                                 <input type=\"text\" key={prod.prodKey} size={50}  defaultValue={prod.product}\r\n                                    onChange={(e) => {\r\n                                        handleProductDetails(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n        \r\n                             </td>\r\n                            <td>\r\n                                Price:\r\n                                <input type=\"number\" step=\".01\" key={prod.prodKey} defaultValue={prod.price}\r\n                                    onChange={(e) => {\r\n                                        handleProductPrice(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n                            </td>\r\n                             <td style={{textAlign:\"right\"}}>\r\n                             <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveRow(details, prod, e)}} >x</Button>\r\n                             </td>\r\n                         </tr>);\r\n                });\r\n            }\r\n            return rows;\r\n    }\r\n    const getTotal = (details) => {\r\n        let total = 0.00;\r\n        details.productArr.map((item) => {\r\n            total = total + parseFloat(item.price);\r\n        });\r\n        if (tax == true){\r\n            total = total * (1 + '.' + taxRate.toString().padStart(2,0));\r\n            total = parseFloat(total);\r\n        }\r\n        total = total.toFixed(2);\r\n        details.total = total;\r\n        return total;\r\n    }\r\n    const getQuoteTotal = (detail) => {\r\n        let total = 0.00;\r\n        detail.forEach((item) => {\r\n            total = total + parseFloat(item.total);\r\n        });\r\n        total = total.toFixed(2);\r\n        return total;\r\n    }\r\n    const renderRows = () => {\r\n        let rows = [];\r\n        if(quoteData.details.length > 0){\r\n            \r\n            quoteData.details.forEach((detail) => {\r\n            rows.push(\r\n            <tr>\r\n            <tr>\r\n            <tr>\r\n            <td colSpan=\"2\">\r\n                    <textarea \r\n                    key={detail.key}\r\n                    cols=\"150\" \r\n                    rows=\"6\" \r\n                    className=\"ant-input\"\r\n                    defaultValue={detail.details}\r\n                    onChange={(e) => {\r\n                            handleDetailChange(detail, e)\r\n                        }}\r\n                    >\r\n                    </textarea>\r\n                </td>\r\n                <td></td>\r\n                <td style={{textAlign:\"right\"}}>\r\n                    <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveDetail(detail,e)}} >Delete</Button>\r\n                </td>\r\n            </tr>\r\n            Products:\r\n            </tr>\r\n                <tr>\r\n                    {renderProducts(detail)}\r\n                </tr>\r\n        <tr>\r\n            <td>\r\n                <Button size=\"sm\" variant=\"primary\" onClick={(e) => {handleAddProduct(detail,e)}}>Add Detail</Button>\r\n            </td>\r\n              \r\n        </tr>\r\n              \r\n            <tr>\r\n            <td style={{textAlign:\"right\"}}>\r\n                        Subtotal: {getTotal(detail)}\r\n                        </td>\r\n            </tr>\r\n            </tr>\r\n            );\r\n            \r\n        });\r\n        }\r\n        return rows;\r\n    }\r\n    \r\n\r\n    \r\n    if (isLoading) {\r\n        return <div className=\"App\">Loading...</div>;\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"Quote\" style={{width:\"80%\"}}>\r\n                <div>\r\n                    <Row gutter={16}>\r\n                        <Col span={10}>\r\n                            <Card title=\"Customer and Billing\" bordered={false}>\r\n                           <p><b>Customer: </b> {firstName} {lastName}</p>\r\n                    Address:\r\n                    <p>{billingAddress}</p>\r\n                    City:\r\n                    <p>{city}</p>\r\n                    Postal Code:\r\n                    <p>{postCode}</p>\r\n                    Phone:\r\n                    <p>{phoneNumber}</p>\r\n                    Email:\r\n                    <p>{email}</p>\r\n                            </Card>\r\n                        </Col>\r\n                         <Col span={10}>\r\n                            <Card title=\"Site Address\" bordered={false}>\r\n                    Address:\r\n                    <p>{siteAddress}</p>\r\n                    City:\r\n                    <p>{siteCity}</p>\r\n                    Postal Code:\r\n                    <p>{siteCode}</p>\r\n                            </Card>\r\n                        </Col>\r\n                     </Row>\r\n                    <br/>\r\n                    <br/>\r\n                    <table style={{width:\"100%\"}}>\r\n                        <thead>\r\n                        <tr>\r\n                            <td>Quote Details and Products:</td>\r\n                            \r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {renderRows()}\r\n                        <tr>\r\n                            <td>\r\n                               Add New Product:<Select\r\n                               style={{width:200}}\r\n                               size=\"small\"\r\n                               defaultValue=\"Select a template\"\r\n                               onSelect={addNewDetail}>\r\n                                   {quoteList()}\r\n                               </Select>\r\n                            </td>\r\n                        </tr>\r\n                        \r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Apply tax <Checkbox defaultChecked = {true} onChange={() => {changeTax()}}></Checkbox>\r\n                                </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{textAlign:\"right\"}}>\r\n                                    Tax rate: <InputNumber\r\n                                    style={{width:\"55px\"}}\r\n                                    size=\"small\"\r\n                                    min={1}\r\n                                    max={99}\r\n                                    defaultValue={13}\r\n                                    step={1}\r\n                                    parser={value => Math.floor(value)}\r\n                                    onChange={value => {setTaxRate(value)}}\r\n                                    ></InputNumber> %\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Quote Total: ${getQuoteTotal(quoteData.details)}\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                </table>\r\n\r\n                    Notes to customer:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"customer_notes\"\r\n                    defaultValue={customerNotes}\r\n                    onChange={(e) => {\r\n                        assignCustomerNotes(e.target.value);\r\n                    }  }\r\n                    {...bindCustomerNotes}\r\n                    >\r\n                    </textarea>\r\n\r\n                    <br/>\r\n\r\n                    Notes to installers:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"installer_notes\"\r\n                    defaultValue={installerNotes}\r\n                    onChange={(e) => {\r\n                        assignInstallerNotes(e.target.value);\r\n                    }}\r\n                    {...bindInstallerNotes}\r\n                    >\r\n                    </textarea>\r\n                    <br/>\r\n                    <p>Estimator: {userFirstName + \" \" + userLastName}</p>< br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    \r\n                    <Button size=\"md\" variant=\"primary\" type=\"submit\" className=\"ant-btn ant-btn-primary\">Finish Quote</Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default QuoteChange;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteEdit.js",["549","550","551","552","553","554","555"],"import {getQuoteDetails, getProductList, updateQuote, updateDetail, updateProduct, deleteProduct, deleteDetail, getAllInfoID } from \"../../api/quoteEditAPI\";\r\nimport {addNewDetails, addNewProductLine} from '../../api/quotes';\r\nimport React, {useState, useEffect} from 'react';\r\nimport Button from \"../../component/quotes/Button\";\r\nimport {useInput} from '../../hooks/input-hook';\r\nimport {Row, Col, Card, Checkbox, message, InputNumber} from 'antd';\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\n\r\nfunction QuoteEdit (props) {\r\n    let quoteID = useRouteMatch('/quotes/:qid/edit').params.qid;\r\n    let history = useHistory();\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    const [setAllData] = useState([]);\r\n    const [quoteData, setQuoteData] = useState([]);\r\n    const [quoteDetail, setQuoteDetail] = useState([]);\r\n    const [productList, setProductList] = useState([]);\r\n    const [detailKey, setDetailKey] = useState(0);\r\n    const [prodKey, setProdKey] = useState(0);\r\n    const [taxRate, setTaxRate] = useState(13);\r\n\r\n    useEffect( () => {\r\n        let func = async() => {\r\n            let allInfo = await getAllInfoID(quoteID);\r\n            console.log(allInfo.data[0]);\r\n            setAllData(allInfo.data[0]);\r\n            \r\n            let detailList = await getQuoteDetails(quoteID);\r\n            setQuoteDetail(detailList.data);\r\n            let products = await getProductList(quoteID);\r\n            setProductList(products.data);\r\n            createDetails(detailList.data, products.data);\r\n            setText(allInfo.data[0]);\r\n        }\r\n        try {\r\n            func();\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        setLoading(false);\r\n        setcounter(counter + 1);\r\n        },[]);\r\n \r\n\r\n    const createDetails = (detlist, prodlist) => {\r\n        let temp = quotedetails;\r\n        detlist.forEach((detail) => {\r\n           let detailObj = {\r\n                    id: detail.SubtotalID,\r\n                    key:detailKey,\r\n                    details:detail.subtotalLines,\r\n                    total:detail.subtotalAmount,\r\n                    productArr:[]\r\n                \r\n            }\r\n            setDetailKey(detailKey + 1);\r\n            prodlist.forEach((prod) => {\r\n                if(prod.subtotalID === detail.SubtotalID){\r\n                    let prodObj = {\r\n                        id:prod.QuoteLineID,\r\n                        key:prodKey,\r\n                        product:prod.Product,\r\n                        price:prod.Subtotal,\r\n                        tax:prod.Tax\r\n                    }\r\n                    if(detailObj.productArr.length === 0){\r\n                        detailObj.productArr[0] =prodObj;\r\n                    }\r\n                    else{\r\n                        detailObj.productArr[detailObj.productArr.length] = prodObj;\r\n                    }\r\n                    setProdKey(prodKey + 1);\r\n                }\r\n            })\r\n            if(temp.length === 0){\r\n                temp[0] = detailObj;\r\n            }\r\n            else{\r\n                temp[temp.length] = detailObj;\r\n            }\r\n            setquotedetails(temp);\r\n        });        \r\n    }\r\n    const setText = (allInfo) => {\r\n        assignFirstName(allInfo.CustFirstName);\r\n        assignLastName(allInfo.CustLastName);\r\n        assignPhoneNumber(allInfo.Phone);\r\n        assignEmail(allInfo.Email);\r\n        assignBillingAddress(allInfo.BillingAddress);\r\n        assignCity(allInfo.CustCity);\r\n        assignPostCode(allInfo.CustPostalCode);\r\n        assignSiteAddress(allInfo.Address);\r\n        assignSiteCity(allInfo.City);\r\n        assignSiteCode(allInfo.PostalCode);\r\n        assignCustomerNotes(allInfo.notesCustomers);\r\n        assignInstallerNotes(allInfo.notesInstallers);\r\n        assignUserFirstName(allInfo.FirstName);\r\n        assignUserLastName(allInfo.LastName);\r\n\r\n    setcounter(counter + 1);\r\n    }\r\n\r\n    const {value: firstName, assignValue: assignFirstName} = useInput();\r\n    const {value: lastName, assignValue: assignLastName} = useInput();\r\n    const {value: billingAddress,  assignValue: assignBillingAddress} = useInput();\r\n    const {value: city,  assignValue: assignCity} = useInput();\r\n    const {value: postCode, assignValue: assignPostCode} = useInput();\r\n    const {value: phoneNumber,  assignValue: assignPhoneNumber} = useInput();\r\n    const {value: email,  assignValue: assignEmail} = useInput();\r\n\r\n    const {value: siteAddress,  assignValue: assignSiteAddress} = useInput();\r\n    const {value: siteCity,  assignValue: assignSiteCity} = useInput();\r\n    const {value: siteCode, assignValue: assignSiteCode} = useInput();\r\n    \r\n    const {value: customerNotes, bind: bindCustomerNotes, assignValue: assignCustomerNotes} = useInput();\r\n    const {value: installerNotes, bind: bindInstallerNotes, assignValue: assignInstallerNotes} = useInput();\r\n\r\n    const {value: userFirstName, assignValue: assignUserFirstName} = useInput();\r\n    const {value: userLastName, assignValue: assignUserLastName} = useInput();\r\n\r\n    const [tax, setTax] = useState(true);\r\n    const [counter, setcounter] = useState(1);\r\n    const [quotedetails, setquotedetails] = useState([]);\r\n    \r\n    const handleSubmit = async (evt) => {\r\n        evt.preventDefault();\r\n        var quoteInfo = \r\n        {\r\n            id:quoteID,\r\n            customer_notes: customerNotes,\r\n            installer_notes: installerNotes,\r\n            \r\n            total: getQuoteTotal(quotedetails)\r\n        }\r\n        try{\r\n        await updateQuote(quoteInfo);\r\n        quotedetails.map(async (details) => {\r\n            if(details.id !== null){\r\n                await updateDetail(details).then(() => {\r\n                details.productArr.map(async (prod) => {\r\n                    if(prod.id !== null){\r\n                        \r\n                        await updateProduct(prod);\r\n                    } \r\n                    else{\r\n                        \r\n                        await addNewProductLine(prod, quoteID, details.id);\r\n                    }\r\n                });\r\n            });\r\n                \r\n            }\r\n            else{\r\n                await addNewDetails(details, quoteID).then(() => {\r\n                     details.productArr.map(async (prod) => {\r\n                    if(prod.id !== null){\r\n                        await updateProduct(prod);\r\n                    } \r\n                    else{\r\n                        await addNewProductLine(prod, quoteID, details.id);\r\n                    }\r\n                });\r\n                });\r\n               \r\n            }\r\n        });\r\n        message.success(\"Quote successfully updated\");\r\n    }\r\n    catch(e){\r\n        message.error(\"Something went wrong. Try again in a bit\")\r\n    }\r\n    finally{\r\n        history.push('/quotes/quoteList');\r\n    }\r\n        \r\n    }\r\n\r\n    const changeTax = () => {\r\n        if (tax === true){\r\n            setTax(false);\r\n        }\r\n        else if (tax === false){\r\n            setTax(true);\r\n        }\r\n    }        \r\n    const addNewDetail = (e) => {\r\n        e.preventDefault();\r\n        setcounter(counter +1);\r\n        var temp = quotedetails;\r\n        if(temp[temp.length] === 0){\r\n            temp[0] = {\r\n                id:null,\r\n                key:detailKey,\r\n                details:\"\",\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        else{\r\n            temp[temp.length] = {\r\n                id:null,\r\n                key:detailKey,\r\n                details:\"\",\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        setDetailKey(detailKey + 1);\r\n        setquotedetails(temp);\r\n        console.log(quotedetails);\r\n    }\r\n    const handleAddProduct = (details,e) => {\r\n        e.preventDefault();\r\n        setcounter(counter + 1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        if(temp[index].productArr.length === 0){\r\n            temp[index].productArr[0] = {\r\n                id:null,\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                price:0.00,\r\n                tax:0.00\r\n            }\r\n        }\r\n        else{\r\n            temp[index].productArr[temp[index].productArr.length] = {\r\n                id:null,\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                price:0.00,\r\n                tax:0.00\r\n            }\r\n        }\r\n        setProdKey(prodKey + 1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleRemoveRow = async(details, prod ,e) => {\r\n        e.preventDefault();\r\n        await deleteProduct(prod.id);\r\n        setcounter(counter - 1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        var prodIndex = temp[index].productArr.indexOf(prod);\r\n        temp[index].productArr.splice(prodIndex,1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleRemoveDetail = async(details,e) => {\r\n        e.preventDefault();\r\n        details.productArr.forEach(async element => {\r\n            console.log(element.id);\r\n            await deleteProduct(element.id);\r\n        });\r\n        await deleteDetail(details.id);\r\n        setcounter(counter -1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        temp.splice(index,1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleDetailChange = (details, e) => {\r\n        details.details = e.target.value\r\n        details.details.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />')\r\n    }\r\n    const handleProductDetails = (prod, e) => {\r\n        prod.product = e.target.value;\r\n    }\r\n    const handleProductPrice = (prod, e) => {\r\n        if(e.target.value === \"\"){\r\n            e.target.value = 0.00;\r\n        }\r\n        let newPrice = parseFloat(e.target.value);\r\n        let rounded = newPrice.toFixed(2);\r\n        prod.price = rounded;\r\n        setcounter(counter + 1);\r\n    }\r\n    const handleTax = (prod, e) => {\r\n        if(e.target.value === \"\"){\r\n            e.target.value = 0.00;\r\n        }\r\n        let number = parseFloat(e.target.value);\r\n        if (tax == true){\r\n            number = number * (0 + '.' + taxRate.toString().padStart(2,0));\r\n            number = parseFloat(number);\r\n        }\r\n        number = number.toFixed(2);\r\n        prod.tax = number;\r\n    }\r\n    const renderProducts = (details) => {\r\n        let rows = [];\r\n            if(details.productArr.length !== 0){\r\n                details.productArr.forEach((prod) => {\r\n\r\n                    rows.push(\r\n                         <tr>\r\n                             <td>\r\n                                 Details:\r\n                                 <input type=\"text\" key={prod.prodKey} size={50}  defaultValue={prod.product}\r\n                                    onChange={(e) => {\r\n                                        handleProductDetails(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n        \r\n                             </td>\r\n                            <td>\r\n                                Price:\r\n                                <input type=\"number\" step=\".01\" key={prod.prodKey} defaultValue={prod.price}\r\n                                    onChange={(e) => {\r\n                                        handleProductPrice(prod, e);\r\n                                        handleTax(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n                            </td>\r\n                             <td style={{textAlign:\"right\"}}>\r\n                             <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveRow(details, prod, e)}} >x</Button>\r\n                             </td>\r\n                         </tr>);\r\n                });\r\n            }\r\n            return rows;\r\n    }\r\n    const getTotal = (details) => {\r\n        let total = 0.00;\r\n        details.productArr.map((item) => {\r\n            total = total + parseFloat(item.price);\r\n        });\r\n        total = total.toFixed(2);\r\n        details.total = total;\r\n        return total;\r\n    }\r\n    const getQuoteTotal = (detail) => {\r\n        let total = 0.00;\r\n        detail.forEach((item) => {\r\n            total = total + parseFloat(item.total);\r\n        });\r\n        total = total.toFixed(2);\r\n        return total;\r\n    }\r\n    const getTaxes = (details) => {\r\n        let taxesTotal = 0.00;\r\n        if(tax){\r\n        details.forEach((item) => {\r\n            item.productArr.map((item) => {\r\n            taxesTotal = taxesTotal + parseFloat(item.tax);\r\n        })\r\n        })\r\n    }\r\n        taxesTotal = taxesTotal.toFixed(2);\r\n        return taxesTotal;\r\n    }\r\n    const renderRows = () => {\r\n        let rows = [];\r\n        if(quotedetails.length > 0){\r\n            \r\n            quotedetails.forEach((detail) => {\r\n            rows.push(\r\n            <tr>\r\n            <tr>\r\n            <tr>\r\n            <td colSpan=\"2\">\r\n                    <textarea \r\n                    key={detail.key}\r\n                    cols=\"150\" \r\n                    rows=\"6\" \r\n                    className=\"ant-input\"\r\n                    defaultValue={detail.details}\r\n                    onChange={(e) => {\r\n                            handleDetailChange(detail, e)\r\n                        }}\r\n                    >\r\n                    </textarea>\r\n                </td>\r\n                <td></td>\r\n                <td style={{textAlign:\"right\"}}>\r\n                    <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveDetail(detail,e)}} >Delete</Button>\r\n                </td>\r\n            </tr>\r\n            Products:\r\n            </tr>\r\n                <tr>\r\n                    {renderProducts(detail)}\r\n                </tr>\r\n        <tr>\r\n            <td>\r\n                <Button size=\"sm\" variant=\"primary\" onClick={(e) => {handleAddProduct(detail,e)}}>Add Product</Button>\r\n            </td>\r\n              \r\n        </tr>\r\n              \r\n            <tr>\r\n            <td style={{textAlign:\"right\"}}>\r\n                        Subtotal: {getTotal(detail)}\r\n                        </td>\r\n            </tr>\r\n            </tr>\r\n            );\r\n            \r\n        });\r\n        }\r\n        return rows;\r\n    }\r\n    \r\n\r\n    \r\n    if (isLoading) {\r\n        return <div className=\"App\">Loading...</div>;\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"Quote\" style={{width:\"80%\"}}>\r\n                <div>\r\n                    <Row gutter={16}>\r\n                        <Col span={10}>\r\n                            <Card title=\"Customer and Billing\" bordered={false}>\r\n                            Customer:<br />\r\n                    <p>{firstName} {lastName}</p>\r\n                    Address:\r\n                    <p>{billingAddress}</p>\r\n                    City:\r\n                    <p>{city}</p>\r\n                    Postal Code:\r\n                    <p>{postCode}</p>\r\n                    Phone:\r\n                    <p>{phoneNumber}</p>\r\n                    Email:\r\n                    <p>{email}</p>\r\n                            </Card>\r\n                        </Col>\r\n                         <Col span={10}>\r\n                            <Card title=\"Site Address\" bordered={false}>\r\n                    Address:\r\n                    <p>{siteAddress}</p>\r\n                    City:\r\n                    <p>{siteCity}</p>\r\n                    Postal Code:\r\n                    <p>{siteCode}</p>\r\n                            </Card>\r\n                        </Col>\r\n                     </Row>\r\n                    <br/>\r\n                    <br/>\r\n                    <table style={{width:\"100%\"}}>\r\n                        <thead>\r\n                        <tr>\r\n                            <td>Quote Details and Products:</td>\r\n                            \r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {renderRows()}\r\n                        <tr>\r\n                            <td>\r\n                                <Button onClick={(e) => {addNewDetail(e)}}>Add Details</Button>\r\n                            </td>\r\n                        </tr>\r\n                        \r\n                        </tbody>\r\n                        <tfoot>\r\n                        <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Apply tax \r\n                                </td>\r\n                                <td>\r\n                                    <Checkbox defaultChecked = {true} onChange={() => {changeTax()}}></Checkbox>\r\n                                </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{textAlign:\"right\"}} colSpan={2}>\r\n                                    Tax rate: <InputNumber\r\n                                    style={{width:\"55px\"}}\r\n                                    size=\"small\"\r\n                                    min={1}\r\n                                    max={99}\r\n                                    defaultValue={13}\r\n                                    step={1}\r\n                                    parser={value => Math.floor(value)}\r\n                                    onChange={value => {setTaxRate(value)}}\r\n                                    ></InputNumber> %\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{textAlign:\"right\"}}>\r\n                                        Taxes: \r\n                                    </td>\r\n                                    <td>\r\n                                        ${getTaxes(quotedetails)}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Grand Total:\r\n                                </td>\r\n                                <td>\r\n                                     ${getQuoteTotal(quotedetails)}\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                </table>\r\n\r\n                    Notes to customer:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"customer_notes\"\r\n                    defaultValue={quoteData.customer_notes}\r\n                    onChange={(e) => {\r\n                        assignCustomerNotes(e.target.value);\r\n                    }  }\r\n                    {...bindCustomerNotes}\r\n                    >\r\n                    </textarea>\r\n\r\n                    <br/>\r\n\r\n                    Notes to installers:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"installer_notes\"\r\n                    defaultValue={quoteData.installer_notes}\r\n                    onChange={(e) => {\r\n                        assignInstallerNotes(e.target.value);\r\n                    }}\r\n                    {...bindInstallerNotes}\r\n                    >\r\n                    </textarea>\r\n                    <br/>\r\n                    <p>Estimator: {userFirstName + \" \" + userLastName}</p>< br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    \r\n                    <Button size=\"md\" variant=\"primary\" type=\"submit\" className=\"ant-btn ant-btn-primary\">Update Quote</Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default QuoteEdit;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteList.js",["556","557","558","559","560"],"import React, {useEffect, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Input, Space, Popover, message} from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {getAllInfo, getDetails, getProducts, SearchAllInfo} from \"../../api/quoteEditAPI\";\r\nimport { getUser } from '../../util/storage';\r\nimport getWordDoc from './quoteToWordBypass';\r\nimport { GetOrderByQID } from '../../api/orders';\r\nimport ViewQuoteForm from '../../Components/Forms/viewquoteform';\r\nconst {Search} = Input;\r\nconst {format} = require('date-fns-tz')\r\nvar parseISO = require('date-fns/parseISO')\r\n\r\n  function QuoteList() {\r\n  let history = useHistory();\r\n  let user = getUser();\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [formData, setFormData] = useState([]);\r\n  const [testData, setTestData] = useState([]);\r\n  const [detailData, setDetailData] = useState([]);\r\n  const [prodData, setProdData] = useState([]);\r\n  \r\n    useEffect(() => {\r\n          const func = async () => {\r\n          await getAllInfo().then((result) => {\r\n            setTestData(result.data);\r\n          });\r\n        \r\n          await getDetails().then((item) => {\r\n            setDetailData(item.data);\r\n          });\r\n          await getProducts().then((item) => {\r\n            setProdData(item.data);\r\n          })\r\n        }\r\n        func();\r\n        \r\n        if(testData !== []){\r\n          setLoaded(true);\r\n        }\r\n        \r\n      },[]);\r\n\r\n      const getUserQuotes = (list) => {\r\n        let newList = [];\r\n        list.forEach((item) => {\r\n          if(item.UserID === user.UserID){\r\n            newList.push(item);\r\n          }\r\n        });\r\n        return newList;\r\n      }\r\n    const getDetailsByID = (id) => {\r\n        let array = [];\r\n        detailData.forEach((item) => {\r\n          if(item.quoteID === id){\r\n            array.push({\r\n              quoteID:item.quoteID,\r\n              id:item.subtotalID,\r\n              subtotalLines:item.subtotalLines,\r\n              total:item.subtotalAmount,\r\n              arr:getProductArr(item.SubtotalID)\r\n            });\r\n          }\r\n        });\r\n        return array;\r\n    }\r\n    const checkDate = (date) => {\r\n      let returnDate = \"\";\r\n      if(date === \"December 31st, 1969\"){\r\n      }\r\n      else{\r\n        returnDate = date;\r\n    }\r\n    return returnDate;\r\n    }\r\n    const getProductArr = (id) => {\r\n      let array = [];\r\n      prodData.forEach((item) => {\r\n             if(item.subtotalID === id){\r\n                  array.push({\r\n                    prodID:item.QuoteLineID,\r\n                    product:item.Product,\r\n                    price:item.Subtotal\r\n                  })\r\n              }\r\n          });\r\n          return array;\r\n    }\r\n    const renderDetails = () => {\r\n      let rows = [];\r\n      formData.forEach((item) => {\r\n        rows.push(<Card title=\"Details\" bordered={true} type=\"inner\">\r\n          <p>{item.subtotalLines}</p>\r\n          <strong>Products</strong>\r\n          <table style={{width:'100%'}}>\r\n            <tbody>\r\n              {renderProducts(item.arr)}\r\n            </tbody>\r\n          </table>\r\n          \r\n          <p><strong>Total: </strong>{item.total}</p>\r\n        </Card>)\r\n\r\n      });\r\n      return rows;\r\n    }\r\n    const renderProducts = (array) => {\r\n      let rows = [];\r\n      array.forEach((item) => {\r\n        rows.push(\r\n          <tr width=\"100px\">\r\n            <td>{item.product}</td>\r\n            <td>{item.price}</td>\r\n          </tr>\r\n      )})\r\n      return rows\r\n\r\n    }\r\n    const findQuote = async (value) => {\r\n      let result = await SearchAllInfo(value);\r\n      setTestData(result.data)\r\n    }\r\n    const columns =[\r\n      {\r\n        title:\"Customer Name\",\r\n        key:\"customer\",\r\n        render:(data) => (\r\n          <p>{data.CustFirstName + \" \" + data.CustLastName}</p>\r\n        )\r\n      },\r\n      {\r\n        title:\"Address\",\r\n        key:\"address\",\r\n        render:(data) => (\r\n          <p>{data.Address  + \", \" + data.City}</p>\r\n        )\r\n      },\r\n      {},\r\n\r\n      {\r\n        title:\"Salesman\",\r\n        key:\"user\",\r\n        render: (data) =>(\r\n          <div>\r\n             <p>{data.FirstName + \" \" + data.LastName}</p>\r\n          </div>\r\n         \r\n        )\r\n      },\r\n      {\r\n        title:\"Creation Date\",\r\n        key:\"date\",\r\n        render: (data) => (\r\n          <p>{format(new Date(data.creationDate),\"MMMM do',' yyyy\")}</p>\r\n        ),\r\n        sorter: (a,b) => new Date(a.creationDate) - new Date(b.creationDate)\r\n      },\r\n      {\r\n        title:\"Last Modified\",\r\n        key:\"modDate\",\r\n        render: (data) => (\r\n          <p>{checkDate(format(new Date(data.modifyDate), \"MMMM do',' yyyy\"))}</p>\r\n        ),\r\n        sorter: (a,b) => new Date(a.modifyDate) - new Date(b.modifyDate)\r\n      },\r\n      {\r\n        title:\"Options\",\r\n        key:\"options\",\r\n        render: (data) => (\r\n          <Popover content={\r\n          <div>\r\n            <Button\r\n              onClick={async() => {\r\n                if(data.completed !== null){\r\n                const order = await GetOrderByQID(data.QuoteID);\r\n                console.log(order);\r\n                Modal.info({\r\n                  title:\"Appointment Information\",\r\n                  content:`Work order already created. Appointment time is ${format(parseISO(order.data[0].startDate),\"MMMM do',' yyyy h':'mm aa\")}`\r\n                })\r\n                \r\n                }\r\n                else{\r\n                  history.push(`/orders/${data.QuoteID}/new`)\r\n                }\r\n                \r\n              }}>\r\n                Create Work Order\r\n              </Button>\r\n              <br />\r\n              <br />\r\n            <Button\r\n            onClick={() => {\r\n              getWordDoc(data);\r\n            }}>\r\n              Download Quote\r\n            </Button>\r\n            <br />\r\n            <br />\r\n            <Button\r\n            onClick={() => { \r\n                setFormData(data.QuoteID);\r\n                setShowForm(true);     \r\n                            }}>\r\n            View Quote</Button>\r\n            </div>}\r\n            trigger='clicked'>\r\n            <Button>. . .</Button>\r\n          </Popover>\r\n        )\r\n      }   \r\n    ];\r\n\r\n    if(loaded){\r\n\r\n      if(user.SecurityLevel === 'admin'){\r\n        return(\r\n        <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Quote\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n          \r\n\r\n        <h2>Quote List</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={testData}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Quote\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quotes/${formData}/edit`)}}\r\n        okText=\"Edit Quote\"\r\n        >\r\n         <ViewQuoteForm id={formData}/>\r\n        </Modal>\r\n          </div>\r\n      )\r\n      }\r\n      else if (user.SecurityLevel === 'salesman'){\r\n        return (\r\n          <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Quote\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n          \r\n\r\n        <h2>Your Quotes</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={getUserQuotes(testData)}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Quote\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quoteinfo/${formData}`)}}\r\n        okText=\"Edit Quote\"\r\n        >\r\n         <ViewQuoteForm id={formData}/>\r\n        </Modal>\r\n          </div>\r\n        );\r\n      }\r\n      \r\n    }\r\n\r\n    else{\r\n      return(\r\n        <div>\r\n          Loading...\r\n        </div>\r\n        \r\n      );\r\n      \r\n    }\r\n    }\r\nexport default QuoteList;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuotePrint.js",["561","562","563","564","565"],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuoteOne.js",["566","567","568","569","570","571","572","573","574","575","576","577","578"],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteData.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\CustomSelect.js",["579","580"],"import React, { useState } from \"react\";\r\n\r\nfunction CustomSelect(props) {\r\n\tconst [data] = useState(props.data);\r\n\tconst [quoteDataId, setQuoteDataId] = useState(props.quoteDataId);\r\n\r\n\tfunction onChange(event) {\r\n\t\t// setQuoteDataId(event.target.value);\r\n\t\tif (props.onSelectChange) {\r\n\t\t\tprops.onSelectChange(event.target.value);\r\n\t\t}\r\n\t}\r\n\r\n\tlet options = data.map((d) => (\r\n\t\t<option key={d.id} value={d.id} data={d} >\r\n\t\t\t{d.name}\r\n\t\t</option>\r\n\t));\r\n\r\n\treturn (\r\n\t\t<select\r\n\t\t\tname=\"customSearch\"\r\n\t\t\tclassName=\"custom-search-select\"\r\n\t\t\tonChange={onChange}\r\n\t\t\tplaceholder=\"Select Item\"\r\n\t\t>\r\n\t\t\t<option value=\"\">Select Item</option>\r\n\t\t\t{options}\r\n\t\t</select>\r\n\t);\r\n}\r\nexport default CustomSelect;\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tabs.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Legend.js",["581"],"import React, { useEffect, useState } from 'react';\r\nimport { getRegionAPI } from '../api/calendar';\r\n\r\n\r\nfunction Legend(props) {\r\n\r\n    useEffect(() => {\r\n        let func = async() => {\r\n            let result = await getRegionAPI();\r\n            setRegionInfo(result.data);\r\n        }\r\n        func();\r\n    }\r\n    ,[]);\r\n    const [regionInfo, setRegionInfo] = useState([]);\r\n\r\n    const renderLegend = () => {\r\n        let rows = [];\r\n\r\n        regionInfo.map((item) =>{\r\n            rows.push(\r\n\r\n            \r\n            <tr key={item.RegionID}>\r\n                <td colSpan='2'>\r\n                    <p>{item.Region}</p>\r\n                </td>\r\n                <td>\r\n                    <div style={{backgroundColor:item.color, color:item.color, padding:\"5px\"}}>_</div>\r\n                </td>\r\n            </tr>);\r\n        })\r\n        return rows;\r\n    }\r\n    return (\r\n        <div>\r\n            <table style={{fontSize:\"12px\", width:\"80%\"}}>\r\n                <thead>\r\n                    <tr >\r\n                        <td colSpan='2'>\r\n                           <h1>Region</h1> \r\n                        </td>\r\n                        <td>\r\n                            <h1>Colour</h1>\r\n                        </td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderLegend()}\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        <td>\r\n                            <i>Legend for Region Colours</i>\r\n                        </td>\r\n                    </tr>\r\n                    \r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Legend;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesCalendar.js",["582"],"import React from \"react\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport Switch from 'devextreme-react/switch';\r\nimport Legend from '../../Legend'\r\nimport Scheduler, {Resource} from 'devextreme-react/scheduler';\r\nimport SalesTemplate from './SalesTemplate.js'\r\nimport SalesTooltip from './salesTooltip.js';\r\nimport {getUsersWithDisplay, \r\n        getRegionAPI, \r\n        getCustomers,} from '../../../api/calendar';\r\nimport { Modal, Space } from 'antd';\r\nimport 'devextreme-react/tag-box';\r\nimport 'devextreme-react/autocomplete';\r\nimport { Button } from \"devextreme-react\";\r\nimport NewEstimateForm from \"../../Forms/newestimateform\";\r\nimport {dataSource} from '../../../Components/SalesDatasource'\r\nconst { confirm } = Modal;\r\nconst currentDate = new Date();\r\nlet date = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();\r\nconst views = ['day','week', 'workWeek','month'];\r\nconst groups = ['UserID'];\r\n\r\nconst renderResourceCell = (model) => {\r\n  return (\r\n      <b>{model.data.FirstName} {model.data.LastName[0]}</b>\r\n  );\r\n}\r\nconst onAppointmentDeleting = (e) => {\r\n  var cancel = true;\r\n  e.cancel = cancel;\r\n  confirm({title:\"Do you want to delete this appointment?\", onOk(){dataSource.remove(e.appointmentData.EstimateID) }, onCancel(){cancel = true}});\r\n}\r\n\r\nclass SalesCalendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      mounted:false,\r\n      groupByDate:false,\r\n      useExisting:false,\r\n      userList:\"\",\r\n      regionList:\"\",\r\n      info:false,\r\n      findCustomerList:[],\r\n      customerAddresses:[],\r\n      showForm:false,\r\n      clickedSalesman:\"\",\r\n      siteID:\"\",\r\n      custID:\"\",\r\n      apptDates:{\r\n        start:\"\",\r\n        end:\"\"\r\n      },\r\n      basicInfo:{\r\n        firstName:\"\",\r\n        lastName:\"\",\r\n        phone:\"\",\r\n        email:\"\",\r\n        billingAddress:\"\",\r\n        billingCity:\"\",\r\n        billingPostal:\"\",\r\n        billingRegion:\"\"\r\n      },\r\n      siteInfo:{\r\n        siteAddress:\"\",\r\n        siteCity:\"\",\r\n        siteProv:\"\",\r\n        sitePostal:\"\",\r\n        siteRegion:\"\",\r\n        },\r\n      appointmentInfo:{\r\n        startDate:\"\",\r\n        endDate:\"\",\r\n       },\r\n      description:\"\",\r\n      jobType:\"\",\r\n      formOption:{}\r\n    };\r\n    \r\n    this.onGroupByDateChanged = this.onGroupByDateChanged.bind(this);\r\n    this.onAppointmentForm = this.onAppointmentForm.bind(this);\r\n    this.salesmanSource = this.salesmanSource.bind(this);\r\n    this.regionSource = this.regionSource.bind(this);\r\n    this.InfoIsHere = this.InfoIsHere.bind(this);\r\n    this.createUserObj = this.createUserObj.bind(this);\r\n    this.closeForm = this.closeForm.bind(this);\r\n  }\r\n  async InfoIsHere() {\r\n  if(this.mounted){\r\n    let customerData = await getCustomers();\r\n  let regionData = await this.regionSource();\r\n  let userData = await this.salesmanSource();\r\n  this.setState({userList:userData});\r\n  this.setState({regionList:regionData});\r\n  this.setState({findCustomerList:customerData.data});\r\n  this.setState({info:true});\r\n  }\r\n} \r\nasync onAppointmentForm (e) {\r\n  \r\n  e.cancel = true;\r\n  if(!e.appointmentData.CreationDate){\r\n    this.setState({formOption:<NewEstimateForm close = {this.closeForm} start={e.appointmentData.startDate} end = {e.appointmentData.endDate} salesman = {this.createUserObj(e.appointmentData.UserID)} />});\r\n    this.setState({showForm:true});\r\n  }\r\n}\r\n\r\ncreateUserObj = (id) => {\r\n  let obj = {id:null,name:null}\r\n  this.state.userList.forEach(element => {\r\n    if(element.id == id) {\r\n      obj = {id:element.id,\r\n              name:element.FirstName}\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\ncloseForm = () => {\r\n  this.setState({showForm:false});\r\n  window.location.reload();\r\n}\r\n\r\nonGroupByDateChanged(args) {\r\n    this.setState({\r\n      groupByDate: args.value\r\n    });\r\n  }\r\n  async regionSource() {\r\n    const data = await getRegionAPI();\r\n    let regionData = data.data.map((item) => ({\r\n      id  : item.RegionID,\r\n      region: item.Region,\r\n      color: item.color\r\n    }))\r\n    return regionData;\r\n  }\r\n\r\n  async salesmanSource() {\r\n    const data = await getUsersWithDisplay();\r\n    let salesData = data.data.map((item) => ({\r\n      id: item.UserID,\r\n      FirstName : item.FirstName,\r\n      LastName: item.LastName\r\n    }))\r\n    return salesData;\r\n  }\r\n  componentDidMount(){\r\n    this.mounted = true;\r\n    this.InfoIsHere();\r\n\r\n}\r\n \r\n  componentWillUnmount(){\r\n    this.mounted = false;\r\n  }\r\n  render() {\r\n    if (this.state.info === false){\r\n        return (\r\n          <p>Loading information...</p>\r\n        )\r\n      }\r\n      else{\r\n\r\n      \r\n    return (\r\n      \r\n      <div>\r\n      <Scheduler\r\n        timeZone=\"America/Toronto\"\r\n        groups = {groups}\r\n        groupByDate={this.state.groupByDate}\r\n        resourceCellRender={renderResourceCell}\r\n        dataSource={dataSource}\r\n        views={views}\r\n        defaultCurrentView=\"workWeek\"\r\n        defaultCurrentDate={date}\r\n        height={600}\r\n        startDayHour={7}\r\n        endDayHour={19}\r\n        appointmentComponent={SalesTemplate}\r\n        appointmentTooltipComponent={SalesTooltip}\r\n        onAppointmentDeleting={onAppointmentDeleting}\r\n        onAppointmentFormOpening={this.onAppointmentForm}\r\n        >\r\n        <Resource\r\n          dataSource={this.state.userList}\r\n          fieldExpr=\"UserID\"\r\n          >\r\n        </Resource>\r\n        <Resource\r\n          dataSource={this.state.regionList}\r\n          fieldExpr=\"RegionID\"\r\n          useColorAsDefault={true}\r\n        ></Resource>\r\n        </Scheduler>\r\n        <div className=\"options\" style={{display:'flex'}}>\r\n        <Space>\r\n          <div className=\"caption\">Group by Date First <br/><Switch\r\n            value={ this.state.groupByDate }\r\n            onValueChanged={this.onGroupByDateChanged}\r\n          />\r\n        </div>\r\n        <div className=\"option\">\r\n          Show Legend <br />\r\n          <Button\r\n          text=\"Show\"\r\n          type=\"default\"\r\n          height={25}\r\n          stylingMode=\"outlined\"\r\n          onClick={() => {\r\n            Modal.info({\r\n              content:<Legend />\r\n            })\r\n          }} />\r\n        </div>\r\n        </Space> \r\n      </div>\r\n      <Modal\r\n      footer={false}\r\n      destroyOnClose={true}\r\n      visible={this.state.showForm}\r\n      onCancel={() => {this.setState({showForm:false})}}\r\n      width=\"75%\">\r\n        {this.state.formOption}\r\n      </Modal>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n}\r\n\r\nexport default SalesCalendar;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\Button.js",["583"],"// ./components/Button.js\r\nimport React, { useState } from \"react\";\r\nfunction Button(props) {\r\n  // const [size] = useState(props.size);\r\n  // const [variant] = useState(props.variant);\r\n  return (\r\n    <button class={`ant-btn ant-btn-${props.variant} ant-btn-${props.size}`} onClick={props.onClick}>{props.children}</button>\r\n  );\r\n}\r\nexport default Button;\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\FoamCalendar.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillCalendar.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\QuoteInfoCreate.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\workToPDFconvert.js",["584"],"import { getDetailsByID } from \"../../api/calendar\";\r\nimport { getProductsFromOrderID } from \"../../api/orders\";\r\nimport WorkToPDF from \"../../Components/Word_Templates/workPDF\";\r\n\r\n\r\nexport default async function WorkToPDFConvert (data) {\r\n    let details = await getDetailsByID(data.WorkOrderID);\r\n    let products = await getProductsFromOrderID(data.WorkOrderID);\r\n\r\n    const detailArr = () => {\r\n        const detail = [];\r\n        details.data.map((item) => {\r\n            const detailObj = {\r\n                id:item.WODetailID,\r\n                details:item.Details,\r\n                total:item.DetailTotal,\r\n                productArr:prodArr(item.WODetailID)\r\n            }\r\n            detail.push(detailObj);\r\n        });\r\n        return detail;\r\n    }\r\n\r\n    const prodArr = (id) => {\r\n        let prod = [];\r\n        products.data.forEach((item) => {\r\n            console.log(item);\r\n            if(item.WODetailID === id){\r\n                prod.push({\r\n                    id:item.WOProdID,\r\n                    detailID:item.WODetailID,\r\n                    product:item.Product,\r\n                    notes:item.Notes,\r\n                    price:item.Price\r\n            })\r\n            }\r\n        });\r\n        return prod;\r\n    }\r\n\r\n    const PDFobject = () => {\r\n        let obj ={\r\n        first_name:data.CustFirstName,\r\n        last_name:data.CustLastName,\r\n        billing_address:data.BillingAddress,\r\n        city:data.CustCity,\r\n        post_code:data.CustPostalCode,\r\n        phone_number:data.Phone,\r\n        email:data.Email,\r\n        site_address:data.Address,\r\n        site_city:data.City,\r\n        site_prov:data.Province,\r\n        site_postal:data.PostalCode,\r\n        details:detailArr(),\r\n        total:data.TotalAmount\r\n    }\r\n    return obj;\r\n    }\r\n    \r\n    WorkToPDF(PDFobject());\r\n\r\n    return null;\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\FoamSnapshot.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillSnapshot.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\api\\quotes.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteToWordBypass.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\quote_template.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\hooks\\input-hook.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Word_Templates\\quoteWord.js",["585","586"],"import { Document, ImageRun, Packer, Paragraph, TextRun, Table, TableRow, TableCell, WidthType, BorderStyle, Header, Footer, AlignmentType } from 'docx';\r\nimport format from 'date-fns/format';\r\nconst docx = require(\"docx\");\r\n\r\nlet renderDetails = (info) => {\r\n    let rowArray = [];\r\n    info.details.map((item) => {\r\n        let newRow = new TableRow({\r\n            children:[\r\n                new TableCell({\r\n                    children:[\r\n                        new Paragraph({\r\n                             text:item.details\r\n                        })\r\n                    ]\r\n                   \r\n                })\r\n            ]\r\n        });\r\n        let newProdTable = new TableRow({\r\n            width:{\r\n                size:8000\r\n            },\r\n            children:[\r\n                new TableCell({\r\n                    children:[\r\n                        new Table({\r\n                            columnWidths:[8000,2000],\r\n                            rows:renderProds(item.productArr)\r\n                        }),\r\n                        new Paragraph({\r\n                            text:`Product Total: ${item.total}`\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n            \r\n        })\r\n        rowArray.push(newRow);\r\n        rowArray.push(newProdTable);\r\n        return newRow;\r\n    })\r\n    return rowArray;\r\n}\r\n\r\nlet renderProds = (info) => {\r\n    let detailArr = [];\r\n    info.map((item) => {\r\n        let newRow = new TableRow({\r\n\r\n            children:[\r\n                new TableCell({\r\n                    width:{\r\n                        size:8000,\r\n                        style:WidthType.DXA\r\n                    },\r\n                    children:[\r\n                      new Paragraph({\r\n                          text:item.product\r\n                      })\r\n                  ]  \r\n                }),\r\n                new TableCell({\r\n                    width:{\r\n                        size:2000,\r\n                        style:WidthType.DXA\r\n                    },\r\n                    children:[\r\n                        new Paragraph({\r\n                            text:item.price.toString()\r\n                        })\r\n                    ]  \r\n                })\r\n            ]\r\n    });\r\n    detailArr.push(newRow);\r\n    return newRow;\r\n    })\r\n    return detailArr;\r\n}\r\n\r\nexport default async function QuoteToWord(info) {\r\n    const head = await fetch(\r\n        \"https://i.ibb.co/0snCVqq/header.png\"\r\n    ).then(r => r.blob());\r\n    const foot = await fetch(\r\n        'https://i.ibb.co/tm6mdt0/footer.png'\r\n    ).then(r => r.blob());\r\n\r\n    const doc = new Document({\r\n            sections: [{\r\n                headers:{\r\n                    default: new Header({\r\n                        children:[\r\n                            new Paragraph({\r\n                                children:[\r\n                                    \r\n                                    new ImageRun({\r\n                                        data:head,\r\n                                        transformation:{\r\n                                            width:600,\r\n                                            height:125\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                },\r\n                footers:{\r\n                    default: new Footer({\r\n                        children:[\r\n                            new Paragraph({\r\n                                children:[\r\n                                    new TextRun({\r\n                                        text:`PLEASE BE AWARE THAT POLYURETHANE SPRAY FOAM INSULATION REQUIRES A THERMAL BARRIER I.E. DRYWALL, OR FIREPROOFING. ¼ INCH TOLERANCE DURING APPLICATION IS REQUIRED.`,\r\n                                        break:2,\r\n                                        size:13\r\n                                    }),\r\n                                    new TextRun({\r\n                                        text:`PAYMENT UPON COMPLETION OF WORK IS REQUIRED IN FULL BY CASH, CHEQUE, VISA, MASTERCARD, OR AMERICAN EXPRESS. REITZEL INSULATION DOES NOT GIVE TERMS UNLESS PRE-AUTHORIZED PRIOR TO PROJECT START DATE.`,\r\n                                        break:1,\r\n                                        size:13\r\n                                    }),\r\n                                    new ImageRun({\r\n                                        data:foot,\r\n                                        transformation:{\r\n                                            width:600,\r\n                                            height:80\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                },\r\n                children: [\r\n                    new Paragraph({\r\n                                text: info.quoteDate,\r\n                                alignment: AlignmentType.RIGHT\r\n                    }),\r\n                    new Table({\r\n                        indent:{\r\n                            size:-500,\r\n                            type:WidthType.DXA\r\n                        },\r\n                        columnWidths:[5000,5000],\r\n                        borders: {\r\n                            top:{\r\n                                style:BorderStyle.NONE\r\n                            },\r\n                            bottom:{\r\n                                style:BorderStyle.NIL\r\n                            }\r\n\r\n                        },\r\n                        rows:[\r\n                            new TableRow({\r\n                                children:[\r\n                                    new TableCell({\r\n                                        borders:{\r\n                                            right:{\r\n                                                style:BorderStyle.NONE\r\n                                            },\r\n                                            left:{\r\n                                                style:BorderStyle.NONE\r\n                                            },\r\n                                            top:{\r\n                                                style:BorderStyle.NONE\r\n                                            },\r\n                                            bottom:{\r\n                                                style:BorderStyle.NONE\r\n                                            }\r\n                                        },\r\n                                        width:{\r\n                                            size:5000,\r\n                                            type:WidthType.DXA\r\n                                        },\r\n                                        children:[\r\n                                            new Paragraph({\r\n                                                children: [\r\n                                                    new TextRun({\r\n                                                        text: \"Attention: \",\r\n                                                        bold: true,\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text: info.first_name + \" \" + info.last_name\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:\"Address: \",\r\n                                                        break:1\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:info.billing_address\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:\"City: \",\r\n                                                        break:1\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:info.city\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:\"Postal Code: \",\r\n                                                        break:1\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:info.post_code\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:\"Phone: \",\r\n                                                        break:1\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:info.phone_number\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:\"Email: \",\r\n                                                        break:1\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:info.email\r\n                                                    }),\r\n                                        ]\r\n                                    }),\r\n                                ]\r\n                            }),\r\n                            new TableCell({\r\n                                borders:{\r\n                                    right:{\r\n                                        style:BorderStyle.NONE\r\n                                    },\r\n                                    left:{\r\n                                        style:BorderStyle.NONE\r\n                                    },\r\n                                    top:{\r\n                                        style:BorderStyle.NONE\r\n                                    },\r\n                                    bottom:{\r\n                                        style:BorderStyle.NONE\r\n                                    }\r\n                                },\r\n                                width:{\r\n                                    size:5000,\r\n                                    type:WidthType.DXA\r\n                                },\r\n                                children:[\r\n                                    new Paragraph({\r\n                                        children:[\r\n                                            new TextRun({\r\n                                                text:\" \",\r\n                                            }),\r\n                                            new TextRun({\r\n                                                text:\"Site Address: \",\r\n                                                break:1\r\n                                            }),\r\n                                            new TextRun({\r\n                                                text:info.site_address\r\n                                            }),\r\n                                            new TextRun({\r\n                                                text:\"Site City: \",\r\n                                                break:1\r\n                                            }),\r\n                                            new TextRun({\r\n                                                text:info.site_city\r\n                                            })\r\n                                        ],\r\n                                    }),\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]}),\r\n                    new Paragraph({\r\n\r\n                    }),\r\n                    new Table({\r\n                        indent:{\r\n                            size:-500,\r\n                            type:WidthType.DXA\r\n                        },\r\n                        columnWidths:[10000],\r\n                        \r\n                        rows:[\r\n                            new TableRow({\r\n                                 \r\n                                children:[\r\n                                    new TableCell({\r\n                                        width:{\r\n                                            size:10000,\r\n                                            type:WidthType.DXA\r\n                                            },\r\n                                            borders:{\r\n                                                right:{\r\n                                                    style:BorderStyle.NONE\r\n                                                },\r\n                                                left:{\r\n                                                    style:BorderStyle.NONE\r\n                                                },\r\n                                                top:{\r\n                                                    style:BorderStyle.NONE\r\n                                                }\r\n                                            },\r\n                                        children:[\r\n                                            new Paragraph({\r\n                                                text:\"Quote Products\"\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    }),\r\n                    new Table({\r\n                       width:{\r\n                           size:10000,\r\n                           type:WidthType.DXA\r\n                       },\r\n                        rows: renderDetails(info)\r\n                    }),\r\n                    new Paragraph({\r\n                        break:2\r\n                    }),\r\n                    new Paragraph({\r\n                        text:`Quote total: ${info.total}`\r\n                    }),\r\n                    new Paragraph({\r\n                        break:2\r\n                    }),\r\n                    new Paragraph({\r\n                        children:[\r\n                            new TextRun({\r\n                                text:\"Customer Notes: \",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.customer_notes\r\n                            }),\r\n                            new TextRun({\r\n                                text:\"Quote is valid for 30 days from the date on the quote\",\r\n                                break:1\r\n                            })\r\n                        ]\r\n                    }),\r\n                ],\r\n            }],\r\n        });\r\n\r\n        const buffer = await Packer.toBuffer(doc);\r\n    const blob = new Blob([buffer], {type: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"});\r\n    const link = document.createElement('a');\r\n    link.href = window.URL.createObjectURL(blob);\r\n    link.download = `Reitzel Insulation - ${info.first_name} ${info.last_name} - ${info.site_address}_Quote.docx`;\r\n    link.click();\r\n    return (\r\n        null\r\n    );\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesTooltip.js",["587"],"import {message, Modal} from 'antd';\r\nimport { Button, Form, Popup, TextArea } from 'devextreme-react';\r\nimport { ButtonItem, SimpleItem } from 'devextreme-react/form';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getAddress } from '../../../api/addresses';\r\nimport { deleteEstimate, updateEstimateInfo } from '../../../api/calendar';\r\n\r\nconst {format} = require('date-fns-tz');\r\n\r\n\r\nexport default function SalesTooltip (model) {\r\n  const data = model.data.appointmentData;\r\n  const [address, setAddress] = useState([]);\r\n  const [showPop, setShowPop] = useState(false);\r\n  const [info, setInfo] = useState(data.text);\r\n  useEffect(() => {\r\n    const func = async() => {\r\n      let result = await getAddress(data.AddressID)\r\n      setAddress(result.data[0]);\r\n    }\r\n    func();\r\n  },[address.length]);\r\n\r\n  const deleteClicked = async() => {\r\n    Modal.confirm({title:\"Do you want to delete this appointment?\", onOk(){deleteEstimate(data.EstimateID)}});\r\n  }\r\n\r\n  const editClicked = async(data) => {\r\n    setShowPop(true);\r\n  }\r\n  const displayJobType = () => {\r\n    const jobArr = data.JobType.split(',');\r\n    return(\r\n      <div>\r\n        <b>Estimate Job Types</b>\r\n          {jobArr.map((item)=> {\r\n            return(\r\n              \r\n            <span>\r\n              <br />\r\n              {item}</span>\r\n            )\r\n          } ) }\r\n      </div>\r\n     \r\n    )\r\n   \r\n  }\r\n  return (\r\n    <div>\r\n      <div style={{float:'right'}}>\r\n        <Button hint='Edit appointment' icon='clearformat' onClick={editClicked}></Button><Button icon='clearsquare' hint=\"Delete appointment\" title='DeleteButton' onClick={deleteClicked}></Button>\r\n      </div>\r\n      <b style={{fontSize:15}}>\r\n         {data.text}\r\n      </b>\r\n      <p>\r\n       {address.Address}, {address.City}\r\n       <br/>\r\n       {address.PostalCode}\r\n      </p>\r\n      \r\n      <p style={{color:'grey'}}>{`${format(new Date(data.startDate),\"h':'mm aa\")} - ${format(new Date(data.endDate),\"h':'mm aa\")}`}</p>\r\n      {displayJobType()}\r\n    <Popup\r\n    visible={showPop}\r\n    showTitle={true}\r\n    title=\"Appointment editing\"\r\n    width='40%'\r\n    height='30%'\r\n    >\r\n    <>\r\n    <form \r\n    onSubmit={async(e) => {\r\n      let result = await updateEstimateInfo(data.EstimateID, info);\r\n      if(result.status === 200) {\r\n        message.success(\"Appointment updated\");\r\n      }\r\n      else message.error(\"Something went wrong\");\r\n      e.preventDefault();\r\n      \r\n    }}>\r\n      <Form>\r\n        <SimpleItem\r\n        dataField=\"Info\"\r\n        label={{text:\"Change appointment information\",location:\"top\"}}>\r\n          <TextArea\r\n          id=\"UpdatedInfo\"\r\n          title=\"Change appointment information\"\r\n          defaultValue={info}\r\n          onChange={(e) => {setInfo(e.component._changedValue)}}>\r\n          \r\n          </TextArea>\r\n        </SimpleItem>\r\n          <ButtonItem\r\n          horizontalAlignment=\"center\"\r\n          buttonOptions={{text:'Update',type:'Success',useSubmitBehavior:false, onClick:() => {return new Promise(async(resolve, reject) => {\r\n            let result = await updateEstimateInfo(data.EstimateID, info);\r\n            if(result.status === 200) {\r\n              message.success(\"Appointment updated\");\r\n            }\r\n            else message.error(\"Something went wrong\");\r\n            setShowPop(false);\r\n            resolve();\r\n            \r\n          })}}}\r\n          />\r\n      </Form>\r\n    </form>\r\n    \r\n    </>\r\n      \r\n    </Popup>\r\n    </div>\r\n\r\n  )\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\confirm_work.js",["588"],"import { getCustomer } from \"../../api/customer\";\r\nimport React from 'react';\r\nimport { Email, Item} from 'react-html-email';\r\nimport { getUser } from '../../util/storage';\r\n\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst { format} = require(\"date-fns-tz\");\r\n\r\n\r\nexport default function ConfirmWorkOrder(props) {\r\n    const customer = async() => {\r\n        let info = await getCustomer(props.info.CustomerID);\r\n        return info.data[0];\r\n    } \r\n    const user = getUser();\r\n\r\n    return(\r\n        <Email title=\"Your upcoming Reitzel appointment\">\r\n            <Item>\r\n                <img src={header}></img>\r\n            </Item>\r\n            <Item>\r\n                <p>Hi {customer().CustFirstName} {customer().CustLastName},</p>\r\n            <br/>\r\n            <p>Thank you for choosing Reitzel Insulation! Here are the appointment details for your upcoming job:</p>\r\n\r\n            <p>Date: {format(new Date(props.info.startDate),\"MMMM do',' yyyy\")}</p>\r\n            <p> Approximate Arrival Time:  {format(new Date(props.info.startDate),\"K:mm\")}</p>\r\n            <br />\r\n            </Item>\r\n            <Item>\r\n            Please find the job details below.\r\n            </Item>\r\n            <Item>\r\n                <p>\r\n                This is an automated email. If you have any questions after reading this document, please reply to your representative at {user.Email} or call the office at 519-886-6100 or\r\n                    toll free at 1-800-265-8869.\r\n            Thank you for your business!\r\n                </p>\r\n               <Item>\r\n                  <p>\r\n                  Regards,\r\n                    \r\n            The Reitzel Team  \r\n               </p> \r\n               </Item>\r\n               \r\n            \r\n            </Item>\r\n\r\n\r\n        </Email>\r\n    )\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\update_work.js",["589"],"import React from 'react';\r\nimport { Email, Item} from 'react-html-email';\r\nimport { getUser } from '../../util/storage';\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\n\r\n\r\nconst { format} = require(\"date-fns-tz\");\r\n\r\nfunction UpdateWork(props){\r\n    const user = getUser();\r\n    return(\r\n        <Email title=\"\">\r\n            <Item>\r\n            <img src={header}></img>\r\n            </Item>\r\n            <Item>\r\n            <br />\r\n            <p>There has been a change in your appointment time. Here are the new details for your booking:</p>\r\n\r\n            <p>Date: {format(props.info.startDate,\"MMMM do',' yyyy\")}</p>\r\n            <p> Approximate Arrival Time:  {format(props.info.startDate,\"K:mm\")}</p>\r\n            <br />\r\n            </Item>\r\n            <Item>\r\n                <p>\r\n                This is an automated email. If you have any questions after reading this document, please reply to your representative at {user.Email} or call the office at 519-886-6100 or\r\n                    toll free at 1-800-265-8869.\r\n            Thank you for your business!\r\n                </p>\r\n                <br />\r\n                <p>\r\n                    Regards,\r\n\r\n            The Reitzel Team \r\n                </p>\r\n               \r\n            \r\n            </Item>\r\n\r\n            \r\n\r\n\r\n        </Email>\r\n    )\r\n}\r\n\r\nexport default UpdateWork;","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillTemplate.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillFunctions.js",["590","591","592","593"],"import React from \"react\";\r\nimport {Checkbox} from 'antd';\r\nimport { getElementInfo } from \"devextreme-react/core/configuration/react/element\";\r\n \r\nexport function createDetails (detlist, prodlist) {\r\n    let temp = [];\r\n    detlist.map((detail) => {\r\n       let detailObj = {\r\n                id: detail.SubtotalID,\r\n                details:detail.subtotalLines,\r\n                total:detail.subtotalAmount,\r\n                selected:false,\r\n                productArr:[]\r\n        }\r\n        prodlist.map((prod) => {\r\n            if(prod.subtotalID === detail.SubtotalID){\r\n                let prodObj = {\r\n                    id:prod.QuoteLineID,\r\n                    product:prod.Product,\r\n                    notes:prod.Notes,\r\n                    price:prod.Subtotal\r\n                }\r\n                if(detailObj.productArr.length === 0){\r\n                    detailObj.productArr[0] =prodObj;\r\n                }\r\n                else{\r\n                    detailObj.productArr[detailObj.productArr.length] = prodObj;\r\n                }\r\n                \r\n            }\r\n        })\r\n        if(temp.length === 0){\r\n            temp[0] = detailObj;\r\n        }\r\n        else{\r\n            temp[temp.length] = detailObj;\r\n        }\r\n        return(temp);\r\n    });\r\n    return temp;        \r\n}\r\n\r\nexport function renderList (array) {\r\n    let rows = [];\r\n    if(array.length > 0){\r\n      array.map((detail) => {\r\n        rows.push(\r\n          <div>\r\n            <tr>\r\n                <td>\r\n                <Checkbox onChange={() => {detail.selected = !detail.selected;}}></Checkbox>\r\n                </td>\r\n          <td colSpan='2' style={{fontSize:\"15px\"}}>\r\n            {detail.details}\r\n          </td>\r\n        </tr>\r\n          {renderProducts(detail.productArr)}\r\n          <tr>\r\n            <td>\r\n\r\n            </td>\r\n            <td style={{fontSize:\"15px\"}}>\r\n              <b>Total:</b>\r\n            </td>\r\n            <td>\r\n              {detail.total}\r\n            </td>\r\n          </tr>\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n    return rows;\r\n  }\r\n\r\nfunction renderProducts (products) {\r\n    let rows = [];\r\n    products.map((prod) => {\r\n      rows.push(\r\n        <tr>\r\n          <td>\r\n          </td>\r\n          <td>\r\n          </td>\r\n          <td>\r\n            {prod.product}\r\n          </td>\r\n          <td>\r\n            {prod.notes}\r\n          </td>\r\n          <td>\r\n            {prod.price}\r\n          </td>\r\n        </tr>\r\n      )\r\n    })\r\n\r\n    return rows;\r\n  }\r\n\r\n  export function getTruckType(id, array) {\r\n    let workType = \"\";\r\n    array.forEach(element => {\r\n      if(element.id === id) {\r\n        workType = element.TruckType;\r\n      }\r\n    });\r\n    return workType;\r\n  }\r\n\r\n  export function getSelectedTotal(array) {\r\n    let totalAmt = 0;\r\n    array.forEach(element => {\r\n      if(element.selected) {\r\n        totalAmt = totalAmt + element.total\r\n      }\r\n    });\r\n    return totalAmt;\r\n  }\r\n\r\n  export function getSelectedDetails(array) {\r\n    let details = [];\r\n    array.forEach(element => {\r\n      if(element.selected) {\r\n        details.push(element);\r\n      }\r\n    });\r\n    return details;\r\n  }","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tab.js",[],"C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\headforquote\\index.js",["594","595"],"import React from \"react\";\r\nimport \"./index.css\";\r\nconst logo=  \"https://i.ibb.co/FVFjQwV/logo.png\";\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\n\r\nexport default function HeadForQuote() {\r\n  return (\r\n    <div className=\"headerforquoto\">\r\n      <img src={header}></img>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\pages\\footer\\index.js",["596","597","598","599"],"import { Center } from \"devextreme-react/map\";\r\nimport React from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst visa = \"https://i.ibb.co/XXWJ82B/visa.png\";\r\nconst master = \"https://i.ibb.co/DgctQDJ/master.png\";\r\nconst express = \"https://i.ibb.co/HhyY0k3/express.png\";\r\n\r\n\r\nexport default function Footerforquote() {\r\n  return (\r\n    <div className=\"footerforqueto\">\r\n      <div className=\"beware\">\r\n        PLEASE BE AWARE THAT POLYURETHANE SPRAY FOAM INSULATION REQUIRES A\r\n        THERMAL BARRIER I.E. DRYWALL, OR FIREPROOFING. ¼ INCH TOLERANCE DURING\r\n        APPLICATION IS REQUIRED.{\" \"}\r\n      </div>\r\n      <div className=\"payment\">\r\n        PAYMENT UPON COMPLETION OF WORK IS REQUIRED IN FULL BY CASH, CHEQUE,\r\n        VISA, MASTERCARD, OR AMERICAN EXPRESS. REITZEL INSULATION DOES NOT GIVE\r\n        TERMS UNLESS PRE-AUTHORIZED PRIOR TO PROJECT START DATE.\r\n      </div>\r\n      <div className=\"cardlogos\">\r\n        <img src={visa}></img>\r\n        <img src={express}></img>\r\n        <img src={master}></img>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillTooltip.js",["600","601","602","603","604","605","606","607"],"import React, { useEffect, useState } from 'react';\r\nimport { getAddress } from '../../../api/addresses';\r\nimport { Button, Form, Popup, TextArea } from 'devextreme-react';\r\nimport { deleteWorkOrder } from '../../../api/calendar';\r\nimport {message, Modal} from 'antd';\r\n\r\nconst {format} = require('date-fns-tz');\r\n\r\n\r\nexport default function FillTooltip(model) {\r\n    const data = model.data.appointmentData;\r\n  const [address, setAddress] = useState([]);\r\n  const [showPop, setShowPop] = useState(false);\r\n  const [info, setInfo] = useState(data.text);\r\n  useEffect(() => {\r\n    const func = async() => {\r\n      let result = await getAddress(data.AddressID)\r\n      setAddress(result.data[0]);\r\n    }\r\n    func();\r\n  },[address.length]);\r\n  const deleteClicked = async() => {\r\n    Modal.confirm({title:\"Do you want to delete this appointment?\", onOk(){deleteWorkOrder(data.WorkOrderID)}});\r\n  }\r\n\r\n  const editClicked = async(data) => {\r\n    setShowPop(true);\r\n  }\r\n\r\n    return(\r\n        <div>\r\n             <div style={{float:'right'}}>\r\n        <Button hint='Edit appointment' icon='clearformat' onClick={editClicked}></Button><Button icon='clearsquare' hint=\"Delete appointment\" title='DeleteButton' onClick={deleteClicked}></Button>\r\n      </div>\r\n      <b style={{fontSize:15}}>\r\n         {data.text}\r\n      </b>\r\n      <p>\r\n       {address.Address} {address.City}, {address.Province}\r\n       <br/>\r\n       {address.PostalCode}\r\n      </p>\r\n      \r\n      <p style={{color:'grey'}}>{`${format(new Date(data.startDate),\"h':'mm aa\")} - ${format(new Date(data.endDate),\"h':'mm aa\")}`}</p>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\Components\\Word_Templates\\workPDF.js",["608","609"],"import { Document, ImageRun, Packer, Paragraph, TextRun, Table, TableRow, TableCell, WidthType, BorderStyle, Header, Footer } from 'docx';\r\n\r\nconst docx = require(\"docx\");\r\nconst {format } = require('date-fns-tz');\r\nlet formatDate = format(new Date(), \"yyyy_MM_dd\");\r\n\r\n\r\n\r\nlet renderDetails = (info) => {\r\n    let rowArray = [];\r\n    info.details.map((item) => {\r\n        let newRow = new TableRow({\r\n            children:[\r\n                new TableCell({\r\n                    children:[\r\n                        new Paragraph({\r\n                             text:item.details\r\n                        })\r\n                    ]\r\n                   \r\n                })\r\n            ]\r\n        });\r\n        let newProdTable = new TableRow({\r\n            width:{\r\n                size:8000\r\n            },\r\n            children:[\r\n                new TableCell({\r\n                    children:[\r\n                        new Table({\r\n                            columnWidths:[8000,2000],\r\n                            rows:renderProds(item.productArr)\r\n                        }),\r\n                        new Paragraph({\r\n                            text:`Product Total: ${item.total}`\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n            \r\n        })\r\n        rowArray.push(newRow);\r\n        rowArray.push(newProdTable);\r\n        return newRow;\r\n    })\r\n    return rowArray;\r\n}\r\n\r\nlet renderProds = (info) => {\r\n    let detailArr = [];\r\n    info.map((item) => {\r\n        let newRow = new TableRow({\r\n\r\n            children:[\r\n                new TableCell({\r\n                    width:{\r\n                        size:8000,\r\n                        style:WidthType.DXA\r\n                    },\r\n                    children:[\r\n                      new Paragraph({\r\n                          text:item.product\r\n                      })\r\n                  ]  \r\n                }),\r\n                new TableCell({\r\n                    width:{\r\n                        size:2000,\r\n                        style:WidthType.DXA\r\n                    },\r\n                    children:[\r\n                        new Paragraph({\r\n                            text:item.price.toString()\r\n                        })\r\n                    ]  \r\n                })\r\n            ]\r\n    });\r\n    detailArr.push(newRow);\r\n    return newRow;\r\n    })\r\n    console.log(info);\r\n    return detailArr;\r\n}\r\n\r\nexport default async function WorkToPDF(info) {\r\n    const head = await fetch(\r\n        \"https://i.ibb.co/0snCVqq/header.png\"\r\n    ).then(r => r.blob());\r\n    const foot = await fetch(\r\n        'https://i.ibb.co/tm6mdt0/footer.png'\r\n    ).then(r => r.blob());\r\n\r\n    const doc = new Document({\r\n            sections: [{\r\n                headers:{\r\n                    default: new Header({\r\n                        children:[\r\n                            new Paragraph({\r\n                                children:[\r\n                                    \r\n                                    new ImageRun({\r\n                                        data:head,\r\n                                        transformation:{\r\n                                            width:600,\r\n                                            height:125\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                },\r\n                footers:{\r\n                    default: new Footer({\r\n                        children:[\r\n                            new Paragraph({\r\n                                children:[\r\n                                    new TextRun({\r\n                                        text:`PLEASE BE AWARE THAT POLYURETHANE SPRAY FOAM INSULATION REQUIRES A THERMAL BARRIER I.E. DRYWALL, OR FIREPROOFING. ¼ INCH TOLERANCE DURING APPLICATION IS REQUIRED.`,\r\n                                        break:2,\r\n                                        size:13\r\n                                    }),\r\n                                    new TextRun({\r\n                                        text:`PAYMENT UPON COMPLETION OF WORK IS REQUIRED IN FULL BY CASH, CHEQUE, VISA, MASTERCARD, OR AMERICAN EXPRESS. REITZEL INSULATION DOES NOT GIVE TERMS UNLESS PRE-AUTHORIZED PRIOR TO PROJECT START DATE.`,\r\n                                        break:1,\r\n                                        size:13\r\n                                    }),\r\n                                    new ImageRun({\r\n                                        data:foot,\r\n                                        transformation:{\r\n                                            width:600,\r\n                                            height:80\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                },\r\n                children: [\r\n                    new Table({\r\n                        indent:{\r\n                            size:-500,\r\n                            type:WidthType.DXA\r\n                        },\r\n                        columnWidths:[5000,5000],\r\n                        borders: {\r\n                            top:{\r\n                                style:BorderStyle.NONE\r\n                            },\r\n                            bottom:{\r\n                                style:BorderStyle.NIL\r\n                            }\r\n\r\n                        },\r\n                        rows:[\r\n                            new TableRow({\r\n                                children:[\r\n                                    new TableCell({\r\n                                        borders:{\r\n                                            right:{\r\n                                                style:BorderStyle.NONE\r\n                                            },\r\n                                            left:{\r\n                                                style:BorderStyle.NONE\r\n                                            },\r\n                                            top:{\r\n                                                style:BorderStyle.NONE\r\n                                            },\r\n                                            bottom:{\r\n                                                style:BorderStyle.NONE\r\n                                            }\r\n                                        },\r\n                                        width:{\r\n                                            size:5000,\r\n                                            type:WidthType.DXA\r\n                                        },\r\n                                        children:[\r\n                                            new Paragraph({\r\n                                                children: [\r\n                                                    new TextRun({\r\n                                                        text: \"Attention: \",\r\n                                                        bold: true,\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text: info.first_name + \" \" + info.last_name\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:\"Address: \",\r\n                                                        break:1\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:info.billing_address\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:\"City: \",\r\n                                                        break:1\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:info.city\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:\"Postal Code: \",\r\n                                                        break:1\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:info.post_code\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:\"Phone: \",\r\n                                                        break:1\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:info.phone_number\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:\"Email: \",\r\n                                                        break:1\r\n                                                    }),\r\n                                                    new TextRun({\r\n                                                        text:info.email\r\n                                                    }),\r\n                                        ]\r\n                                    }),\r\n                                ]\r\n                            }),\r\n                            new TableCell({\r\n                                borders:{\r\n                                    right:{\r\n                                        style:BorderStyle.NONE\r\n                                    },\r\n                                    left:{\r\n                                        style:BorderStyle.NONE\r\n                                    },\r\n                                    top:{\r\n                                        style:BorderStyle.NONE\r\n                                    },\r\n                                    bottom:{\r\n                                        style:BorderStyle.NONE\r\n                                    }\r\n                                },\r\n                                width:{\r\n                                    size:5000,\r\n                                    type:WidthType.DXA\r\n                                },\r\n                                children:[\r\n                                    new Paragraph({\r\n                                        children:[\r\n                                            new TextRun({\r\n                                                text:\" \",\r\n                                            }),\r\n                                            new TextRun({\r\n                                                text:\"Site Address: \",\r\n                                                break:1\r\n                                            }),\r\n                                            new TextRun({\r\n                                                text:info.site_address\r\n                                            }),\r\n                                            new TextRun({\r\n                                                text:\"Site City: \",\r\n                                                break:1\r\n                                            }),\r\n                                            new TextRun({\r\n                                                text:info.site_city\r\n                                            })\r\n                                        ],\r\n                                    }),\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]}),\r\n                    new Paragraph({\r\n\r\n                    }),\r\n                    new Table({\r\n                        indent:{\r\n                            size:-500,\r\n                            type:WidthType.DXA\r\n                        },\r\n                        columnWidths:[10000],\r\n                        \r\n                        rows:[\r\n                            new TableRow({\r\n                                 \r\n                                children:[\r\n                                    new TableCell({\r\n                                        width:{\r\n                                            size:10000,\r\n                                            type:WidthType.DXA\r\n                                            },\r\n                                            borders:{\r\n                                                right:{\r\n                                                    style:BorderStyle.NONE\r\n                                                },\r\n                                                left:{\r\n                                                    style:BorderStyle.NONE\r\n                                                },\r\n                                                top:{\r\n                                                    style:BorderStyle.NONE\r\n                                                }\r\n                                            },\r\n                                        children:[\r\n                                            new Paragraph({\r\n                                                text:\"Work Order Products\"\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    }),\r\n                    new Table({\r\n                       width:{\r\n                           size:10000,\r\n                           type:WidthType.DXA\r\n                       },\r\n                        rows: renderDetails(info)\r\n                    }),\r\n                    new Paragraph({\r\n                        break:2\r\n                    }),\r\n                    new Paragraph({\r\n                        text:`Order total: ${info.total}`\r\n                    }),\r\n                    new Paragraph({\r\n                        break:2\r\n                    }),\r\n                    new Paragraph({\r\n                        children:[\r\n                            new TextRun({\r\n                                text:\"Customer Notes: \",\r\n                                break:1\r\n                            }),\r\n                            new TextRun({\r\n                                text:info.customer_notes\r\n                            })\r\n                        ]\r\n                    }),\r\n                ],\r\n            }],\r\n        });\r\n\r\n        const buffer = await Packer.toBuffer(doc);\r\n    const blob = new Blob([buffer], {type: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"});\r\n    const link = document.createElement('a');\r\n    link.href = window.URL.createObjectURL(blob);\r\n    link.download = `Reitzel Insulation - ${info.first_name} ${info.last_name} - ${info.site_address}_Order.docx`;\r\n    link.click();\r\n    return (\r\n        null\r\n    );\r\n}","C:\\Users\\Andrew Miller\\Documents\\Summer Projects\\Reitzel-Insulation-Desktop\\src\\assets\\header.js",[],{"ruleId":"610","replacedBy":"611"},{"ruleId":"612","replacedBy":"613"},{"ruleId":"614","severity":1,"message":"615","line":16,"column":1,"nodeType":"616","endLine":25,"endColumn":3},{"ruleId":"614","severity":1,"message":"615","line":16,"column":1,"nodeType":"616","endLine":25,"endColumn":3},{"ruleId":"614","severity":1,"message":"615","line":10,"column":1,"nodeType":"616","endLine":19,"endColumn":3},{"ruleId":"617","severity":1,"message":"618","line":72,"column":13,"nodeType":"619","endLine":72,"endColumn":73},{"ruleId":"620","severity":1,"message":"621","line":3,"column":18,"nodeType":"622","messageId":"623","endLine":3,"endColumn":23},{"ruleId":"620","severity":1,"message":"624","line":3,"column":25,"nodeType":"622","messageId":"623","endLine":3,"endColumn":32},{"ruleId":"625","severity":1,"message":"626","line":37,"column":28,"nodeType":"627","messageId":"628","endLine":37,"endColumn":29},{"ruleId":"620","severity":1,"message":"629","line":61,"column":7,"nodeType":"622","messageId":"623","endLine":61,"endColumn":17},{"ruleId":"625","severity":1,"message":"626","line":66,"column":18,"nodeType":"627","messageId":"628","endLine":66,"endColumn":19},{"ruleId":"625","severity":1,"message":"626","line":85,"column":18,"nodeType":"627","messageId":"628","endLine":85,"endColumn":19},{"ruleId":"620","severity":1,"message":"630","line":4,"column":7,"nodeType":"622","messageId":"623","endLine":4,"endColumn":14},{"ruleId":"631","severity":1,"message":"632","line":9,"column":17,"nodeType":"619","endLine":9,"endColumn":35},{"ruleId":"620","severity":1,"message":"633","line":6,"column":12,"nodeType":"622","messageId":"623","endLine":6,"endColumn":21},{"ruleId":"634","severity":1,"message":"635","line":22,"column":7,"nodeType":"636","endLine":22,"endColumn":9,"suggestions":"637"},{"ruleId":"620","severity":1,"message":"638","line":6,"column":12,"nodeType":"622","messageId":"623","endLine":6,"endColumn":20},{"ruleId":"634","severity":1,"message":"635","line":22,"column":7,"nodeType":"636","endLine":22,"endColumn":9,"suggestions":"639"},{"ruleId":"620","severity":1,"message":"640","line":1,"column":65,"nodeType":"622","messageId":"623","endLine":1,"endColumn":71},{"ruleId":"620","severity":1,"message":"641","line":46,"column":17,"nodeType":"622","messageId":"623","endLine":46,"endColumn":27},{"ruleId":"634","severity":1,"message":"642","line":82,"column":6,"nodeType":"636","endLine":82,"endColumn":22,"suggestions":"643"},{"ruleId":"644","severity":1,"message":"645","line":92,"column":13,"nodeType":"646","messageId":"647","endLine":92,"endColumn":53,"fix":"648"},{"ruleId":"644","severity":1,"message":"649","line":93,"column":13,"nodeType":"646","messageId":"647","endLine":93,"endColumn":77,"fix":"650"},{"ruleId":"620","severity":1,"message":"651","line":1,"column":10,"nodeType":"622","messageId":"623","endLine":1,"endColumn":14},{"ruleId":"652","severity":1,"message":"653","line":37,"column":39,"nodeType":"627","messageId":"654","endLine":37,"endColumn":41},{"ruleId":"634","severity":1,"message":"655","line":17,"column":5,"nodeType":"636","endLine":17,"endColumn":21,"suggestions":"656"},{"ruleId":"634","severity":1,"message":"655","line":13,"column":5,"nodeType":"636","endLine":13,"endColumn":21,"suggestions":"657"},{"ruleId":"620","severity":1,"message":"658","line":7,"column":17,"nodeType":"622","messageId":"623","endLine":7,"endColumn":31},{"ruleId":"631","severity":1,"message":"632","line":13,"column":17,"nodeType":"619","endLine":13,"endColumn":35},{"ruleId":"620","severity":1,"message":"659","line":2,"column":31,"nodeType":"622","messageId":"623","endLine":2,"endColumn":39},{"ruleId":"660","severity":1,"message":"661","line":10,"column":27,"nodeType":"662","messageId":"663","endLine":10,"endColumn":29},{"ruleId":"652","severity":1,"message":"653","line":40,"column":27,"nodeType":"627","messageId":"654","endLine":40,"endColumn":29},{"ruleId":"620","severity":1,"message":"664","line":11,"column":23,"nodeType":"622","messageId":"623","endLine":11,"endColumn":37},{"ruleId":"620","severity":1,"message":"665","line":16,"column":10,"nodeType":"622","messageId":"623","endLine":16,"endColumn":18},{"ruleId":"634","severity":1,"message":"666","line":19,"column":15,"nodeType":"662","endLine":32,"endColumn":8},{"ruleId":"634","severity":1,"message":"667","line":32,"column":10,"nodeType":"636","endLine":32,"endColumn":28,"suggestions":"668"},{"ruleId":"620","severity":1,"message":"669","line":8,"column":15,"nodeType":"622","messageId":"623","endLine":8,"endColumn":18},{"ruleId":"620","severity":1,"message":"670","line":2,"column":17,"nodeType":"622","messageId":"623","endLine":2,"endColumn":26},{"ruleId":"620","severity":1,"message":"671","line":3,"column":10,"nodeType":"622","messageId":"623","endLine":3,"endColumn":20},{"ruleId":"620","severity":1,"message":"672","line":4,"column":8,"nodeType":"622","messageId":"623","endLine":4,"endColumn":14},{"ruleId":"620","severity":1,"message":"669","line":11,"column":15,"nodeType":"622","messageId":"623","endLine":11,"endColumn":18},{"ruleId":"652","severity":1,"message":"653","line":28,"column":35,"nodeType":"627","messageId":"654","endLine":28,"endColumn":37},{"ruleId":"652","severity":1,"message":"653","line":28,"column":51,"nodeType":"627","messageId":"654","endLine":28,"endColumn":53},{"ruleId":"620","severity":1,"message":"673","line":6,"column":5,"nodeType":"622","messageId":"623","endLine":6,"endColumn":25},{"ruleId":"674","severity":1,"message":"675","line":9,"column":5,"nodeType":"676","messageId":"677","endLine":11,"endColumn":8},{"ruleId":"652","severity":1,"message":"653","line":127,"column":25,"nodeType":"627","messageId":"654","endLine":127,"endColumn":27},{"ruleId":"620","severity":1,"message":"678","line":12,"column":11,"nodeType":"622","messageId":"623","endLine":12,"endColumn":22},{"ruleId":"660","severity":1,"message":"661","line":26,"column":38,"nodeType":"662","messageId":"663","endLine":26,"endColumn":40},{"ruleId":"660","severity":1,"message":"661","line":40,"column":41,"nodeType":"662","messageId":"663","endLine":40,"endColumn":43},{"ruleId":"631","severity":1,"message":"632","line":66,"column":17,"nodeType":"619","endLine":66,"endColumn":35},{"ruleId":"679","severity":1,"message":"680","line":216,"column":9,"nodeType":"619","endLine":219,"endColumn":8},{"ruleId":"620","severity":1,"message":"681","line":4,"column":9,"nodeType":"622","messageId":"623","endLine":4,"endColumn":18},{"ruleId":"634","severity":1,"message":"682","line":60,"column":10,"nodeType":"636","endLine":60,"endColumn":17,"suggestions":"683"},{"ruleId":"620","severity":1,"message":"684","line":139,"column":21,"nodeType":"622","messageId":"623","endLine":139,"endColumn":27},{"ruleId":"652","severity":1,"message":"653","line":163,"column":27,"nodeType":"627","messageId":"654","endLine":163,"endColumn":29},{"ruleId":"660","severity":1,"message":"661","line":170,"column":26,"nodeType":"662","messageId":"663","endLine":170,"endColumn":28},{"ruleId":"620","severity":1,"message":"670","line":1,"column":27,"nodeType":"622","messageId":"623","endLine":1,"endColumn":36},{"ruleId":"620","severity":1,"message":"685","line":8,"column":23,"nodeType":"622","messageId":"623","endLine":8,"endColumn":37},{"ruleId":"652","severity":1,"message":"653","line":12,"column":56,"nodeType":"627","messageId":"654","endLine":12,"endColumn":58},{"ruleId":"634","severity":1,"message":"686","line":46,"column":9,"nodeType":"636","endLine":46,"endColumn":21,"suggestions":"687"},{"ruleId":"620","severity":1,"message":"688","line":7,"column":10,"nodeType":"622","messageId":"623","endLine":7,"endColumn":13},{"ruleId":"620","severity":1,"message":"689","line":11,"column":11,"nodeType":"622","messageId":"623","endLine":11,"endColumn":17},{"ruleId":"634","severity":1,"message":"690","line":40,"column":10,"nodeType":"636","endLine":40,"endColumn":12,"suggestions":"691"},{"ruleId":"625","severity":1,"message":"626","line":127,"column":35,"nodeType":"627","messageId":"628","endLine":127,"endColumn":36},{"ruleId":"634","severity":1,"message":"666","line":29,"column":15,"nodeType":"662","endLine":55,"endColumn":6},{"ruleId":"634","severity":1,"message":"692","line":55,"column":8,"nodeType":"636","endLine":55,"endColumn":10,"suggestions":"693"},{"ruleId":"652","severity":1,"message":"653","line":115,"column":26,"nodeType":"627","messageId":"654","endLine":115,"endColumn":28},{"ruleId":"634","severity":1,"message":"694","line":38,"column":11,"nodeType":"636","endLine":38,"endColumn":13,"suggestions":"695"},{"ruleId":"660","severity":1,"message":"661","line":215,"column":39,"nodeType":"662","messageId":"663","endLine":215,"endColumn":41},{"ruleId":"652","severity":1,"message":"653","line":218,"column":17,"nodeType":"627","messageId":"654","endLine":218,"endColumn":19},{"ruleId":"620","severity":1,"message":"696","line":15,"column":23,"nodeType":"622","messageId":"623","endLine":15,"endColumn":35},{"ruleId":"620","severity":1,"message":"697","line":16,"column":12,"nodeType":"622","messageId":"623","endLine":16,"endColumn":23},{"ruleId":"620","severity":1,"message":"698","line":17,"column":12,"nodeType":"622","messageId":"623","endLine":17,"endColumn":23},{"ruleId":"634","severity":1,"message":"699","line":43,"column":11,"nodeType":"636","endLine":43,"endColumn":13,"suggestions":"700"},{"ruleId":"652","severity":1,"message":"653","line":283,"column":17,"nodeType":"627","messageId":"654","endLine":283,"endColumn":19},{"ruleId":"660","severity":1,"message":"661","line":327,"column":39,"nodeType":"662","messageId":"663","endLine":327,"endColumn":41},{"ruleId":"660","severity":1,"message":"661","line":346,"column":40,"nodeType":"662","messageId":"663","endLine":346,"endColumn":42},{"ruleId":"620","severity":1,"message":"701","line":2,"column":45,"nodeType":"622","messageId":"623","endLine":2,"endColumn":50},{"ruleId":"620","severity":1,"message":"624","line":2,"column":61,"nodeType":"622","messageId":"623","endLine":2,"endColumn":68},{"ruleId":"634","severity":1,"message":"690","line":42,"column":9,"nodeType":"636","endLine":42,"endColumn":11,"suggestions":"702"},{"ruleId":"620","severity":1,"message":"703","line":53,"column":11,"nodeType":"622","messageId":"623","endLine":53,"endColumn":25},{"ruleId":"620","severity":1,"message":"704","line":90,"column":11,"nodeType":"622","messageId":"623","endLine":90,"endColumn":24},{"ruleId":"660","severity":1,"message":"661","line":76,"column":29,"nodeType":"662","messageId":"663","endLine":76,"endColumn":31},{"ruleId":"660","severity":1,"message":"661","line":77,"column":34,"nodeType":"662","messageId":"663","endLine":77,"endColumn":36},{"ruleId":"634","severity":1,"message":"705","line":90,"column":7,"nodeType":"706","endLine":94,"endColumn":9},{"ruleId":"620","severity":1,"message":"707","line":100,"column":10,"nodeType":"622","messageId":"623","endLine":100,"endColumn":19},{"ruleId":"679","severity":1,"message":"680","line":204,"column":7,"nodeType":"619","endLine":207,"endColumn":8},{"ruleId":"634","severity":1,"message":"708","line":23,"column":9,"nodeType":"706","endLine":23,"endColumn":111},{"ruleId":"634","severity":1,"message":"666","line":40,"column":15,"nodeType":"662","endLine":60,"endColumn":10},{"ruleId":"652","severity":1,"message":"653","line":108,"column":65,"nodeType":"627","messageId":"654","endLine":108,"endColumn":67},{"ruleId":"660","severity":1,"message":"661","line":176,"column":33,"nodeType":"662","messageId":"663","endLine":176,"endColumn":35},{"ruleId":"660","severity":1,"message":"661","line":177,"column":40,"nodeType":"662","messageId":"663","endLine":177,"endColumn":42},{"ruleId":"660","severity":1,"message":"661","line":184,"column":37,"nodeType":"662","messageId":"663","endLine":184,"endColumn":39},{"ruleId":"660","severity":1,"message":"661","line":185,"column":44,"nodeType":"662","messageId":"663","endLine":185,"endColumn":46},{"ruleId":"652","severity":1,"message":"653","line":286,"column":17,"nodeType":"627","messageId":"654","endLine":286,"endColumn":19},{"ruleId":"660","severity":1,"message":"661","line":300,"column":47,"nodeType":"662","messageId":"663","endLine":300,"endColumn":49},{"ruleId":"660","severity":1,"message":"661","line":335,"column":39,"nodeType":"662","messageId":"663","endLine":335,"endColumn":41},{"ruleId":"660","severity":1,"message":"661","line":344,"column":27,"nodeType":"662","messageId":"663","endLine":344,"endColumn":29},{"ruleId":"660","severity":1,"message":"661","line":355,"column":40,"nodeType":"662","messageId":"663","endLine":355,"endColumn":42},{"ruleId":"660","severity":1,"message":"661","line":367,"column":39,"nodeType":"662","messageId":"663","endLine":367,"endColumn":41},{"ruleId":"620","severity":1,"message":"709","line":5,"column":9,"nodeType":"622","messageId":"623","endLine":5,"endColumn":20},{"ruleId":"620","severity":1,"message":"685","line":5,"column":22,"nodeType":"622","messageId":"623","endLine":5,"endColumn":36},{"ruleId":"660","severity":1,"message":"661","line":20,"column":31,"nodeType":"662","messageId":"663","endLine":20,"endColumn":33},{"ruleId":"652","severity":1,"message":"653","line":112,"column":19,"nodeType":"627","messageId":"654","endLine":112,"endColumn":21},{"ruleId":"620","severity":1,"message":"710","line":2,"column":17,"nodeType":"622","messageId":"623","endLine":2,"endColumn":25},{"ruleId":"660","severity":1,"message":"661","line":12,"column":33,"nodeType":"662","messageId":"663","endLine":12,"endColumn":35},{"ruleId":"620","severity":1,"message":"711","line":2,"column":8,"nodeType":"622","messageId":"623","endLine":2,"endColumn":14},{"ruleId":"620","severity":1,"message":"712","line":3,"column":7,"nodeType":"622","messageId":"623","endLine":3,"endColumn":11},{"ruleId":"634","severity":1,"message":"655","line":22,"column":5,"nodeType":"636","endLine":22,"endColumn":21,"suggestions":"713"},{"ruleId":"631","severity":1,"message":"632","line":20,"column":17,"nodeType":"619","endLine":20,"endColumn":35},{"ruleId":"631","severity":1,"message":"632","line":14,"column":13,"nodeType":"619","endLine":14,"endColumn":31},{"ruleId":"620","severity":1,"message":"714","line":3,"column":10,"nodeType":"622","messageId":"623","endLine":3,"endColumn":24},{"ruleId":"660","severity":1,"message":"661","line":15,"column":29,"nodeType":"662","messageId":"663","endLine":15,"endColumn":31},{"ruleId":"660","severity":1,"message":"661","line":46,"column":26,"nodeType":"662","messageId":"663","endLine":46,"endColumn":28},{"ruleId":"660","severity":1,"message":"661","line":78,"column":25,"nodeType":"662","messageId":"663","endLine":78,"endColumn":27},{"ruleId":"620","severity":1,"message":"715","line":3,"column":7,"nodeType":"622","messageId":"623","endLine":3,"endColumn":11},{"ruleId":"631","severity":1,"message":"632","line":9,"column":7,"nodeType":"619","endLine":9,"endColumn":25},{"ruleId":"620","severity":1,"message":"716","line":1,"column":10,"nodeType":"622","messageId":"623","endLine":1,"endColumn":16},{"ruleId":"631","severity":1,"message":"632","line":24,"column":9,"nodeType":"619","endLine":24,"endColumn":25},{"ruleId":"631","severity":1,"message":"632","line":25,"column":9,"nodeType":"619","endLine":25,"endColumn":28},{"ruleId":"631","severity":1,"message":"632","line":26,"column":9,"nodeType":"619","endLine":26,"endColumn":27},{"ruleId":"620","severity":1,"message":"717","line":3,"column":18,"nodeType":"622","messageId":"623","endLine":3,"endColumn":22},{"ruleId":"620","severity":1,"message":"718","line":3,"column":24,"nodeType":"622","messageId":"623","endLine":3,"endColumn":29},{"ruleId":"620","severity":1,"message":"719","line":3,"column":31,"nodeType":"622","messageId":"623","endLine":3,"endColumn":39},{"ruleId":"620","severity":1,"message":"624","line":5,"column":9,"nodeType":"622","messageId":"623","endLine":5,"endColumn":16},{"ruleId":"620","severity":1,"message":"720","line":13,"column":10,"nodeType":"622","messageId":"623","endLine":13,"endColumn":17},{"ruleId":"620","severity":1,"message":"721","line":14,"column":10,"nodeType":"622","messageId":"623","endLine":14,"endColumn":14},{"ruleId":"620","severity":1,"message":"722","line":14,"column":16,"nodeType":"622","messageId":"623","endLine":14,"endColumn":23},{"ruleId":"634","severity":1,"message":"655","line":21,"column":5,"nodeType":"636","endLine":21,"endColumn":21,"suggestions":"723"},{"ruleId":"620","severity":1,"message":"712","line":3,"column":7,"nodeType":"622","messageId":"623","endLine":3,"endColumn":11},{"ruleId":"620","severity":1,"message":"724","line":5,"column":5,"nodeType":"622","messageId":"623","endLine":5,"endColumn":15},"no-native-reassign",["725"],"no-negated-in-lhs",["726"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'message' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'renderItem' is assigned a value but never used.","'testURL' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'quoteInfo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getDetailsByID' and 'props.id'. Either include them or remove the dependency array.","ArrayExpression",["727"],"'workInfo' is assigned a value but never used.",["728"],"'Switch' is defined but never used.","'newAddress' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'salesmen'. Either include it or remove the dependency array.",["729"],"no-useless-computed-key","Unnecessarily computed property [\"selectedDate\"] found.","Property","unnecessarilyComputedProperty",{"range":"730","text":"731"},"Unnecessarily computed property [\"salesman\"] found.",{"range":"732","text":"733"},"'Card' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","React Hook useEffect has a missing dependency: 'data.AddressID'. Either include it or remove the dependency array.",["734"],["735"],"'utcToZonedTime' is assigned a value but never used.","'invoices' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'setaddressinfo' is assigned a value but never used.","'formData' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'createTable', 'match', and 'testData'. Either include them or remove the dependency array.",["736"],"'url' is assigned a value but never used.","'useEffect' is defined but never used.","'useEncrypt' is defined but never used.","'Search' is assigned a value but never used.","'ShoppingCartOutlined' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'currentDate' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'getRegion' is defined but never used.","React Hook useEffect has missing dependencies: 'getAddressList' and 'match'. Either include them or remove the dependency array.",["737"],"'result' is assigned a value but never used.","'setQuoteDataId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["738"],"'set' is defined but never used.","'select' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'testData'. Either include it or remove the dependency array.",["739"],"React Hook useEffect has missing dependencies: 'createDetails', 'quoteData', 'quoteID', 'setDetailData', and 'setProdData'. Either include them or remove the dependency array.",["740"],"React Hook useEffect has missing dependencies: 'counter', 'props.quoteFormData', and 'setText'. Either include them or remove the dependency array. You can also do a functional update 'setcounter(c => ...)' if you only need 'counter' in the 'setcounter' call.",["741"],"'setQuoteData' is assigned a value but never used.","'quoteDetail' is assigned a value but never used.","'productList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'counter', 'createDetails', 'quoteID', 'setAllData', and 'setText'. Either include them or remove the dependency array. You can also do a functional update 'setcounter(c => ...)' if you only need 'counter' in the 'setcounter' call.",["742"],"'Space' is defined but never used.",["743"],"'getDetailsByID' is assigned a value but never used.","'renderDetails' is assigned a value but never used.","The 'selectedQuote' conditional could make the dependencies of useEffect Hook (at line 104) change on every render. To fix this, wrap the initialization of 'selectedQuote' in its own useMemo() Hook.","VariableDeclarator","'quoteData' is assigned a value but never used.","The 'selectedQuote' conditional could make the dependencies of useEffect Hook (at line 60) change on every render. To fix this, wrap the initialization of 'selectedQuote' in its own useMemo() Hook.","'quoteDataId' is assigned a value but never used.","'useState' is defined but never used.","'format' is defined but never used.","'docx' is assigned a value but never used.",["744"],"'getElementInfo' is defined but never used.","'logo' is assigned a value but never used.","'Center' is defined but never used.","'Form' is defined but never used.","'Popup' is defined but never used.","'TextArea' is defined but never used.","'showPop' is assigned a value but never used.","'info' is assigned a value but never used.","'setInfo' is assigned a value but never used.",["745"],"'formatDate' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"746","fix":"747"},{"desc":"746","fix":"748"},{"desc":"749","fix":"750"},[2982,2998],"\"selectedDate\"",[3037,3049],"\"salesman\"",{"desc":"751","fix":"752"},{"desc":"751","fix":"753"},{"desc":"754","fix":"755"},{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"760","fix":"768"},{"desc":"751","fix":"769"},{"desc":"751","fix":"770"},"Update the dependencies array to be: [getDetailsByID, props.id]",{"range":"771","text":"772"},{"range":"773","text":"772"},"Update the dependencies array to be: [salesmen, selectCustomer]",{"range":"774","text":"775"},"Update the dependencies array to be: [address.length, data.AddressID]",{"range":"776","text":"777"},{"range":"778","text":"777"},"Update the dependencies array to be: [createTable, match, tableData.length, testData]",{"range":"779","text":"780"},"Update the dependencies array to be: [count, getAddressList, match]",{"range":"781","text":"782"},"Update the dependencies array to be: [form, props.data]",{"range":"783","text":"784"},"Update the dependencies array to be: [testData]",{"range":"785","text":"786"},"Update the dependencies array to be: [createDetails, quoteData, quoteID, setDetailData, setProdData]",{"range":"787","text":"788"},"Update the dependencies array to be: [counter, props.quoteFormData, setText]",{"range":"789","text":"790"},"Update the dependencies array to be: [counter, createDetails, quoteID, setAllData, setText]",{"range":"791","text":"792"},{"range":"793","text":"786"},{"range":"794","text":"777"},{"range":"795","text":"777"},[810,812],"[getDetailsByID, props.id]",[825,827],[2691,2707],"[salesmen, selectCustomer]",[461,477],"[address.length, data.AddressID]",[409,425],[1086,1104],"[createTable, match, tableData.length, testData]",[2329,2336],"[count, getAddressList, match]",[1661,1673],"[form, props.data]",[1375,1377],"[testData]",[2073,2075],"[createDetails, quoteData, quoteID, setDetailData, setProdData]",[1209,1211],"[counter, props.quoteFormData, setText]",[1772,1774],"[counter, createDetails, quoteID, setAllData, setText]",[1484,1486],[803,819],[719,735]]
[{"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\index.js":"1","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\App.js":"2","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\redux\\store.js":"3","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\redux\\reducers\\quoteOneReducer.js":"4","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\admin\\index.js":"5","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\login\\index.js":"6","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\util\\storage.js":"7","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\index.js":"8","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\leftnav\\index.js":"9","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\head\\index.js":"10","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\searchbar\\index.js":"11","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\base.js":"12","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\main\\index.js":"13","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\test_quote.js":"14","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\avatar\\index.js":"15","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\linkbutton\\index.js":"16","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\index.js":"17","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\addressInfo\\index.js":"18","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\newcustomer\\index.js":"19","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\newestimate\\index.js":"20","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\customerInfo\\index.js":"21","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\roles\\index.js":"22","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\users\\index.js":"23","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\trucks\\index.js":"24","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\customers\\index.js":"25","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\invoices\\index.js":"26","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\index.js":"27","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\index.js":"28","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\SalesmanTemplate.js":"29","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\Template.js":"30","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\neworder.js":"31","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\quoteEditAPI.js":"32","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\addresses.js":"33","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\confirmation.js":"34","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\calendar.js":"35","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\customer.js":"36","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesSnapshot.js":"37","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\trucks.js":"38","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesCalendar.js":"39","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tabs.js":"40","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesTooltip.js":"41","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Legend.js":"42","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesTemplate.js":"43","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillCalendar.js":"44","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\FoamCalendar.js":"45","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\updateConfirm.js":"46","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesData.js":"47","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\FoamTemplate.js":"48","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillTemplate.js":"49","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tab.js":"50","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\foamData.js":"51","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\fillData.js":"52","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuotePrint.js":"53","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteEdit.js":"54","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteList.js":"55","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuoteOne.js":"56","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\FormOne.js":"57","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteData.js":"58","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\CustomSelect.js":"59","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\quote_template.js":"60","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\Button.js":"61","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\hooks\\input-hook.js":"62","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\quotes.js":"63","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\footer\\index.js":"64","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\headforquote\\index.js":"65","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderPreview.js":"66","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderList.js":"67","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\newOrder.js":"68","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\orders.js":"69","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\menucreate.js":"70","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\leftnavitems.js":"71","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\encryption.js":"72","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\checks.js":"73","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\leftnav.js":"74","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesToolSnap.js":"75","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\assets\\paths.js":"76"},{"size":397,"mtime":1626366420947,"results":"77","hashOfConfig":"78"},{"size":394,"mtime":1626366420911,"results":"79","hashOfConfig":"78"},{"size":278,"mtime":1626366420965,"results":"80","hashOfConfig":"78"},{"size":814,"mtime":1626366420965,"results":"81","hashOfConfig":"78"},{"size":1561,"mtime":1626366420931,"results":"82","hashOfConfig":"78"},{"size":2188,"mtime":1629744733766,"results":"83","hashOfConfig":"78"},{"size":503,"mtime":1629744263402,"results":"84","hashOfConfig":"78"},{"size":4606,"mtime":1629750640242,"results":"85","hashOfConfig":"78"},{"size":1517,"mtime":1629904766435,"results":"86","hashOfConfig":"78"},{"size":2130,"mtime":1629749393241,"results":"87","hashOfConfig":"78"},{"size":882,"mtime":1630508868004,"results":"88","hashOfConfig":"78"},{"size":1463,"mtime":1629755892287,"results":"89","hashOfConfig":"78"},{"size":1691,"mtime":1629387123216,"results":"90","hashOfConfig":"78"},{"size":2555,"mtime":1626366420940,"results":"91","hashOfConfig":"78"},{"size":1670,"mtime":1626366420932,"results":"92","hashOfConfig":"78"},{"size":165,"mtime":1626366420955,"results":"93","hashOfConfig":"78"},{"size":1490,"mtime":1627499527802,"results":"94","hashOfConfig":"78"},{"size":4387,"mtime":1626366420948,"results":"95","hashOfConfig":"78"},{"size":5139,"mtime":1629991910853,"results":"96","hashOfConfig":"78"},{"size":10805,"mtime":1630522594386,"results":"97","hashOfConfig":"78"},{"size":15752,"mtime":1629910297458,"results":"98","hashOfConfig":"78"},{"size":5785,"mtime":1629751002205,"results":"99","hashOfConfig":"78"},{"size":10630,"mtime":1629998913908,"results":"100","hashOfConfig":"78"},{"size":5107,"mtime":1629387123223,"results":"101","hashOfConfig":"78"},{"size":2441,"mtime":1631203442761,"results":"102","hashOfConfig":"78"},{"size":102,"mtime":1626366420954,"results":"103","hashOfConfig":"78"},{"size":375,"mtime":1626366420953,"results":"104","hashOfConfig":"78"},{"size":2343,"mtime":1629903595266,"results":"105","hashOfConfig":"78"},{"size":4410,"mtime":1626366420952,"results":"106","hashOfConfig":"78"},{"size":870,"mtime":1626366420953,"results":"107","hashOfConfig":"78"},{"size":2338,"mtime":1626969947617,"results":"108","hashOfConfig":"78"},{"size":6225,"mtime":1627333600500,"results":"109","hashOfConfig":"78"},{"size":1280,"mtime":1630006224041,"results":"110","hashOfConfig":"78"},{"size":1649,"mtime":1630523734662,"results":"111","hashOfConfig":"78"},{"size":6243,"mtime":1631127229283,"results":"112","hashOfConfig":"78"},{"size":4513,"mtime":1626366420918,"results":"113","hashOfConfig":"78"},{"size":4392,"mtime":1631725546210,"results":"114","hashOfConfig":"78"},{"size":1356,"mtime":1629387123216,"results":"115","hashOfConfig":"78"},{"size":18380,"mtime":1631725474967,"results":"116","hashOfConfig":"78"},{"size":1461,"mtime":1626366420946,"results":"117","hashOfConfig":"78"},{"size":3124,"mtime":1630353735151,"results":"118","hashOfConfig":"78"},{"size":1624,"mtime":1626366420914,"results":"119","hashOfConfig":"78"},{"size":228,"mtime":1630510004323,"results":"120","hashOfConfig":"78"},{"size":9692,"mtime":1630510366607,"results":"121","hashOfConfig":"78"},{"size":1114,"mtime":1626366420943,"results":"122","hashOfConfig":"78"},{"size":1536,"mtime":1630514971885,"results":"123","hashOfConfig":"78"},{"size":1805,"mtime":1626366420945,"results":"124","hashOfConfig":"78"},{"size":606,"mtime":1626366420943,"results":"125","hashOfConfig":"78"},{"size":616,"mtime":1626366420941,"results":"126","hashOfConfig":"78"},{"size":843,"mtime":1626366420945,"results":"127","hashOfConfig":"78"},{"size":1404,"mtime":1626366420943,"results":"128","hashOfConfig":"78"},{"size":1410,"mtime":1626366420942,"results":"129","hashOfConfig":"78"},{"size":5781,"mtime":1629387123220,"results":"130","hashOfConfig":"78"},{"size":19743,"mtime":1629391474167,"results":"131","hashOfConfig":"78"},{"size":7720,"mtime":1629387123222,"results":"132","hashOfConfig":"78"},{"size":20666,"mtime":1629387123220,"results":"133","hashOfConfig":"78"},{"size":887,"mtime":1629387123219,"results":"134","hashOfConfig":"78"},{"size":2846,"mtime":1626366420961,"results":"135","hashOfConfig":"78"},{"size":708,"mtime":1626366420935,"results":"136","hashOfConfig":"78"},{"size":2876,"mtime":1626366420940,"results":"137","hashOfConfig":"78"},{"size":360,"mtime":1626366420935,"results":"138","hashOfConfig":"78"},{"size":428,"mtime":1626366420947,"results":"139","hashOfConfig":"78"},{"size":3451,"mtime":1629387123215,"results":"140","hashOfConfig":"78"},{"size":1047,"mtime":1626366420951,"results":"141","hashOfConfig":"78"},{"size":304,"mtime":1626366420952,"results":"142","hashOfConfig":"78"},{"size":8787,"mtime":1628097459554,"results":"143","hashOfConfig":"78"},{"size":7746,"mtime":1627328755691,"results":"144","hashOfConfig":"78"},{"size":7557,"mtime":1629387123218,"results":"145","hashOfConfig":"78"},{"size":1487,"mtime":1629387123214,"results":"146","hashOfConfig":"78"},{"size":1273,"mtime":1629748428924,"results":"147","hashOfConfig":"78"},{"size":1565,"mtime":1629742813424,"results":"148","hashOfConfig":"78"},{"size":341,"mtime":1629755072998,"results":"149","hashOfConfig":"78"},{"size":274,"mtime":1629909880364,"results":"150","hashOfConfig":"78"},{"size":2365,"mtime":1629387123217,"results":"151","hashOfConfig":"78"},{"size":860,"mtime":1630510155273,"results":"152","hashOfConfig":"78"},{"size":178,"mtime":1630521564213,"results":"153","hashOfConfig":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},"i4azzc",{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"156"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"156"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"156"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"156"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"156"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"156"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"156"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"156"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"156"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"156"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"156"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"156"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"156"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"156"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"156"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"156"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"156"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"156"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"156"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"156"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"156"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"156"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"156"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"156"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"156"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"279"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"279"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"156"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":66,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"156"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"156"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"156"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"156"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"156"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"156"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"156"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"156"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"156"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"156"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"156"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"156"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"156"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"156"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"156"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"344"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"156"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\index.js",[],["352","353"],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\App.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\redux\\store.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\redux\\reducers\\quoteOneReducer.js",["354"],"\r\nconst intialState = {\r\n    \"quote_selected\": null,\r\n    \"quote_one\":{\r\n        first_name: \"\",\r\n        last_name: \"\",\r\n        billing_address: \"\",\r\n        city: \"\",\r\n        post_code: \"\",\r\n        phone_number: \"\",\r\n        email: \"\",\r\n        customer_notes: \"\",\r\n        installer_notes: \"\",\r\n        salesman: \"\",\r\n        products: [{\r\n            name: null,\r\n            option: null,\r\n            price: 0.00\r\n        }]\r\n    },\r\n}\r\n\r\n\r\nexport default (state = intialState, action) => {\r\n    switch (action.type) {\r\n        case \"quote_selected\":\r\n            return {\r\n                quote_selected: action.payload,\r\n            };\r\n        case \"quote_one\":\r\n            return {\r\n                quote_one: action.payloadq,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\admin\\index.js",["355","356"],"import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Layout } from \"antd\";\r\nimport Main from \"../main\";\r\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\r\nimport \"./index.css\";\r\nimport Leftnav from \"../leftnav\";\r\nimport Head from \"../head\";\r\nimport { getUser } from \"../../util/storage\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport Searchbar from \"../searchbar\";\r\nimport { datas } from \"../../api/index\";\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nexport default class Homepage extends React.Component {\r\n  state = {\r\n    user: \"\",\r\n  };\r\n  componentDidMount = async () => {\r\n    const user = await getUser();\r\n    this.setState({ user });\r\n  };\r\n  render() {\r\n    const { user } = this.state;\r\n    const SecurityLevel =\r\n      (this.state.user && this.state.user.SecurityLevel) || \"\";\r\n    const FirstName = (this.state.user && this.state.user.FirstName) || \"\";\r\n    if (!getUser()) return <Redirect to=\"/login\" />;\r\n    return (\r\n      <Layout className=\"layout\">\r\n        <Sider>\r\n          <Leftnav role={SecurityLevel} imgUrl={datas.user[0].imgUrl}></Leftnav>\r\n        </Sider>\r\n        <Layout className=\"main-layout\">\r\n          <Header className=\"header\">\r\n            <Head username={FirstName} />\r\n          </Header>\r\n\r\n          <Content className=\"content\">\r\n            <Searchbar />\r\n            <Main />\r\n          </Content>\r\n          <Footer style={{ textAlign: \"center\" }}>\r\n            ©2021 Created by Team Explorers\r\n          </Footer>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\login\\index.js",["357"],"import React, { useState } from \"react\";\r\nimport { Button, Form, Input, message } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport \"./index.css\";\r\nimport { getLogin, reqWeather, getMenuData } from \"../../api/index\";\r\nimport { setUser, getUser, setMenu } from \"../../util/storage\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst { Item } = Form;\r\nexport default function Login(props) {\r\n  const handleSubmit = async (values) => {\r\n    const { loginId, loginPwd } = values;\r\n    const result = await getLogin(loginId, loginPwd);\r\n    reqWeather(\"toronto\");\r\n    if (result.data && result.data.length > 0) {\r\n      let menuData = await getMenuData(result.data[0]);\r\n      setUser(result.data[0]);\r\n      setMenu(menuData.data[0]);\r\n      props.history.replace(\"/\");\r\n      message.success(\"Login Success!\");\r\n    } else {\r\n      message.info(\"Username or Password not correct!\");\r\n    }\r\n  };\r\n  if (getUser()) return <Redirect to=\"/\" />;\r\n  return (\r\n    <div className=\"login_page\">\r\n      <div className=\"login\">\r\n        <h2>Login</h2>\r\n        <Form onFinish={handleSubmit} autoComplete=\"off\">\r\n          <Item\r\n            name=\"loginId\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Cannot be Empty\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              style={{ backgroundColor: \"transparent\" }}\r\n              prefix={<UserOutlined />}\r\n              placeholder=\"username\"\r\n            />\r\n          </Item>\r\n          <Item\r\n            name=\"loginPwd\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Cannot be Empty\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input.Password prefix={<LockOutlined />} placeholder=\"password\" />\r\n          </Item>\r\n          <Item className=\"login_button\">\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              shape=\"round\"\r\n              size=\"large\"\r\n              block\r\n            >\r\n              Login\r\n            </Button>\r\n          </Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\util\\storage.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\leftnav\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\head\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\searchbar\\index.js",["358","359"],"import React, { useState } from \"react\";\r\nimport { Input, Radio, message, Button, Space, } from \"antd\";\r\nimport \"./index.css\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst { Search } = Input;\r\nfunction Searchbar(props) {\r\n  \r\n  const onSearch = (value) => {\r\n    message.success(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"content-searchbar\">\r\n      <Search\r\n        allowClear\r\n        className=\"searchbar\"\r\n        placeholder=\"Search\"\r\n        onSearch={onSearch}\r\n        enterButton\r\n      />\r\n      <Space>\r\n         <Button\r\n         onClick={() => {\r\n          props.history.push('/newcustomer');\r\n         }}>\r\n        New Customer\r\n      </Button>\r\n      <Button\r\n      onClick={() => {\r\n        props.history.push('/newestimate')\r\n      }}>\r\n        New Estimate\r\n      </Button>\r\n      </Space>\r\n    </div>\r\n  );\r\n}\r\nexport default withRouter(Searchbar);\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\base.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\main\\index.js",["360"],"import React from \"react\";\r\nimport { Switch, Redirect, Route } from \"react-router-dom\";\r\nimport Home from \"../../pages/home\";\r\nimport Quotes from \"../../pages/quotes\";\r\nimport Orders from \"../../pages/orders\";\r\nimport Invoices from \"../../pages/invoices\";\r\nimport Customers from \"../../pages/customers\";\r\nimport Users from \"../../pages/users\";\r\nimport Roles from \"../../pages/roles\";\r\nimport Trucks from \"../../pages/trucks\";\r\nimport CustomerInfo from \"../../pages/customerInfo\";\r\nimport AddressInfo from \"../../pages/addressInfo\";\r\nimport NewCusomter from \"../../pages/newcustomer\";\r\nimport NewEstimate from \"../../pages/newestimate\";\r\nimport \"./index.css\";\r\nimport QuoteTemplate from \"../../Components/Email_Templates/test_quote\";\r\n\r\nconst id = 0;\r\nexport default function Main() {\r\n  return (\r\n    <div className=\"content-main\">\r\n      <Switch>\r\n        <Route path=\"/home\" component={Home} />\r\n        <Route path=\"/quotes\" component={Quotes} />\r\n        <Route path=\"/orders\" component={Orders} />\r\n        <Route path=\"/invoices\" component={Invoices} />\r\n        <Route path=\"/customers\" component={Customers} />\r\n        <Route path=\"/users\" component={Users} />\r\n        <Route path=\"/roles\" component={Roles} />\r\n        <Route path=\"/trucks\" component={Trucks} />\r\n        <Route path=\"/customerinfo/:customer\" component={CustomerInfo} />\r\n        <Route path=\"/addressinfo/:address\" component={AddressInfo} />\r\n        <Route path=\"/newcustomer\" component={NewCusomter} />\r\n        <Route path=\"/newestimate\" component={NewEstimate} />\r\n        <Route path=\"/testquote\" component={QuoteTemplate} />\r\n        <Redirect to=\"/home\"></Redirect>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\test_quote.js",["361"],"import { findProps } from 'devextreme-react/core/template';\r\nimport React from 'react';\r\nimport QuoteEmailTemplate from './quote_template';\r\n\r\n\r\nclass QuoteTemplate extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            showEmail:false,\r\n            customer:{\r\n                firstName:\"Andrew\",\r\n                lastName:\"Miller\",\r\n                address:\"453\",\r\n                city:\"calgary\",\r\n                postalCode:\"code\"\r\n            },\r\n            siteAddress:{\r\n\r\n            },\r\n            quoteinfo:{\r\n\r\n            }\r\n\r\n\r\n    }\r\n        this.getCustomerInfo = this.getCustomerInfo.bind(this);\r\n        this.displayCustomerInfo = this.displayCustomerInfo.bind(this);\r\n        this.turnToEmail = this.turnToEmail.bind(this);\r\n        this.handleChange = this.handleChangeCustomer.bind(this);\r\n\r\n    }\r\n    getCustomerInfo(){\r\n        return this.state.customer;\r\n    }\r\n    displayCustomerInfo(){\r\n        console.log(this.state.customer)\r\n    }\r\n     turnToEmail(){\r\n        \r\n        this.setState({showEmail:true})\r\n    }\r\n     handleChangeCustomer(event){\r\n        const { target: { name, value } } = event\r\n         this.setState(prevState => ({customer:{ ...prevState.customer,[name]:value}}))\r\n     }\r\n    render(){\r\n        return(\r\n            <div id='template'>\r\n            \r\n                    <div>\r\n                        First Name:<input id='firstName' name=\"firstName\" type='text' value={this.state.customer.firstName} onChange={e =>{this.handleChangeCustomer(e)}} />\r\n                        Last Name:<input id='lastName' name=\"lastName\" type='text' value={this.state.customer.lastName} onChange={e =>{this.handleChangeCustomer(e)}} />\r\n                        Address:<input id='address' name=\"address\" type='text' value={this.state.customer.address} onChange={e =>{this.handleChangeCustomer(e)}} />\r\n                        City:<input id='city' name=\"city\" type='text' value={this.state.customer.city} onChange={e =>{this.handleChangeCustomer(e)}} />\r\n                        Postal Code:<input id='postalCode' name=\"postalCode\" type='text' value={this.state.customer.postalCode} onChange={e =>{this.handleChangeCustomer(e)}} />\r\n                    </div>\r\n                <div>\r\n                    <button onClick={this.turnToEmail}>Click Me </button> \r\n                    {this.state.showEmail ? <QuoteEmailTemplate info = {this.state.customer} /> : null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuoteTemplate;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\avatar\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\linkbutton\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\index.js",["362","363"],"import { Route, Switch,  Link, useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport React, {useState} from \"react\";\r\nimport OrderList from \"../orders/orderList\";\r\nimport NewOrder from \"./newOrder\";\r\nimport OrderPreview from './orderPreview';\r\nimport { Button, Space } from \"antd\";\r\nimport \"./index.css\";\r\n\r\nexport default function Orders() {\r\n  let { path, url } = useRouteMatch();\r\n  let history = useHistory();\r\n\r\n const [orderData, setOrderData] = useState({});\r\n\r\n function updateOrderData(values) {\r\n  if (!(values == null || values  == \"\" || values == undefined)) {\r\n    setOrderData(values);\r\n    history.push(`${url}/preview`);\r\n}else{\r\n    setOrderData({});\r\n}\r\n } \r\n  \r\n  return (\r\n    <div style={{padding: \"10px\", margin: \"10px\"}}>\r\n      <div>\r\n        <h2> Orders<Space style={{float:\"right\"}}><Link to=\"/orders/orderList\" ><Button>View All Work Orders</Button></Link>  <Link to=\"/quotes\"><Button> New Work Order</Button></Link></Space></h2>\r\n      </div> \r\n      <hr/>\r\n      <Switch>\r\n        <Route exact path={path} >\r\n          \r\n          </Route>\r\n        <Route path=\"/orders/:oid/new\" >\r\n          <NewOrder updateOrder = {updateOrderData} />\r\n        </Route>\r\n        <Route path=\"/orders/:oid/edit\" >\r\n\r\n        </Route>\r\n        <Route path=\"/orders/orderList\">\r\n          <OrderList/>\r\n        </Route>\r\n        <Route path='/orders/preview'>\r\n          <OrderPreview orderInfo = {orderData} />\r\n        </Route>\r\n      </Switch>\r\n      </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\addressInfo\\index.js",["364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383"],"import React, {useEffect, setState, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Form, Input, message, Select } from \"antd\";\r\nimport {getQuotes, getAddress, getUser, } from '../../api/addresses';\r\nimport { useHistory, useRouteMatch, Route, Switch } from \"react-router-dom\";\r\nimport {getAllInfo} from \"../../api/quoteEditAPI\";\r\nconst { Item } = Form;\r\nconst { confirm } = Modal;\r\nconst { Option } = Select;\r\nconst {format } = require('date-fns-tz')\r\n\r\nexport default function AddressInfo() {\r\n \r\n  let history = useHistory();\r\n  let match = useRouteMatch('/addressinfo/:address').params.address;\r\n  const [addressInfo, setaddressinfo] = useState([]);\r\n  const [quoteList, setQuoteList] = useState([]);\r\n  const [userData, setUserData] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const currentDate = new Date();\r\n  const [formView] = Form.useForm();\r\n  const [formData, setFormData] = useState([]);\r\n  const [testData, setTestData] = useState([]);\r\n\r\n    useEffect(async() => {\r\n        const func = async () => {\r\n          let result2 = await getAllInfo(match);\r\n          console.log(result2);\r\n          setTestData(result2.data);\r\n    };\r\n        func();\r\n        \r\n        if(testData !== []){\r\n          setTableData(createTable());\r\n          setLoaded(true);\r\n        }\r\n        \r\n      }, [tableData.length]);\r\n\r\n    const checkDate = (date) => {\r\n      console.log('date', date);\r\n      let returnDate = \"\";\r\n      if(date === \"December 31st, 1969\"){\r\n      }\r\n      else{\r\n        returnDate = date;\r\n    }\r\n    return returnDate;\r\n    }\r\n    const createTable = () => {\r\n      let tableList = testData.map((item) => (\r\n        {\r\n          id: item.QuoteID,\r\n          salesman: item.FirstName + \" \" + item.LastName,\r\n          creationDate: format(new Date(item.creationDate),\"MMMM do',' yyyy\"),\r\n          modifyDate: checkDate(format(new Date(item.modifyDate), \"MMMM do',' yyyy\")),\r\n          total: item.QuoteTotal\r\n      }));\r\n      return tableList;\r\n    };\r\n\r\n    const findSalesman = (id) => {\r\n      let salesman = \"\";\r\n      userData.forEach(element => {\r\n        if(element.id === id){\r\n          salesman = element.firstName + \" \" + element.lastName;\r\n        }\r\n      });\r\n      return salesman;\r\n    }\r\n    const columns =[\r\n      \r\n      {\r\n        title:\"Salesman\",\r\n        dataIndex:\"FirstName\",\r\n        key:\"user\"\r\n      },\r\n      {\r\n        title:\"Quote Total\",\r\n        dataIndex:\"QuoteTotal\",\r\n        key:\"total\"\r\n      },\r\n      {\r\n        title:\"Show/Edit Quote Info\",\r\n        key:\"OpenQuote\",\r\n        render: (data) => \r\n          (\r\n            <div>\r\n              <Button\r\n         \r\n          href={`/quoteinfo/${data.id}`}>\r\n          Edit Quote  \r\n          </Button>\r\n            <Button\r\n            onClick={() => {setShowForm(true);\r\n                            setFormData(data);\r\n                            }}>\r\n            View Quote</Button>\r\n            </div>)\r\n      },\r\n      {\r\n        title:\"Creation Date\",\r\n        dataIndex:\"creationDate\",\r\n        key:\"date\"\r\n      },\r\n      {\r\n        title:\"Last Modified\",\r\n        dataIndex:\"modifyDate\",\r\n        key:\"modDate\"\r\n      }   \r\n\r\n    ]\r\n    if(loaded){\r\n\r\n      return(\r\n        <div>\r\n          <Card title=\"Customer Information\"></Card>\r\n        <Card title=\"Address Information\">\r\n           {addressInfo.address}\r\n           <br />\r\n           {addressInfo.city}\r\n           <br />\r\n          {addressInfo.postal}\r\n        </Card>\r\n\r\n        <h2>Active Quotes</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={testData}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n\r\n\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Quote\"\r\n        onOk={() => {console.log(\"submit\")}}\r\n        onCancel={() => {setShowForm(false)}}>\r\n          <Form \r\n          form={formView}\r\n          labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}>\r\n            <Item name=\"test\">\r\n\r\n            </Item>\r\n          </Form>\r\n        </Modal>\r\n          </div>\r\n      )\r\n    }\r\n\r\n    else{\r\n      return(\r\n        <div>\r\n          Loading...\r\n        </div>\r\n        \r\n      );\r\n      \r\n    }\r\n    }","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\newcustomer\\index.js",["384"],"import React, {useState} from \"react\";\r\nimport { Form, Input, Button, Select, message } from \"antd\";\r\nimport { addOrder, getLatestCustomer, addAddress } from \"../../api/neworder\";\r\nimport \"./index.css\";\r\nimport validator from \"validator\";\r\nconst layout = {\r\n  labelCol: { span: 2 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst { Item } = Form;\r\nconst { Option } = Select;\r\nexport default function NewCustomer(props) {\r\n  const [form] = Form.useForm();\r\n  const regions = [\r\n    \"Elmira & area\",\r\n    \"Guelph & area\",\r\n    \"Cambridge & area\",\r\n    \"Hamilton & area\",\r\n    \"Stratford & area\",\r\n    \"Listowel area\",\r\n    \"Greater Toronto Area\",\r\n    \"Kitchener - Waterloo\",\r\n    \"Brantford, Paris, Burford, Waterford, Brant County, Haldmald, Caledonia\",\r\n  ];\r\n  const [validEmail, setValidEmail] = useState('');\r\n  const [errorColor, setErrorColor] = ('red');\r\n  const options = regions.map((item, index) => (\r\n    <Option key={index + 1}>{item}</Option>\r\n  ));\r\n  const onFinish = async (values) => {\r\n    let newVal = {\r\n      BillingAddress : values.BillingAddress,\r\n      City: values.City,\r\n      Email: values.Email,\r\n      FirstName:values.FirstName,\r\n      LastName:values.LastName,\r\n      Phone:values.Phone,\r\n      PostalCode:values.PostalCode,\r\n      Prov:values.Prov,\r\n      Region:values.Region\r\n    }\r\n    await addOrder(newVal);\r\n    var customerID = await getLatestCustomer();\r\n    var latestCustomer = customerID.data[0].CustomerID;\r\n    var newAddress = await addAddress(latestCustomer, newVal);\r\n    console.log(\"new address\",newAddress);\r\n    if (newAddress.status == 200) {\r\n      message.success(\"Added successfully\");\r\n      props.history.push(\"/customers\");\r\n    } else message.warn(\"Something went wrong\");\r\n  };\r\n  const emailCheck = (value) => {\r\n    let word = value.target.value;\r\n    if(validator.isEmail(word)){\r\n      setValidEmail('Valid email');\r\n      setErrorColor('green');\r\n    }\r\n    else {\r\n      setValidEmail('Not a valid email');\r\n      setErrorColor('red');\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"neworder\">\r\n      <Form form={form} onFinish={onFinish} {...layout}>\r\n        <Item\r\n        label=\"First Name\"\r\n          name=\"FirstName\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"First Name\" />\r\n        </Item>\r\n        <Item\r\n        label=\"Last Name\"\r\n          name=\"LastName\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Last Name\" />\r\n        </Item>\r\n        <Item\r\n        label=\"Address\"\r\n          name=\"BillingAddress\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Billing Address\" />\r\n        </Item>\r\n        <Item\r\n          label=\"City\"\r\n          name=\"City\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"City\" />\r\n        </Item>\r\n        <Item\r\n          label=\"Province\"\r\n          name=\"Prov\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Province\" />\r\n        </Item>\r\n        <Item\r\n          label=\"Postal Code\"\r\n          name=\"PostalCode\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Postal Code\" />\r\n        </Item>\r\n        <Item\r\n          label=\"Phone\"\r\n          name=\"Phone\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Phone Number\" />\r\n        </Item>\r\n        <Item\r\n          label=\"Email\"\r\n          name=\"Email\"\r\n          rules={[{\r\n            required: true,\r\n            message:\"Required Field\"\r\n          }]}\r\n        >\r\n          <Input onChange={emailCheck} placeholder=\"Email\" />\r\n        </Item>\r\n        <Item\r\n            label=\"Email Check\">\r\n              <span \r\n              style={{\r\n                fontSize:12,\r\n                color:errorColor\r\n              }}>\r\n          {validEmail}\r\n          </span>\r\n            </Item>\r\n        <Item\r\n          label=\"Region\"\r\n          name=\"Region\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required Field\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select>{options}</Select>\r\n        </Item>\r\n        <Item className=\"login_button\">\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            block\r\n          >\r\n            Add\r\n          </Button>\r\n        </Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\newestimate\\index.js",["385","386","387","388"],"import React, { useEffect, useState } from \"react\";\r\nimport validator from \"validator\";\r\nimport { Form, DatePicker, Input, Button, Select, message, Card, Modal } from \"antd\";\r\nimport {\r\n  addOrder,\r\n  addEstimate,\r\n  getLatestCustomer,\r\n  addAddress,\r\n  getLatestAddress,\r\n} from \"../../api/neworder\";\r\nimport SalesSnapshot from '../../Components/HomeTemplate/SalesCalendar/SalesSnapshot'\r\nimport { getRegionAPI, getUsers, sendConfirm } from \"../../api/calendar\";\r\nimport \"./index.css\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport Confirmation from \"../../Components/Email_Templates/confirmation\"\r\nimport {renderEmail} from 'react-html-email';\r\nimport { customer_info_sheet } from \"../../assets/paths\";\r\nconst { RangePicker } = DatePicker;\r\nconst { Item } = Form;\r\nconst { Option } = Select;\r\nconst { format } = require(\"date-fns-tz\");\r\n\r\n\r\nexport default function NewEstimate(props) {\r\n  const [info, setInfo] = useState(false);\r\n  const [salesmen, setSalesmen] = useState([]);\r\n  const [regions, setRegions] = useState([]);\r\n  const [form] = Form.useForm();\r\n  const [showCalendar, setShowCalendar] = useState(false);\r\n  const [validEmail, setValidEmail] = useState('');\r\n  const [errorColor, setErrorColor] = useState('red');\r\n  const layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 14 },\r\n  };\r\n  const options = regions.map((item) => (\r\n    <Option key={item.id}>{item.region}</Option>\r\n  ));\r\n  const jobs = [\"loosefill\", \"spray\", \"removal\", 'fireproofing'];\r\n  const options1 = jobs.map((item, index) => (\r\n    <Option key={item}>{item}</Option>\r\n  ));\r\n\r\n  const emailCheck = (value) => {\r\n    let word = value.target.value;\r\n    if(validator.isEmail(word)){\r\n      setValidEmail('Valid email');\r\n      setErrorColor('green');\r\n    }\r\n    else {\r\n      setValidEmail('Not a valid email');\r\n      setErrorColor('red');\r\n    }\r\n  }\r\n\r\n  const getregions = async () => {\r\n    const data = await getRegionAPI();\r\n    let regionData = data.data.map((item) => ({\r\n      id: item.RegionID,\r\n      region: item.Region,\r\n      color: item.color,\r\n    }));\r\n    setRegions(regionData);\r\n  };\r\n\r\n  const getsalesmen = async () => {\r\n    const data = await getUsers();\r\n    let salesData = data.data.map((item) => ({\r\n      id: item.UserID,\r\n      FirstName: item.FirstName,\r\n      LastName: item.LastName,\r\n    }));\r\n    setSalesmen(salesData);\r\n  };\r\n\r\n  const options2 = salesmen.map((item) => (\r\n    <Option key={item.id}>{item.FirstName}</Option>\r\n  ));\r\n\r\n  const onFinish = async (values) => {\r\n\r\n    var customer = {\r\n      FirstName: values.FirstName,\r\n      LastName: values.LastName,\r\n      Phone: values.Phone,\r\n      Email: values.Email,\r\n      BillingAddress: values.BillingAddress || ' ',\r\n      City: values.City || ' ',\r\n      Prov: values.Prov || ' ',\r\n      PostalCode: values.PostalCode || ' ',\r\n      Region: values.Region || ' ',\r\n    };\r\n    var siteAddress = {\r\n      BillingAddress: values.siteAddress,\r\n      City: values.siteCity,\r\n      Prov: values.siteProv,\r\n      PostalCode: values.sitePostal,\r\n      Region: values.siteRegion\r\n    };\r\n    var estimate = {\r\n      UserID: values.salesman,\r\n      JobType: values.JobType,\r\n      Region: values.siteRegion,\r\n      startDate: format(\r\n        values.selectedDate[0]._d,\r\n        \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\"\r\n      ),\r\n      endDate: format(\r\n        values.selectedDate[1]._d,\r\n        \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\"\r\n      ),\r\n      estimateInfo: values.EstimateInfo,\r\n    };\r\n\r\n    await addOrder(customer);\r\n    var getCustomerID = await getLatestCustomer();\r\n    var latestCustomer = getCustomerID.data[0].CustomerID;\r\n    if(customer.BillingAddress !== ' ') {\r\n           await addAddress(latestCustomer, customer);\r\n    }\r\n    if (siteAddress.BillingAddress !== ' ') {\r\n          await addAddress(latestCustomer, siteAddress);\r\n    }\r\n    var getAddressID = await getLatestAddress();\r\n    var latestAddress = getAddressID.data[0].AddressID;\r\n    var estimateResult = await addEstimate(\r\n      latestCustomer,\r\n      latestAddress,\r\n      estimate\r\n    );\r\n    if (estimateResult.status === 200) {\r\n      message.success(\"Added new estimate\");\r\n    } \r\n    else message.warn(\"Something went wrong\");\r\n    if(validator.isEmail(customer.Email)){\r\n      sendConfirm(customer.Email, renderEmail(<Confirmation customerInfo = {customer} siteInfo = {siteAddress} estimateInfo = {estimate}  />), customer_info_sheet)\r\n    }\r\n    props.history.push(\"/home\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    getsalesmen();\r\n    getregions();\r\n    if (salesmen != [] && regions != []) {\r\n      setInfo(true);\r\n    }\r\n  }, []);\r\n  if (info != true) {\r\n    return <p>Loading Information...</p>;\r\n  } else {\r\n    return (\r\n      <div className=\"neworder\">\r\n        <Card>\r\n          <Form form={form} onFinish={onFinish} {...layout}>\r\n            <Item\r\n              label=\"First Name\"\r\n              name=\"FirstName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"First Name\" />\r\n            </Item>\r\n            <Item\r\n              label=\"Last Name\"\r\n              name=\"LastName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Last Name\" />\r\n            </Item>\r\n            <Item\r\n              label=\"Phone\"\r\n              name=\"Phone\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Phone Number\" />\r\n            </Item>\r\n            <Item\r\n             label=\"Email Address\" \r\n             name=\"Email\"\r\n             rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}\r\n             >\r\n              <Input\r\n              onChange={emailCheck} />\r\n              \r\n            </Item>\r\n            <Item\r\n            label=\"Email Check\">\r\n              <span \r\n              style={{\r\n                fontSize:12,\r\n                color:errorColor\r\n              }}>\r\n          {validEmail}\r\n          </span>\r\n            </Item>\r\n            <Item label=\"Site Address\" name=\"siteAddress\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}>\r\n              <Input placeholder=\"Address\" />\r\n            </Item>\r\n            <Item label=\"Site City\" name=\"siteCity\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}>\r\n              <Input placeholder=\"City\" />\r\n            </Item>\r\n            <Item label=\"Site Province\" name=\"siteProv\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}>\r\n              <Input placeholder=\"Province\" />\r\n            </Item>\r\n            <Item label=\"Postal Code\" name=\"sitePostal\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}>\r\n              <Input placeholder=\"Postal Code\" />\r\n            </Item>\r\n            <Item name=\"siteRegion\" label=\"Site Region\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Required Field\",\r\n              },\r\n            ]}>\r\n              <Select>{options}</Select>\r\n            </Item>\r\n            <i>optional billing address</i><br/>\r\n            <i>---</i>\r\n            <Item\r\n              label=\"Billing Address\"\r\n              name=\"BillingAddress\" \r\n            >\r\n            <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"City\"\r\n              name=\"City\"\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Province\"\r\n              name=\"Prov\"\r\n            >\r\n              <Input  />\r\n            </Item>\r\n            <Item\r\n              label=\"Postal Code\"\r\n              name=\"PostalCode\"\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              name=\"Region\"\r\n              label=\"Region\"\r\n            >\r\n              <Select>{options}</Select>\r\n            </Item>\r\n            <i>---</i>\r\n            <Item\r\n              name=\"selectedDate\"\r\n              label=\"Time\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <RangePicker\r\n                showTime={{ format: \"HH:mm\" }}\r\n                format=\"YYYY-MM-DD HH:mm\"\r\n                className=\"datepicker\"\r\n              />\r\n              \r\n            </Item>\r\n            <Item\r\n            label=\"Calendar\">\r\n            <Button type=\"primary\" onClick={() => {setShowCalendar(true)}}>Show Calendar</Button>\r\n            </Item>\r\n            <Item\r\n              name=\"JobType\"\r\n              label=\"Type of Job\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select>{options1}</Select>\r\n            </Item>\r\n            <Item\r\n              label=\"Information\"\r\n              name=\"EstimateInfo\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <TextArea rows={4} placeholder=\"Estimate Information\" />\r\n            </Item>\r\n            <Item\r\n              name=\"salesman\"\r\n              label=\"Assigned Salesman\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required Field\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select>{options2}</Select>\r\n            </Item>\r\n            <Item>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                shape=\"round\"\r\n                size=\"large\"\r\n                block\r\n              >\r\n                Create Estimate\r\n              </Button>\r\n            </Item>\r\n          </Form>\r\n        </Card>\r\n        <Modal\r\n        visible={showCalendar}\r\n        onCancel={() => {setShowCalendar(false)}}\r\n        width=\"90%\"\r\n        >\r\n        <SalesSnapshot />\r\n      </Modal>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\customerInfo\\index.js",["389","390","391","392","393"],"import React, {useEffect, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Form, Input, message, Select, Space } from \"antd\";\r\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\r\nimport {getRegion, updateCustomer, getRegionAPI, getCustomer, getCustomerAddresses, deleteCustomer, addAddress, addNotes, getNotes} from '../../api/customer';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\";\r\nimport {getUser} from '../../util/storage';\r\nconst { Item } = Form;\r\nconst { confirm } = Modal;\r\nconst { Option } = Select;\r\nconst {TextArea} = Input;\r\nconst { format } = require('date-fns-tz')\r\n\r\nexport function CustomerInfo() {\r\n\r\n  let match = useRouteMatch('/customerinfo/:customer').params.customer;\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [showAddress, setShowAddress] = useState(false);\r\n  const [formAddress] = Form.useForm();\r\n  const [form1] = Form.useForm();\r\n  const [regions, setRegions] = useState([]);\r\n  const [customerInfo, setcustomerinfo] = useState([]);\r\n  const [addressList, setAddressList] = useState([]);\r\n  const [user, setUser] = useState(\"\");\r\n  const [notes, setNotes] = useState([]);\r\n  const [count, setCount] = useState(0);\r\n\r\n  const options = regions.map((item) => (\r\n    <Option key={item.id}>{item.name}</Option>\r\n  ));\r\n    useEffect(() => {\r\n        const func = async () => {\r\n           await getCustomer(match).then((info) => {\r\n            var customerInfo = info.data.map((item) =>({\r\n            id: item.CustomerID,\r\n            firstName: item.CustFirstName,\r\n            lastName: item.CustLastName,\r\n            email: item.Email,\r\n            phone: item.Phone,\r\n            billing: item.BillingAddress,\r\n            city: item.CustCity,\r\n            postal: item.CustPostalCode,\r\n            region: item.CustRegion\r\n          }));\r\n          setcustomerinfo(customerInfo[0]);\r\n          });\r\n          let userInfo = getUser();\r\n          let initial = userInfo.FirstName.charAt(0) + userInfo.LastName.charAt(0);\r\n          setUser(initial);\r\n           await getNotes(match).then((notes) => {\r\n            setNotes(notes.data);\r\n          })\r\n        };\r\n        func();\r\n        getAddressList();\r\n        getRegions();\r\n        document.getElementsByName(\"notes\")[0].value = \"\";\r\n\r\n        \r\n      }, [count]);\r\n\r\n    const getAddressList = async () => {\r\n        var result = await getCustomerAddresses(match).then((list) => {\r\n          var addresses = list.data.map((item) =>({\r\n          id: item.AddressID,\r\n          address: item.Address,\r\n          postalcode: item.PostalCode,\r\n          city: item.City,\r\n          prov: item.Province,\r\n          region: item.Region\r\n        }));\r\n        setAddressList(addresses);\r\n        })\r\n      };\r\n      const getRegions = async() => {\r\n        var result = await getRegionAPI();\r\n        var regionList = result.data.map((item) =>({\r\n          id:item.RegionID,\r\n          name:item.Region\r\n        }));\r\n        setRegions(regionList);\r\n      }\r\n      const title = (\r\n        <div>\r\n          <Space>\r\n\r\n          \r\n          <Button\r\n            type=\"primary\"\r\n          onClick={() => {\r\n              setShowForm(true);\r\n              form1.setFieldsValue({\r\n              firstName: customerInfo.firstName,\r\n              lastName: customerInfo.lastName,\r\n              email: customerInfo.email,\r\n              phone: customerInfo.phone,\r\n              billing: customerInfo.billing,\r\n             city: customerInfo.city,\r\n              postal: customerInfo.postal,\r\n              region: customerInfo.region\r\n             });\r\n            }}\r\n          >\r\n            Modify\r\n          </Button>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => {\r\n              handleDeleteCustomer(customerInfo.id);\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n      const handleUpdate = async () => {\r\n        const validResult = await form1.validateFields();\r\n        if (validResult.errorFields && validResult.errorFields.length > 0) return;\r\n        const value = form1.getFieldsValue();\r\n        console.log(value);\r\n        //const { firstName, lastName, email, phone, billing, city, postal, region } = value;\r\n        const id = customerInfo.id;\r\n        console.log(\"id\", id);\r\n        //update data in the backend\r\n        const result = await updateCustomer(id, value.firstName, value.lastName, value.email, value.phone, value.billing, value.city, value.postal, value.region);\r\n        setShowForm(false);\r\n        console.log(result);\r\n        if (result.status === 200) {\r\n          message.success(\"Successfully updated customer information\");\r\n        }\r\n      };\r\n      const handleDeleteCustomer = async (id) => {\r\n        confirm({\r\n          title: \"Are you sure you want to delete this customer?\",\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: \"\",\r\n          okText: \"Yes\",\r\n          okType: \"danger\",\r\n          cancelText: \"No\",\r\n          onOk() {\r\n            return new Promise((resolve, reject) => {\r\n              const result = deleteCustomer(id);\r\n              console.log(result);\r\n              message.success(\"Customer has been successfully deleted\");\r\n              resolve();\r\n              \r\n            });\r\n          },\r\n          onCancel() {\r\n            console.log(\"Cancel\");\r\n          },\r\n        });\r\n        \r\n      }\r\n      const handleNewAddress = async () =>{\r\n        const validResult = await formAddress.validateFields();\r\n        if (validResult.errorFields && validResult.errorFields.length > 0) return;\r\n        const value = formAddress.getFieldsValue();\r\n        const info = {\r\n          BillingAddress: value.address,\r\n          PostalCode: value.postalCode,\r\n          City: value.city,\r\n          Prov: value.prov,\r\n          Region: value.region\r\n        }\r\n        let id = customerInfo.id;\r\n        var result = await addAddress(id, info);\r\n        console.log(result);\r\n        if (result.status == 200){\r\n          message.success(\"added new address\");\r\n        }\r\n        setShowAddress(false);\r\n\r\n      }\r\n      const getNoteTable = () => {\r\n        let rows = [];\r\n        notes.map((item) => {\r\n          rows.push(\r\n            <tr>\r\n              <td>\r\n                {item.custNotes}\r\n              </td>\r\n              <td>\r\n                {format(new Date(item.dateAdded), \"MMMM do',' yyyy\")}\r\n              </td>\r\n              <td>\r\n                {item.UserInitial}\r\n              </td>\r\n            </tr>\r\n         \r\n            \r\n          );\r\n        });\r\n        return rows;\r\n      }\r\n    const columns =[\r\n      {\r\n        title:\"Address\",\r\n        dataIndex:\"address\",\r\n        key:\"address\"\r\n      },\r\n      {\r\n        title:\"Postal Code\",\r\n        dataIndex:\"postalcode\",\r\n        key:\"postal\"\r\n      },\r\n      {\r\n        title:\"City\",\r\n        dataIndex:\"city\",\r\n        key:\"city\"\r\n      },\r\n      {\r\n        title:\"Province\",\r\n        dataIndex:\"prov\",\r\n        key:\"prov\"\r\n      },\r\n      {\r\n        title:\"Region\",\r\n        dataIndex:\"region\",\r\n        key:\"region\"\r\n      }\r\n      \r\n    ]\r\n      return(\r\n        <div>\r\n          <Card\r\n          title = {title}\r\n          >\r\n            <div>\r\n              <div style={{float:\"left\", width:\"30%\"}}>\r\n              <Card title=\"Customer Information\">\r\n            <p>First Name: {customerInfo.firstName}</p>\r\n            <p>Last Name: {customerInfo.lastName}</p>\r\n            <p>Email: {customerInfo.email}</p>\r\n            <p>Phone: {customerInfo.phone}</p>\r\n            <br />      \r\n        </Card>\r\n        <Card title=\"Billing Address\">\r\n          <p>Billing Address: {customerInfo.billing}</p>\r\n            <p>City: {customerInfo.city}</p>\r\n            <p>Postal Code: {customerInfo.postal}</p>\r\n        </Card>\r\n            </div>\r\n            <div style={{float:\"right\", width:\"50%\"}}>\r\n              <h1>Customer Notes</h1>\r\n              <Item>\r\n                <table style={{display:'block', height:\"350px\", overflowY:\"scroll\", width:\"100%\"}}\r\n              >\r\n                <thead>\r\n                  <tr>\r\n                    <td style={{position:\"sticky\", top:\"0\", width:\"60%\", backgroundColor:\"white\"}}>\r\n                      <strong>Notes</strong>\r\n                    </td>\r\n                    \r\n                    <td style={{position:\"sticky\", top:\"0\", width:\"30%\", backgroundColor:\"white\"}}>\r\n                      <strong>Date Added</strong>\r\n                    </td>\r\n                    <td style={{position:\"sticky\", top:\"0\", width:\"10%\", backgroundColor:\"white\"}}>\r\n                      <strong>User Initial</strong>\r\n                    </td>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {getNoteTable()}\r\n                </tbody>\r\n              </table>\r\n              </Item>\r\n              \r\n              <Item>\r\n                <TextArea\r\n                defaultValue=\"\"\r\n                name=\"notes\"\r\n                allowClear={true}\r\n                autoSize={{minRows: 2, maxRows: 3}}\r\n                onPressEnter={\r\n                  async() => {\r\n                    let box = document.getElementsByName(\"notes\")[0];\r\n                    await addNotes(box.value, user, match)\r\n                    .then((item) => {\r\n                      setCount(count + 1);\r\n                      if(item.status === 200){\r\n                      message.success(\"added new note\");\r\n                      box.value = \" \";\r\n                    }\r\n                    else{\r\n                      message.error(\"Something went wrong. Please try again.\");\r\n                      box.value = \" \";\r\n                    }        });\r\n                  }\r\n                }\r\n                ></TextArea>\r\n              </Item>\r\n              <Item>\r\n                <Button\r\n                onClick={async() => {\r\n                  let box = document.getElementsByName(\"notes\")[0];\r\n                  await addNotes(box.value, user, match)\r\n                  .then((item) => {\r\n                    setCount(count + 1);\r\n                    if(item.status === 200){\r\n                    message.success(\"added new note\");\r\n                    box.value = \" \";\r\n                  }\r\n                  else{\r\n                    message.error(\"Something went wrong. Please try again.\");\r\n                    box.value = \" \";\r\n                  }        });\r\n                  \r\n                  \r\n                  \r\n                  \r\n                }}>\r\n                Submit\r\n                </Button>\r\n              </Item>\r\n              \r\n            </div>\r\n            </div>\r\n            \r\n        \r\n            \r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        bordered\r\n        dataSource={addressList}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n\r\n          </Table>\r\n          <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            setShowAddress(true);\r\n            formAddress.resetFields();\r\n          }}\r\n          >New Address</Button>\r\n\r\n          <Modal\r\n          visible={showForm}\r\n          title=\"Update Customer\"\r\n          onOk={handleUpdate}\r\n          onCancel={() => setShowForm(false)}\r\n        >\r\n          <Form form={form1} labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}>\r\n            <Item\r\n              label=\"First Name\"\r\n              name=\"firstName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n                \r\n              ]}\r\n              \r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Last Name\"\r\n              name=\"lastName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Email\"\r\n              name=\"email\"\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Phone\"\r\n              name=\"phone\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Billing Address\"\r\n              name=\"billing\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"City\"\r\n              name=\"city\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Item>\r\n            <Item\r\n              label=\"Postal Code\"\r\n              name=\"postal\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n              </Item>\r\n              <Item\r\n              label=\"Region\"\r\n              name=\"region\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select>{options}</Select>\r\n            </Item>\r\n          </Form>\r\n        </Modal>\r\n        <Modal\r\n          visible={showAddress}\r\n          title=\"New Address\"\r\n          onOk={handleNewAddress}\r\n          onCancel={() => setShowAddress(false)}\r\n          >\r\n          <Form\r\n              form={formAddress}\r\n              labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}\r\n              >\r\n              <Item \r\n              label=\"Address\"\r\n              name=\"address\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n              >\r\n                <Input />\r\n              </Item>\r\n              <Item \r\n              label=\"Postal Code\"\r\n              name=\"postalCode\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n              >\r\n                <Input />\r\n              </Item>\r\n              <Item \r\n              label=\"City\"\r\n              name=\"city\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n              >\r\n                <Input />\r\n              </Item>\r\n              <Item \r\n              label=\"Province\"\r\n              name=\"prov\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n              >\r\n                <Input />\r\n              </Item>\r\n              <Item \r\n              label=\"Region\"\r\n              name=\"region\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select>{options}</Select>\r\n              </Item>\r\n\r\n          </Form>\r\n        </Modal>\r\n        </Card>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    export default withRouter(CustomerInfo)","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\roles\\index.js",["394"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./index.css\";\r\nimport { Card, Table, Button, Modal, Form, Input, message, TreeSelect } from \"antd\";\r\nimport { addRole, deleteRole, getRoles, updateRole } from \"../../api/index\";\r\nimport { manuList } from \"../../config/leftnav\";\r\nconst { Item } = Form;\r\n\r\nexport default function Roles() {\r\n  //control the adding form status\r\n  const [addingShow, setaddingShow] = useState(false);\r\n  //control the modify tree component status\r\n  const [modifyShow, setmodifyShow] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [formEdit] = Form.useForm();\r\n  //handle the selected row\r\n  const [row, setRow] = useState({});\r\n  //handle the menu of the selected row\r\n  const [roleList, setRoleList] = useState([]);\r\n  //the added role name\r\n  const columns = [\r\n    {\r\n      title: \"Role Name\",\r\n      dataIndex: \"RoleName\",\r\n      key: \"rolename\",\r\n    },\r\n    {\r\n      title: \"Create Time\",\r\n      dataIndex: \"createtime\",\r\n      key: \"createtime\",\r\n    },\r\n    {\r\n      title: \"Created By\",\r\n      dataIndex: \"authorizor\",\r\n      key: \"authorizor\",\r\n    }\r\n  ];\r\n\r\n  useEffect( () => {\r\n    let func = async() => {\r\n      let roleData = await getRoles();\r\n      setRoleList(roleData.data);\r\n    }\r\n    func();\r\n  },[roleList.length])\r\n  //getting tree nodes\r\n  const getTreeNodes = (array) => {\r\n    return array.map((item, index) => {\r\n      return {\r\n        title: item.content,\r\n        key: item.key,\r\n        children: item.children ? getTreeNodes(item.children) : \"\",\r\n      };\r\n    });\r\n  };\r\n  //the data format of tree component\r\n  const treeDatas = [\r\n    {\r\n      title: \"Authority\",\r\n      key: \"All\",\r\n      children: getTreeNodes(manuList),\r\n    },\r\n  ];\r\n\r\n  //handle tree component(settings for role)\r\n  const handleTree = async () => {\r\n    const validResult = await formEdit.validateFields();\r\n    if (validResult.errorFields && validResult.errorFields.length > 0) return;\r\n    const values = formEdit.getFieldsValue();\r\n    const role = row;\r\n    let menu = \"\";\r\n    values.treeAccess.map ((item) => {\r\n      menu = menu + item + \", \"\r\n    });\r\n    const result = await updateRole(menu, role);\r\n    if(result.status === 200) {\r\n      message.success(\"Updated role\");\r\n    } else {\r\n      message.warn(\"Something went wrong\");\r\n    }\r\n    setmodifyShow(false);\r\n  };\r\n  //handle onrow callback function in table settings\r\n  const handleonRow = (record, index) => {\r\n    return {\r\n      onClick: () => {\r\n        setRow(record);\r\n        console.log(row.rolename);\r\n      },\r\n    };\r\n  };\r\n  //handle adding a new role\r\n  const handleAdding = async () => {\r\n    const validResult = await form.validateFields();\r\n    if (validResult.errorFields && validResult.errorFields.length > 0) return;\r\n    const rolename = form.getFieldValue(\"rolename\");\r\n    const result = await addRole(rolename);\r\n    console.log(result);\r\n    if (result.status === 200) {\r\n      message.success(\"Added new role\");\r\n      setaddingShow(false);\r\n    } else {\r\n      message.warn(\"Something went wrong\");\r\n      setaddingShow(false);\r\n    }\r\n    setaddingShow(false);\r\n  };\r\n\r\n  //handle all form status being cancel\r\n  const handleCancel = () => {\r\n    setaddingShow(false);\r\n    setmodifyShow(false);\r\n  };\r\n\r\n  const deleteSelected = async() => {\r\n    Modal.confirm({\r\n      title:\"Are you sure you want to delete this role?\",\r\n      onOk() { return new Promise(async(resolve, reject) => {\r\n        await deleteRole(row.RoleID).then((item) => {\r\n          resolve();\r\n        });\r\n      })\r\n        },\r\n      cancelText:'No',\r\n      okText:'Yes'\r\n    });\r\n  }\r\n\r\n  //the title of card component\r\n  const title = (\r\n    <>\r\n      <Button\r\n        style={{ marginRight: 20 }}\r\n        type=\"primary\"\r\n        onClick={() => {\r\n          form.resetFields();\r\n          setaddingShow(true);\r\n        }}\r\n      >\r\n        Create A Role\r\n      </Button>\r\n      <Button\r\n        style={{marginRight:20}}\r\n        type=\"primary\"\r\n        onClick={() => {\r\n          formEdit.resetFields();\r\n          setmodifyShow(true);\r\n        }}\r\n        disabled={!row.RoleID}\r\n      >\r\n        Set Roles\r\n      </Button>\r\n      <Button\r\n        type=\"primary\"\r\n        onClick={() => {\r\n          deleteSelected();\r\n        }}\r\n        disabled={!row.RoleID}\r\n      >\r\n        Delete Role\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <Card title={title} bordered>\r\n      <Table\r\n        rowKey=\"RoleID\"\r\n        columns={columns}\r\n        rowSelection={{\r\n          type: \"radio\",\r\n          selectedRowKeys: [row.RoleID],\r\n          onChange: (rowkeys, rows) => {\r\n            setRow(rows[0]);\r\n          },\r\n        }}\r\n        onRow={handleonRow}\r\n        dataSource={roleList}\r\n      ></Table>\r\n      <Modal\r\n        visible={addingShow}\r\n        onOk={handleAdding}\r\n        onCancel={handleCancel}\r\n        title=\"Adding a role\"\r\n      >\r\n        <Form form={form}>\r\n          <Item\r\n            name=\"rolename\"\r\n            label=\"Role Name\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input a role name\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Item>\r\n        </Form>\r\n      </Modal>\r\n      <Modal\r\n        visible={modifyShow}\r\n        title=\"Set role privileges\"\r\n        onOk={handleTree}\r\n        onCancel={handleCancel}\r\n      >\r\n        <Form form={formEdit}>\r\n          <Item label=\"Role:\" wrapperCol={{ span: 18 }}>\r\n            <Input disabled value={row.RoleName} />\r\n          </Item>\r\n          <Item\r\n          label=\"Access\"\r\n          name=\"treeAccess\">\r\n             <TreeSelect treeCheckable={true} treeData={treeDatas}></TreeSelect>\r\n          </Item>\r\n        </Form>\r\n      </Modal>\r\n    </Card>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\users\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\trucks\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\customers\\index.js",["395","396","397"],"import React, { useState, useEffect} from \"react\";\r\nimport {Table, Button, Form, Input} from \"antd\";\r\nimport { getCustomers, customerLookup } from \"../../api/customer\";\r\nimport \"./index.css\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst {Search} = Input;\r\nfunction Customers(props) {\r\n  const [customers, setcustomers] = useState([]);\r\n  const [addressList, setaddresses] = useState([]);\r\n  const [form1] = Form.useForm();\r\n\r\n  const columns = [\r\n    {\r\n      title: \"First Name\",\r\n      dataIndex: \"firstName\",\r\n      key: \"FirstName\",\r\n    },\r\n    {\r\n      title: \"Last Name\",\r\n      dataIndex: \"lastName\",\r\n      key: \"LastName\",\r\n    },\r\n    {\r\n      title: \"Customer Billing Address\",\r\n      dataIndex: \"billing\",\r\n      key: \"BillingAddress\",\r\n    },\r\n    {\r\n      title: \"See Customer Page\",\r\n      key: \"OpenCustomer\",\r\n      render: (data) => (\r\n        <div className=\"operate-button\">\r\n          <Button\r\n            type=\"link\"\r\n            onClick={() => {\r\n              props.history.push(`/customerinfo/${data.id}`);\r\n            }}\r\n          >\r\n            Show Customer\r\n          </Button>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    const func = async () => {\r\n      var result = await getCustomers();\r\n      var tables = result.data.map((item) => ({\r\n        id: item.CustomerID,\r\n        firstName: item.CustFirstName,\r\n        lastName: item.CustLastName,\r\n        billing: item.BillingAddress,\r\n      }));\r\n      setcustomers(tables);\r\n    };\r\n    func();\r\n  }, []);\r\n\r\n  const findCustomers = async (value) => {\r\n    let result = await customerLookup(value);\r\n    var tables = result.data.map((item) => ({\r\n      id: item.CustomerID,\r\n      firstName: item.CustFirstName,\r\n      lastName: item.CustLastName,\r\n      billing: item.BillingAddress,\r\n    }));\r\n    setcustomers(tables);\r\n  }\r\n  return (\r\n    <div>\r\n      <h2>Customers</h2>\r\n      <Search\r\n      style={{width:\"40%\", padding:\"5px\"}}\r\n      className=\"searchbar\"\r\n      size = \"medium\"\r\n      enterButton=\"Find Customer\"\r\n      placeholder=\"Search customer list\"\r\n      onChange={(e) => {findCustomers(e.target.value)}} />\r\n\r\n      <Table\r\n      style={{ width: \"80%\", margin: \"0 auto\" }}\r\n      rowKey=\"id\"\r\n      bordered\r\n      dataSource={customers}\r\n      columns={columns}\r\n      tableLayout=\"auto\"\r\n      pagination={{ pageSize: 10 }}\r\n    ></Table>\r\n    </div>\r\n    \r\n  );\r\n}\r\nexport default withRouter(Customers);\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\invoices\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\index.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\index.js",["398","399","400","401","402"],"\r\nimport React, {useEffect, useState } from \"react\";\r\nimport { Route, Switch,  Link,  useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport FormOne from \"./FormOne\";\r\nimport QuoteOne from \"./QuoteOne\";\r\nimport QuotePrint from \"./QuotePrint\";\r\nimport QuoteList from \"./quoteList\";\r\nimport QuoteEdit from './quoteEdit';\r\nimport {Space, Button} from \"antd\";\r\n\r\n\r\nexport default function Quotes() {\r\n\r\n  const [quoteDataId, setQuoteDataId] = useState('0');\r\n  const [quoteData, setQuoteData] = useState({});\r\n  const [quoteFormData, setQuoteFormData] = useState({});\r\n  let { path, url } = useRouteMatch();\r\n  let history = useHistory();\r\n  function onSetQuoteDataChange(data) {\r\n    if (!(data == null || data  == \"\" || data == undefined)) {\r\n        setQuoteDataId(data.id);\r\n        setQuoteData(data);\r\n        history.push(`${url}/${data.id}/new/`)\r\n    }else{\r\n        setQuoteData({});\r\n    }\r\n  }\r\n  function onSetQuoteFormDataChange(data) {\r\n    if (!(data == null || data  == \"\" || data == undefined)) {\r\n        setQuoteFormData(data);\r\n        console.log(data);\r\n        history.push(`${url}/${quoteDataId}/print/`)\r\n    }else{\r\n        setQuoteFormData({});\r\n    }\r\n  }\r\n\r\n  function onEditQuoteFormData(){\r\n      history.push(`/quotes/${quoteData.id}/edit/`)\r\n  }\r\n\r\n  return (\r\n    <div style={{padding: \"10px\", margin: \"10px\"}}>\r\n      <div>\r\n        <h2> Quotes<Space style={{float:\"right\"}}><Link to=\"/quotes/quoteList\" ><Button>View All Quotes</Button></Link>  <Link to=\"/quotes\"><Button> New Quote  </Button></Link></Space></h2>\r\n      </div> \r\n      <hr/>\r\n      <Switch>\r\n        <Route exact path={path} >\r\n          <FormOne quoteDataId={quoteDataId} onSetQuoteDataChange={onSetQuoteDataChange} />\r\n          </Route>\r\n        <Route path=\"/quotes/:qid/new\" >\r\n          <QuoteOne key={quoteData} quoteData={quoteData} onSetQuoteFormDataChange={onSetQuoteFormDataChange} />\r\n        </Route>\r\n        <Route path=\"/quotes/:qid/edit\" >\r\n          <QuoteEdit />\r\n        </Route>\r\n        <Route path=\"/quotes/:qid/print\" >\r\n          <QuotePrint key={quoteData} quoteFormData={quoteFormData}  quoteData={quoteData} onEditQuoteFormData={onEditQuoteFormData} />\r\n        </Route>\r\n        <Route path=\"/quotes/quoteList\">\r\n          <QuoteList/>\r\n        </Route>\r\n      </Switch>\r\n      \r\n      \r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\SalesmanTemplate.js",["403"],"import React from \"react\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport Scheduler, {Resource} from 'devextreme-react/scheduler';\r\nimport {getEstimateByID, getUsers,  getRegionAPI} from '../../api/calendar';\r\nimport CustomStore from 'devextreme/data/custom_store';\r\nimport { getUser } from \"../../util/storage\";\r\nimport Legend from \"../../Components/Legend\";\r\n\r\nconst { zonedTimeToUtc, format } = require('date-fns-tz')\r\n\r\nconst dataSource = new CustomStore({\r\n  key: \"EstimateID\",\r\n  load: async () => {\r\n    let user = getUser();\r\n    const data = await getEstimateByID(user.UserID);\r\n    let formatData = data.data.map((item) => ({\r\n      EstimateID : item.EstimateID,\r\n      CustomerID : item.CustomerID,\r\n      AddressID : item.AddressID,\r\n      UserID : item.UserID,\r\n      CreationDate : item.CreationDate,\r\n      text : item.EstimateInfo,\r\n      RegionID : item.RegionID,\r\n      startDate : timeFormat(item.startDate),\r\n      endDate : timeFormat(item.endDate)\r\n    }));\r\n    return formatData\r\n  }\r\n});\r\n\r\nconst timeFormat = (date) => {\r\n   let newdate = zonedTimeToUtc(new Date(date), 'America/Edmonton');\r\n   var formatteddate = format(newdate, \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\");\r\n   return formatteddate;\r\n}\r\n\r\nconst currentDate = new Date();\r\nlet date = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();\r\nconst views = ['day'];\r\n\r\nconst renderResourceCell = (model) => {\r\n  return (\r\n      <b>{model.data.FirstName}</b>\r\n  );\r\n}\r\n\r\nclass SalesmanTemplate extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      groupByDate:false,\r\n      cancel:true,\r\n      userList:\"\",\r\n      regionList:\"\",\r\n      info:false\r\n    };\r\n    \r\n    this.onGroupByDateChanged = this.onGroupByDateChanged.bind(this);\r\n    this.onAppointmentForm = this.onAppointmentForm.bind(this);\r\n    this.salesmanSource = this.salesmanSource.bind(this);\r\n    this.regionSource = this.regionSource.bind(this);\r\n    this.InfoIsHere = this.InfoIsHere.bind(this);\r\n  }\r\n  async InfoIsHere() {\r\n  let regionData = await this.regionSource();\r\n  let userData = await this.salesmanSource();\r\n  this.setState({userList:userData});\r\n  this.setState({regionList:regionData});\r\n  this.setState({info:true});\r\n} \r\n  \r\n  onAppointmentForm(args) {\r\n    args.cancel = true;\r\n  }\r\n  onGroupByDateChanged(args) {\r\n    this.setState({\r\n      groupByDate: args.value\r\n    });\r\n  }\r\n  async regionSource() {\r\n    const data = await getRegionAPI();\r\n    let regionData = data.data.map((item) => ({\r\n      id  : item.RegionID,\r\n      region: item.Region,\r\n      color: item.color\r\n    }))\r\n    console.log(regionData);\r\n    return regionData;\r\n  }\r\n\r\n  async salesmanSource() {\r\n    const data = await getUsers();\r\n    let salesData = data.data.map((item) => ({\r\n      id: item.UserID,\r\n      FirstName : item.FirstName,\r\n      LastName: item.LastName\r\n    }))\r\n    console.log(salesData);\r\n    return salesData;\r\n  }\r\n  componentDidMount(){\r\n    this.InfoIsHere();\r\n}\r\n\r\n \r\n  render() {\r\n    if (this.state.info == false){\r\n        return (\r\n          <p>Loading information...</p>\r\n        )\r\n      }\r\n      else{\r\n\r\n      \r\n    return (\r\n      \r\n      <div style={{display:\"flex\",flexDirection:\"row\", margin:\"auto\"}}>\r\n          <div style={{width:\"30%\"}}>\r\n        <Legend />\r\n        </div>\r\n          <div style={{padding:\"15px\", width:\"100%\"}}>\r\n            <h1>Your work day</h1>\r\n             <Scheduler\r\n              timeZone=\"America/Edmonton\"\r\n              resourceCellRender={renderResourceCell}\r\n              dataSource={dataSource}\r\n              views={views}\r\n              defaultCurrentView=\"day\"\r\n              defaultCurrentDate={date}\r\n              width={'60%'}\r\n              height={800}\r\n              startDayHour={6}\r\n              endDayHour={21}\r\n              onAppointmentAdding={(e) => {e.cancel = true}}\r\n              onAppointmentDeleting={(e) => {e.cancel = true}}\r\n              onAppointmentFormOpening={(e) => {e.cancel = true}}\r\n              onAppointmentUpdating={(e) => {e.cancel = true}}\r\n        >\r\n        <Resource\r\n          dataSource={this.state.regionList}\r\n          fieldExpr=\"RegionID\"\r\n          useColorAsDefault={true}\r\n        ></Resource>\r\n        </Scheduler>\r\n        </div>\r\n        \r\n     \r\n    </div>\r\n    );\r\n  }\r\n}\r\n}\r\n\r\nexport default SalesmanTemplate;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\home\\Template.js",["404","405"],"import React, { Component } from 'react';\r\nimport Tabs from \"../../Components/HomeTemplate/Tabs\"; \r\nimport SalesCalendar from '../../Components/HomeTemplate/SalesCalendar/SalesCalendar';\r\nimport FoamCalendar from '../../Components/HomeTemplate/FoamCalendar/FoamCalendar';\r\nimport FillCalendar from '../../Components/HomeTemplate/FillCalendar/FillCalendar';\r\nimport './Template.css';\r\n\r\nclass Template extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n      \r\n    render() {\r\n        \r\n        return(\r\n      <div>\r\n       <Tabs> \r\n         <div label=\"Sales\"> \r\n           <SalesCalendar />\r\n         </div> \r\n         <div label=\"Foam\"> \r\n           <FoamCalendar />\r\n         </div> \r\n         <div label=\"Fill\"> \r\n         <FillCalendar />\r\n         </div> \r\n       </Tabs> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n  export default Template;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\neworder.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\quoteEditAPI.js",["406"],"import { getDate } from \"date-fns\";\r\nimport ajax from \"./base\";\r\n\r\nconst baseURL = \"https://reitzel-server.herokuapp.com\";\r\nconst currentDate = new Date();\r\nlet date = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();\r\n\r\nexport async function getCustomerID(id){\r\n    var tableName = \"customers\";\r\n    var condition = `CustomerID = '${id}'`;\r\n    const customer = await ajax (\r\n        `${baseURL}/fetchValues`,\r\n        {tableName, condition},\r\n        \"post\"\r\n    );\r\n    if(customer !== []) return customer;\r\n    else return 0; \r\n}\r\n\r\nexport async function getAddressID(id){\r\n    var tableName = \"address\";\r\n    var condition = `AddressID = '${id}'`;\r\n    const addressinfo = await ajax (\r\n        `${baseURL}/fetchValues`,\r\n        {tableName, condition},\r\n        \"post\"\r\n    );\r\n    if(addressinfo !== []) return addressinfo;\r\n    else return 0;\r\n}\r\n\r\nexport async function getQuoteDetails(id){\r\n    var tableName = \"subtotallines\";\r\n    var condition = `quoteID = '${id}'`;\r\n    const detaillist = await ajax (\r\n        `${baseURL}/fetchValues`,\r\n        {tableName, condition},\r\n        \"post\"\r\n    );\r\n    if(detaillist !== []) return detaillist;\r\n    else return 0;\r\n}\r\n\r\nexport async function getProductList(id){\r\n    var tableName = \"quotelines\";\r\n    var condition = `QuoteID = '${id}'`;\r\n    const productlist = await ajax(\r\n        `${baseURL}/fetchValues`,\r\n        {tableName, condition},\r\n        \"post\"\r\n    );\r\n    if(productlist !== []) return productlist;\r\n    else return 0;\r\n}\r\n\r\nexport async function getUserID(id){\r\n    var tableName = 'users';\r\n    var condition = `UserID = '${id}'`;\r\n    const userinfo = await ajax (\r\n        `${baseURL}/fetchValues`,\r\n        {tableName, condition},\r\n        \"post\"\r\n    );\r\n    if(userinfo !== []) return userinfo;\r\n    else return 0;\r\n}\r\n\r\nexport async function getQuoteID(id){\r\n    var tableName = 'quotes';\r\n    var condition = `QuoteID = ${id}`;\r\n    const quoteData = await ajax(\r\n        `${baseURL}/fetchValues`,\r\n        {tableName, condition},\r\n        \"post\"\r\n    );\r\n    if(quoteData !== []) return quoteData;\r\n    else return 0;\r\n}\r\n\r\nexport async function updateQuote(values){\r\n    var tableName = 'quotes';\r\n    var columnsAndValues = `QuoteTotal = '${values.total}', notesCustomers = '${values.customer_notes}', notesInstallers = '${values.installer_notes}', modifyDate = '${(date)}'`;\r\n    var condition = `QuoteID = '${values.id}'`;\r\n    const quoteUpdate = await ajax(\r\n        `${baseURL}/updateValues`,\r\n        {tableName, columnsAndValues, condition},\r\n        \"post\"\r\n    );\r\n    if(quoteUpdate !== []) return quoteUpdate;\r\n    else return 0;\r\n}\r\n\r\nexport async function updateDetail(values){\r\n    var tableName = 'subtotallines';\r\n    var columnsAndValues = `subtotalLines = '${values.details}', subtotalAmount = '${values.total}'`;\r\n    var condition = `subtotalID = '${values.id}'`;\r\n    const detailUpdate = await ajax(\r\n        `${baseURL}/updateValues`,\r\n        {tableName, columnsAndValues, condition},\r\n        \"post\"\r\n    );\r\n    if(detailUpdate !== []) return detailUpdate;\r\n    else return 0;\r\n}\r\n\r\nexport async function updateProduct(values){\r\n    var tableName = 'quotelines';\r\n    var columnsAndValues = `Product = '${values.product}', Notes = '${values.notes}', Subtotal='${values.price}'`;\r\n    var condition = `QuoteLineID = '${values.id}'`;\r\n    const productUpdate = await ajax(\r\n        `${baseURL}/updateValues`,\r\n        {tableName, columnsAndValues, condition},\r\n        \"post\"\r\n    );\r\n    console.log('update',productUpdate);\r\n    if(productUpdate !== []) return productUpdate;\r\n    else return 0;\r\n}\r\n\r\nexport async function getAllInfo(){\r\n    var sql = `SELECT * FROM quotes LEFT JOIN address ON quotes.AddressID = address.AddressID LEFT JOIN users ON quotes.UserID = users.UserID LEFT JOIN customers ON quotes.CustomerID = customers.CustomerID\r\n    `;\r\n    const info = await ajax(\r\n        `${baseURL}/processCustomQuery`,\r\n        {sql},\r\n        \"post\"\r\n    );\r\n    if(info !== []) return info;\r\n    else return 0; \r\n}\r\n\r\nexport async function getAllInfoID(id){\r\n    var sql = `SELECT * FROM quotes LEFT JOIN address ON quotes.AddressID = address.AddressID LEFT JOIN users ON quotes.UserID = users.UserID LEFT JOIN customers ON quotes.CustomerID = customers.CustomerID WHERE quotes.QuoteID = '${id}'\r\n    `;\r\n    const info = await ajax(\r\n        `${baseURL}/processCustomQuery`,\r\n        {sql},\r\n        \"post\"\r\n    );\r\n    if(info !== []) return info;\r\n    else return 0; \r\n}\r\n\r\nexport async function getDetails(){\r\n    var sql = `SELECT * FROM subtotallines`;\r\n    const details = await ajax(\r\n        `${baseURL}/processCustomQuery`,\r\n        {sql},\r\n        \"post\"\r\n    );\r\n    if(details !== []) return details;\r\n    else return 0;\r\n}\r\n\r\nexport async function getProducts(){\r\n    var sql = `SELECT * FROM quotelines`;\r\n    const prods = await ajax (\r\n        `${baseURL}/processCustomQuery`,\r\n        {sql},\r\n        \"post\"\r\n    );\r\n    if(prods !== []) return prods;\r\n    else return 0;\r\n}\r\n\r\nexport async function SearchAllInfo(value) {\r\n    var sql = `SELECT * FROM quotes LEFT JOIN address ON quotes.AddressID = address.AddressID LEFT JOIN users ON quotes.UserID = users.UserID LEFT JOIN customers ON quotes.CustomerID = customers.CustomerID \r\n    WHERE CustFirstName LIKE '%${value}%' OR CustLastName LIKE '%${value}%' OR Address LIKE '%${value}%'`;\r\n    const info = await ajax(\r\n        `${baseURL}/processCustomQuery`,\r\n        {sql},\r\n        \"post\"\r\n    );\r\n    if(info !== []) return info;\r\n    else return 0; \r\n}\r\n\r\nexport async function deleteProduct(id) {\r\n    var tableName = 'quotelines';\r\n    var condition = `QuoteLineID = '${id}'`;\r\n    const confirm = await ajax(\r\n        `${baseURL}/deleteValues`,\r\n        {tableName, condition},\r\n        \"post\"\r\n    );\r\n    if(confirm !== []) return confirm;\r\n    else return 0;\r\n}\r\n\r\nexport async function deleteDetail(id) {\r\n    var tableName = 'subtotallines';\r\n    var condition = `subtotalID = '${id}'`;\r\n    const confirm = await ajax(\r\n        `${baseURL}/deleteValues`,\r\n        {tableName, condition},\r\n        \"post\"\r\n    );\r\n    if(confirm !== []) return confirm;\r\n    else return 0;\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\addresses.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\confirmation.js",["407"],"import React from 'react';\r\nimport { Email, Item} from 'react-html-email';\r\nimport { getUser } from '../../util/storage';\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst user = getUser();\r\n\r\nconst { format} = require(\"date-fns-tz\");\r\n\r\nfunction Confirmation(props){\r\n    \r\n    return(\r\n        <Email title=\"Thank you for choosing Reitzel!\">\r\n            <Item>\r\n                <img src={header}></img>\r\n            </Item>\r\n            <Item>\r\n                <p>Hi {props.customerInfo.FirstName} {props.customerInfo.LastName},</p>\r\n            <br/>\r\n            <p>Thank you for choosing Reitzel Insulation! Here are the details for your booking:</p>\r\n            <p>Job Type: {props.estimateInfo.JobType}</p>\r\n            <p>Date: {format(new Date(props.estimateInfo.startDate),\"MMMM do',' yyyy\")}</p>\r\n            <p> Approximate Arrival Time:  {format(new Date(props.estimateInfo.startDate),\"K:mm\")}</p>\r\n            <br />\r\n            </Item>\r\n            <Item>\r\n            Please read the attached pdf for preparing your home.\r\n            </Item>\r\n            <Item>\r\n                <p>\r\n                    This is an automated email. If you have any questions after reading this document, please reply to your rep at {user.Email} or call the office at 519-886-6100.\r\n            Thank you for your business!\r\n                </p>\r\n               <Item>\r\n                  <p>\r\n                  Regards,\r\n                    \r\n            The Reitzel Team  \r\n               </p> \r\n               </Item>\r\n               \r\n            \r\n            </Item>\r\n\r\n\r\n        </Email>\r\n    )\r\n}\r\n\r\nexport default Confirmation;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\calendar.js",["408"],"import ajax from \"./base\";\r\n\r\nconst baseURL = \"https://reitzel-server.herokuapp.com\";\r\nconst {format} = require('date-fns-tz');\r\n\r\n\r\nexport async function getEstimates() {\r\n    var tableName = \"estimates\";\r\n    const estimatelist = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      { tableName},\r\n      \"post\"\r\n    );\r\n    if (estimatelist !== []) return estimatelist;\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\nexport async function deleteEstimate(id) {\r\n    var tableName = \"estimates\";\r\n    var condition = `EstimateID='${id}'`;\r\n    const result = await ajax(`${baseURL}/deleteValues`, { tableName, condition }, \"post\");\r\n    console.log(\"result\", result);\r\n    if (result !== []) return result;\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  export async function getUsers() {\r\n    var tableName = \"users\";\r\n    var condition = \"SecurityLevel = 'salesman'\"\r\n    const userlist = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      { tableName, condition},\r\n      \"post\"\r\n    );\r\n    if (userlist !== []) return userlist;\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n  export async function updateEstimate(id, values) {\r\n    var tableName = \"estimates\";\r\n    var columnsAndValues = `startDate='${values.startDate}',endDate='${values.endDate}', UserID='${values.UserID}'`;\r\n    var condition = `EstimateID='${id}'`;\r\n    const result = await ajax(\r\n      `${baseURL}/updateValues`,\r\n      { tableName, columnsAndValues, condition },\r\n      \"post\"\r\n    );\r\n    if (result !== []) return result;\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  export async function updateEstimateInfo(id, value) {\r\n    var tableName = \"estimates\";\r\n    var columnsAndValues = `EstimateInfo = '${value}'`;\r\n    var condition = `EstimateID='${id}'`;\r\n    const result = await ajax(\r\n      `${baseURL}/updateValues`,\r\n      { tableName, columnsAndValues, condition },\r\n      \"post\"\r\n    );\r\n    if (result !== []) return result;\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  export async function getRegion(id){\r\n    var tableName = \"region\";\r\n    var condition = `RegionID = '${id}'`\r\n    const region = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      {tableName, condition},\r\n      \"post\"\r\n    );\r\n    if(region !== []) return region;\r\n    else return 0;\r\n  }\r\n  export async function getRegionAPI(){\r\n    var tableName = \"region\";\r\n    const region = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      {tableName},\r\n      \"post\"\r\n    );\r\n    if(region !== []) return region;\r\n    else return 0;\r\n  }\r\n\r\n  export async function sendConfirm(customer, email){\r\n    var to = customer;\r\n    var subject = \"Booking Confirmation - Rietzel Insulation\";\r\n    var html = email;\r\n\r\n    var completed = await ajax(`${baseURL}/sendEmailHtml`, {to, subject, html}, \"post\");\r\n    if (completed !== []) return completed;\r\n    else return 0;\r\n }\r\n\r\n export async function sendUpdate(customer, email, attach){\r\n  var to = customer;\r\n  var subject = \"Booking Update - Reitzel Insulation\";\r\n  var html = email;\r\n  var file = attach;\r\n  console.log(file);\r\n\r\n  var completed = await ajax(`${baseURL}/sendEmailHtml`, {to, subject, html, file}, \"post\");\r\n  if (completed !== []) return completed;\r\n  else return 0;\r\n}\r\n\r\nexport async function findCustomer(id){\r\n  var tableName = \"customers\";\r\n  var condition = `CustomerID ='${id}'`\r\n  var customer = await ajax(\r\n    `${baseURL}/fetchValues`,\r\n    {tableName, condition},\r\n    \"post\"\r\n  );\r\n  if (customer !== []) return customer;\r\n  else return 0;\r\n}\r\n\r\nexport async function getEstimateByID(id) {\r\n  var tableName = \"estimates\";\r\n  var condition = `UserID = '${id}'`;\r\n    const estimatelist = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      { tableName, condition},\r\n      \"post\"\r\n    );\r\n    if (estimatelist !== []) return estimatelist;\r\n    else {\r\n      return 0;\r\n    }\r\n}\r\n\r\nexport async function addNewCustomer(values) {\r\n  var tableName = \"customers\";\r\n  var values = `${null},'${values.firstName}','${values.lastName}','${values.phone}','${values.email}','${values.siteAddress}','${values.siteCity}','${values.sitePostal}','${values.Region}'`;\r\n  var orders = await ajax(`${baseURL}/insertValues`, { tableName, values }, \"post\");\r\n  if (orders !== []) return orders;\r\n  else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport async function getLatestCustomer() {\r\n  let sql = `SELECT * FROM customers ORDER BY CustomerID DESC LIMIT 1`\r\n  const customer = await ajax(\r\n    `${baseURL}/processCustomQuery`,\r\n    {sql},\r\n    \"post\"\r\n  );\r\n  if (customer !== []) return customer;\r\n  else{\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport async function getLatestAddress() {\r\n  let sql = `SELECT * FROM address ORDER BY AddressID DESC LIMIT 1`\r\n  const address = await ajax(\r\n    `${baseURL}/processCustomQuery`,\r\n    {sql},\r\n    \"post\"\r\n  );\r\n  if (address !== []) return address;\r\n  else{\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport async function addNewAddress(id, value){\r\n  var tableName = \"address\";\r\n  var values = `${null},'${id}','${value.siteAddress}','${value.sitePostal}','${value.siteCity}','${value.siteProv}','${value.siteRegion}'`;\r\n\r\n  var address = await ajax(`${baseURL}/insertValues`, { tableName, values }, \"post\");\r\n  console.log(\"address\", address);\r\n  if (address !== []) return address;\r\n  else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport async function addEstimate(id, address, value) {\r\n  var tableName = \"estimates\";\r\n  var values = `${null},'${id}','${address}','${value.UserID}','${value.jobType}','${format(new Date(),\"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")}','${value.apptInfo}','${value.siteRegion}','${value.startDate}','${value.endDate}'`;\r\n\r\n  var estimate = await ajax(`${baseURL}/insertValues`, { tableName, values }, \"post\");\r\n  if (estimate !== []) return estimate;\r\n  else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport async function getCustomers() {\r\n  var tableName = 'customers';\r\n\r\n  var customers = await ajax (\r\n    `${baseURL}/fetchValues`,\r\n    {tableName},\r\n    \"post\"\r\n  );\r\n  if(customers !== []) return customers;\r\n  else return 0;\r\n}\r\n\r\nexport async function getAddressList(id) {\r\n  var tableName = \"Address\";\r\n  var condition = `CustomerID = '${id}'`\r\n  const address = await ajax(\r\n    `${baseURL}/fetchValues`,\r\n    { tableName, condition},\r\n    \"post\"\r\n  );\r\n  if (address !== []) return address;\r\n  else {\r\n    return 0;\r\n  }\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\customer.js",["409"],"import { getOverlappingDaysInIntervals } from \"date-fns\";\r\nimport ajax from \"./base\";\r\nconst currentDate = new Date();\r\nlet date = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();\r\nconst baseURL = \"https://reitzel-server.herokuapp.com\";\r\n\r\n\r\n\r\n\r\nexport async function getCustomers() {\r\n    console.log(\"here\");\r\n    var tableName = \"Customers\";\r\n    const customerlist = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      { tableName},\r\n      \"post\"\r\n    );\r\n    console.log(\"customerlist\", customerlist);\r\n    if (customerlist !== []) return customerlist;\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n  export async function getAddresses() {\r\n    console.log(\"here\");\r\n    var tableName = \"Addresses\";\r\n    const addresslist = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      { tableName},\r\n      \"post\"\r\n    );\r\n    console.log(\"addresslist\", addresslist);\r\n    if (addresslist !== []) return addresslist;\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  export async function getCustomer(id){\r\n    var tableName = \"customers\";\r\n    var condition = `CustomerID = '${id}'`\r\n    const customer = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      {tableName, condition},\r\n      \"post\"\r\n    );\r\n      if(customer !== []) return customer;\r\n      else return 0;\r\n\r\n    }\r\n  export async function getCustomerAddresses(id){\r\n    var tableName = \"address\";\r\n    var condition = `CustomerID = '${id}'`\r\n    const addressList = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      {tableName, condition},\r\n      \"post\"\r\n    );\r\n    if(addressList !== []) return addressList;\r\n    else return 0;\r\n  }\r\n  export async function getRegion(id){\r\n    var tableName = \"region\";\r\n    var condition = `RegionID = '${id}'`\r\n    const region = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      {tableName, condition},\r\n      \"post\"\r\n    );\r\n    if(region !== []) return region;\r\n    else return 0;\r\n  }\r\n  export async function getRegionAPI(){\r\n    var tableName = \"region\";\r\n    const region = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      {tableName},\r\n      \"post\"\r\n    );\r\n    if(region !== []) return region;\r\n    else return 0;\r\n  }\r\n\r\n  export async function updateCustomer(id, firstName, lastName, email, phone, billing, city, postal, region){\r\n    var tableName = \"customers\";\r\n    var columnsAndValues = `FirstName='${firstName}',LastName='${lastName}',Phone='${phone}',Email='${email}', BillingAddress='${billing}',City='${city}',PostalCode='${postal}',Region='${region}'`;\r\n  var condition = `CustomerID=${id}`;\r\n  const result = await ajax(\r\n    `${baseURL}/updateValues`,\r\n    { tableName, columnsAndValues, condition },\r\n    \"post\"\r\n  );\r\n  console.log(\"result\", result);\r\n  if (result !== []) return result;\r\n  else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport async function deleteCustomer(id) {\r\n  var tableName = \"customers\";\r\n  var columns = \"*\";\r\n  var condition = `CustomerID='${id}'`;\r\n  const result = await ajax(`${baseURL}/deleteValues`, { tableName, columns, condition }, \"post\");\r\n  console.log(\"result\", result);\r\n  if (result !== []) return result;\r\n  else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport async function addAddress(id, value){\r\n  var tableName = \"address\";\r\n  var values = `${null},'${id}','${value.BillingAddress}','${value.PostalCode}','${value.City}','${value.Prov}','${value.Region}'`;\r\n\r\n  var address = await ajax(`${baseURL}/insertValues`, { tableName, values }, \"post\");\r\n  console.log(\"address\", address);\r\n  if (address !== []) return address;\r\n  else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport async function customerLookup(value){\r\n  var tableName = \"customers\";\r\n  var condition = `CustFirstName LIKE '%${value}%' OR CustLastName LIKE '%${value}%' OR BillingAddress LIKE '%${value}%'`;\r\n  const customers = await ajax(\r\n    `${baseURL}/fetchValues`,\r\n    {tableName, condition},\r\n    \"post\"\r\n  );\r\n  if(customers !== []) return customers;\r\n  else return 0;\r\n}\r\n\r\nexport async function addNotes(value, user, id){\r\n  var tableName = \"customernotes\";\r\n  var values = `${null},'${value}','${date}','${user}','${id}'`;\r\n  const notes = await ajax(\r\n    `${baseURL}/insertValues`,\r\n    {tableName, values},\r\n    \"post\"\r\n  );\r\n  if(notes !== []) return notes;\r\n  else return 0;\r\n}\r\n\r\nexport async function getNotes(id){\r\n  var tableName = \"customernotes\";\r\n  var condition = `CustomerID = '${id}'`;\r\n  const notes = await ajax(\r\n    `${baseURL}/fetchValues`,\r\n    {tableName, condition},\r\n    \"post\");\r\n    if(notes !== []) return notes;\r\n    else return 0;\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesSnapshot.js",["410"],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\trucks.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesCalendar.js",["411"],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tabs.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesTooltip.js",["412"],"import {message, Modal} from 'antd';\r\nimport { Button, Form, Popup, TextArea } from 'devextreme-react';\r\nimport { ButtonItem, SimpleItem } from 'devextreme-react/form';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getAddress } from '../../../api/addresses';\r\nimport { deleteEstimate, updateEstimateInfo } from '../../../api/calendar';\r\n\r\nconst {format} = require('date-fns-tz');\r\n\r\n\r\nexport default function SalesTooltip (model) {\r\n  const data = model.data.appointmentData;\r\n  const [address, setAddress] = useState([]);\r\n  const [showPop, setShowPop] = useState(false);\r\n  const [info, setInfo] = useState(data.text);\r\n  useEffect(() => {\r\n    const func = async() => {\r\n      let result = await getAddress(data.AddressID)\r\n      setAddress(result.data[0]);\r\n    }\r\n    func();\r\n  },[address.length]);\r\n\r\n  const deleteClicked = async() => {\r\n    Modal.confirm({title:\"Do you want to delete this appointment?\", onOk(){deleteEstimate(data.EstimateID)}});\r\n  }\r\n\r\n  const editClicked = async(data) => {\r\n    setShowPop(true);\r\n  }\r\n  return (\r\n    <div>\r\n      <div style={{float:'right'}}>\r\n        <Button hint='Edit appointment' icon='clearformat' onClick={editClicked}></Button><Button icon='clearsquare' hint=\"Delete appointment\" title='DeleteButton' onClick={deleteClicked}></Button>\r\n      </div>\r\n      <b style={{fontSize:15}}>\r\n         {data.text}\r\n      </b>\r\n      <p>\r\n       {address.Address} {address.City}, {address.Province}\r\n       <br/>\r\n       {address.PostalCode}\r\n      </p>\r\n      \r\n      <p style={{color:'grey'}}>{`${format(new Date(data.startDate),\"h':'mm aa\")} - ${format(new Date(data.endDate),\"h':'mm aa\")}`}</p>\r\n    <Popup\r\n    visible={showPop}\r\n    showTitle={true}\r\n    title=\"Appointment editing\"\r\n    width='40%'\r\n    height='30%'\r\n    >\r\n    <>\r\n    <form \r\n    onSubmit={async(e) => {\r\n      let result = await updateEstimateInfo(data.EstimateID, info);\r\n      if(result.status === 200) {\r\n        message.success(\"Appointment updated\");\r\n      }\r\n      else message.error(\"Something went wrong\");\r\n      e.preventDefault();\r\n      \r\n    }}>\r\n      <Form>\r\n        <SimpleItem\r\n        dataField=\"Info\"\r\n        label={{text:\"Change appointment information\",location:\"top\"}}>\r\n          <TextArea\r\n          id=\"UpdatedInfo\"\r\n          title=\"Change appointment information\"\r\n          defaultValue={info}\r\n          onChange={(e) => {setInfo(e.component._changedValue)}}>\r\n          \r\n          </TextArea>\r\n        </SimpleItem>\r\n          <ButtonItem\r\n          horizontalAlignment=\"center\"\r\n          buttonOptions={{text:'Update',type:'Success',useSubmitBehavior:false, onClick:() => {return new Promise(async(resolve, reject) => {\r\n            let result = await updateEstimateInfo(data.EstimateID, info);\r\n            if(result.status === 200) {\r\n              message.success(\"Appointment updated\");\r\n            }\r\n            else message.error(\"Something went wrong\");\r\n            setShowPop(false);\r\n            resolve();\r\n            \r\n          })}}}\r\n          />\r\n      </Form>\r\n    </form>\r\n    \r\n    </>\r\n      \r\n    </Popup>\r\n    </div>\r\n\r\n  )\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Legend.js",["413","414"],"import React, { useEffect, useState } from 'react';\r\nimport { getRegionAPI } from '../api/calendar';\r\n\r\n\r\nfunction Legend(props) {\r\n\r\n    useEffect(async () => {\r\n        let result = await getRegionAPI();\r\n        setRegionInfo(result.data);\r\n    },[]);\r\n    const [regionInfo, setRegionInfo] = useState([]);\r\n\r\n    const renderLegend = () => {\r\n        let rows = [];\r\n\r\n        regionInfo.map((item) =>{\r\n            rows.push(\r\n\r\n            \r\n            <tr key={item.RegionID}>\r\n                <td colSpan='2'>\r\n                    <p>{item.Region}</p>\r\n                </td>\r\n                <td>\r\n                    <div style={{backgroundColor:item.color, color:item.color, padding:\"5px\"}}>_</div>\r\n                </td>\r\n            </tr>);\r\n        })\r\n        return rows;\r\n    }\r\n    return (\r\n        <div>\r\n            <table style={{fontSize:\"12px\", width:\"80%\"}}>\r\n                <thead>\r\n                    <tr >\r\n                        <td colSpan='2'>\r\n                           <h1>Region</h1> \r\n                        </td>\r\n                        <td>\r\n                            <h1>Colour</h1>\r\n                        </td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderLegend()}\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        <td>\r\n                            <i>Legend for Region Colours</i>\r\n                        </td>\r\n                    </tr>\r\n                    \r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Legend;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\SalesTemplate.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillCalendar.js",["415","416","417","418","419"],"import React from \"react\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport Switch from 'devextreme-react/switch';\r\nimport Scheduler, {Resource} from 'devextreme-react/scheduler';\r\nimport SalesTemplate from '../SalesCalendar/SalesTemplate'\r\nimport SalesTooltip from '../SalesCalendar/salesTooltip.js';\r\nimport {getEstimates, deleteEstimate, getUsers, updateEstimate, getRegionAPI, sendUpdate, findCustomer, addNewCustomer, addNewAddress, getLatestCustomer, getLatestAddress, addEstimate} from '../../../api/calendar';\r\nimport CustomStore from 'devextreme/data/custom_store';\r\nimport { message, Modal } from 'antd';\r\nimport UpdateConfirm from '../../Email_Templates/updateConfirm';\r\nimport {renderEmail} from 'react-html-email';\r\nimport 'devextreme-react/tag-box';\r\nconst { confirm } = Modal;\r\n\r\nconst dataSource = new CustomStore({\r\n  key: \"EstimateID\",\r\n  load: async () => {\r\n    const data = await getEstimates();\r\n    let formatData = data.data.map((item) => ({\r\n      EstimateID : item.EstimateID,\r\n      CustomerID : item.CustomerID,\r\n      AddressID : item.AddressID,\r\n      UserID : item.UserID,\r\n      CreationDate : item.CreationDate,\r\n      text : item.EstimateInfo,\r\n      JobType:item.JobType,\r\n      RegionID : item.RegionID,\r\n      startDate : item.startDate,\r\n      endDate : item.endDate\r\n    }));\r\n    return formatData\r\n  },\r\n  update: async (key, values) => {\r\n    let formatData = {\r\n      EstimateID : values.EstimateID,\r\n      CustomerID : values.CustomerID,\r\n      AddressID : values.AddressID,\r\n      UserID : values.UserID,\r\n      CreationDate : values.CreationDate,\r\n      EstimateInfo : values.EstimateInfo,\r\n      RegionID : values.RegionID,\r\n      startDate : values.startDate,\r\n      endDate : values.endDate\r\n  }\r\n    const check = await updateEstimate(key, formatData);\r\n    return check;\r\n  },\r\n  remove: async(key) => {\r\n    const data = await deleteEstimate(key);\r\n    return data\r\n  },\r\n  insert: async (values) => {\r\n    console.log('values', values);\r\n    try{\r\n      const addCustomer = await addNewCustomer(values);\r\n      const latestCustomer = await getLatestCustomer();\r\n      const customerID = latestCustomer.data[0].CustomerID;\r\n      const addAddress = await addNewAddress(customerID, values);\r\n      const latestAddress = await getLatestAddress();\r\n      const addressID = latestAddress.data[0].AddressID;\r\n      const addEstimates = await addEstimate(\r\n        customerID,\r\n        addressID,\r\n        values);\r\n        message.success(\"New estimate added\");\r\n      return addEstimates;\r\n    }\r\n    catch(e){\r\n      console.log(e);\r\n    }\r\n\r\n    \r\n  },\r\n  onUpdating: (key, values) => {\r\n    confirm({title:\"Send email update to customer?\", onOk() {sendEmailUpdate(values)}, cancelText:\"No\"})\r\n  }\r\n});\r\nconst sendEmailUpdate = async (values) => {\r\n  console.log(values);\r\n  let findCustomerEmail = await findCustomer(values.CustomerID);\r\n  let customerEmail = findCustomerEmail.data[0];\r\n  sendUpdate(customerEmail.Email, renderEmail(<UpdateConfirm estimateInfo = {values}/>));\r\n}\r\n\r\nconst currentDate = new Date();\r\nlet date = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();\r\nconst views = ['day','week', 'workWeek','month'];\r\nconst groups = ['UserID'];\r\n\r\nconst renderResourceCell = (model) => {\r\n  return (\r\n      <b>{model.data.FirstName}</b>\r\n  );\r\n}\r\nconst onAppointmentDeleting = (e) => {\r\n  var cancel = true;\r\n  e.cancel = cancel;\r\n  confirm({title:\"Do you want to delete this appointment?\", onOk(){dataSource.remove(e.appointmentData.EstimateID) }, onCancel(){cancel = true}});\r\n}\r\n\r\nclass FillCalendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      groupByDate:false,\r\n      cancel:true,\r\n      userList:\"\",\r\n      regionList:\"\",\r\n      info:false\r\n    };\r\n    \r\n    this.onGroupByDateChanged = this.onGroupByDateChanged.bind(this);\r\n    this.onAppointmentForm = this.onAppointmentForm.bind(this);\r\n    this.salesmanSource = this.salesmanSource.bind(this);\r\n    this.regionSource = this.regionSource.bind(this);\r\n    this.InfoIsHere = this.InfoIsHere.bind(this);\r\n    this.getRegionNames = this.getRegionNames.bind(this);\r\n    this.getUserName = this.getUserName.bind(this);\r\n    this.getRegionID  = this.getRegionID.bind(this);\r\n  }\r\n  async InfoIsHere() {\r\n  let regionData = await this.regionSource();\r\n  let userData = await this.salesmanSource();\r\n  this.setState({userList:userData});\r\n  this.setState({regionList:regionData});\r\n  this.setState({info:true});\r\n} \r\n\r\nasync onAppointmentForm (e) {\r\n  \r\n  if(e.appointmentData.CreationDate) {\r\n    e.cancel = true;\r\n  }\r\n  \r\n  else{\r\n  let form = e.form;\r\n  e.popup.option('showTitle', true);\r\n  e.popup.option('title', 'Quick appointment creation');\r\n  let user = e.appointmentData.UserID;\r\n  let newGroupItems =[\r\n  {\r\n    label:{text: \"First Name\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"firstName\",\r\n  },\r\n  {\r\n    label:{text: \"Last Name\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"lastName\"\r\n  },\r\n  {\r\n    label:{text:'Phone'},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:'phone'\r\n  },\r\n  {\r\n    label:{text:\"Email\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"email\",\r\n  },\r\n\r\n  {\r\n    label:{text:\"Site Address\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"siteAddress\"\r\n  },\r\n  {\r\n    label:{text:\"Site City\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"siteCity\"\r\n  },\r\n  {\r\n    label:{text:\"Site Province\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"siteProv\"\r\n  },\r\n  {\r\n    label:{text:\"Postal Code\"},\r\n    isRequired:true,\r\n    editorType:'dxTextBox',\r\n    dataField:\"sitePostal\"\r\n  },\r\n  {\r\n    label:{text:\"Region\"},\r\n    isRequired:true,\r\n    editorType:'dxSelectBox',\r\n    editorOptions:{\r\n      displayExpr:\"region\",\r\n      valueExpr:\"id\",\r\n      dataSource: this.state.regionList,\r\n    },\r\n    dataField:'siteRegion'\r\n  },\r\n  {\r\n    label:{text:\"Assigned Salesman\"},\r\n    editorType: 'dxTextBox',\r\n    editorOptions:{\r\n      value:this.getUserName(user, this.state.userList),\r\n      readOnly:true\r\n    }\r\n  },\r\n  {\r\n    label:{text: \"Start Date\"},\r\n    colSpan:2,\r\n    editorType:'dxDateBox',\r\n    editorOptions:{type:'datetime', width:'100%'},\r\n    isRequired:true,\r\n    dataField:'startDate'\r\n  },\r\n  {\r\n    label:{text: \"End Date\"},\r\n    colSpan:2,\r\n    editorType:'dxDateBox',\r\n    editorOptions:{type:'datetime', width:'100%'},\r\n    isRequired:true,\r\n    dataField:'endDate'\r\n  },\r\n  {\r\n    label:{text:\"Description\"},\r\n    colSpan:2,\r\n    editorType:'dxTextArea',\r\n    isRequired:true,\r\n    dataField:'apptInfo'\r\n  },\r\n  {\r\n    label:{text:\"Job Type\"},\r\n    colSpan:2,\r\n    isRequired:true,\r\n    editorType:'dxSelectBox',\r\n    editorOptions:{\r\n      items:['loosefill','spray', \"fireproofing\",\"removal\"]\r\n    },\r\n    dataField:'jobType'\r\n  }\r\n];\r\n\r\n  form.itemOption('mainGroup','items', newGroupItems)\r\n}\r\n}\r\n\r\ngetUserName(id, array){\r\n  let user = '';\r\n  array.map((item) => {\r\n    if(item.id === id) {\r\n      user = item.FirstName + \" \" + item.LastName;\r\n    }\r\n  })\r\n  return user;\r\n} \r\n\r\ngetRegionNames(array) {\r\n  let names = [];\r\n  array.map((item) => {\r\n    names.push(item.region);\r\n  });\r\n  return names;\r\n}\r\ngetRegionID(name, array){\r\n  let id = '';\r\n  array.map((item) => {\r\n    if(item.region === name) {\r\n      id = item.FirstName + \" \" + item.LastName;\r\n    }\r\n  })\r\n  return id;\r\n}\r\n  onGroupByDateChanged(args) {\r\n    this.setState({\r\n      groupByDate: args.value\r\n    });\r\n  }\r\n  async regionSource() {\r\n    const data = await getRegionAPI();\r\n    let regionData = data.data.map((item) => ({\r\n      id  : item.RegionID,\r\n      region: item.Region,\r\n      color: item.color\r\n    }))\r\n    console.log(regionData);\r\n    return regionData;\r\n  }\r\n\r\n  async salesmanSource() {\r\n    const data = await getUsers();\r\n    let salesData = data.data.map((item) => ({\r\n      id: item.UserID,\r\n      FirstName : item.FirstName,\r\n      LastName: item.LastName\r\n    }))\r\n    console.log(salesData);\r\n    return salesData;\r\n  }\r\n  componentDidMount(){\r\n    this.InfoIsHere();\r\n}\r\n \r\n  render() {\r\n    if (this.state.info === false){\r\n        return (\r\n          <p>Loading information...</p>\r\n        )\r\n      }\r\n      else{\r\n\r\n      \r\n    return (\r\n      \r\n      <div>\r\n      <Scheduler\r\n        timeZone=\"America/Edmonton\"\r\n        groups = {groups}\r\n        groupByDate={this.state.groupByDate}\r\n        resourceCellRender={renderResourceCell}\r\n        dataSource={dataSource}\r\n        views={views}\r\n        defaultCurrentView=\"workWeek\"\r\n        defaultCurrentDate={date}\r\n        height={800}\r\n        startDayHour={6}\r\n        endDayHour={21}\r\n        appointmentComponent={SalesTemplate}\r\n        appointmentTooltipComponent={SalesTooltip}\r\n        onAppointmentDeleting={onAppointmentDeleting}\r\n        onAppointmentFormOpening={this.onAppointmentForm}\r\n        >\r\n        <Resource\r\n          dataSource={this.state.userList}\r\n          fieldExpr=\"UserID\"\r\n          >\r\n        </Resource>\r\n        <Resource\r\n          dataSource={this.state.regionList}\r\n          fieldExpr=\"RegionID\"\r\n          useColorAsDefault={true}\r\n        ></Resource>\r\n        </Scheduler>\r\n        <div className=\"options\">\r\n        <div className=\"caption\">Group by Date First</div>\r\n        <div className=\"option\">\r\n          <Switch\r\n            value={ this.state.groupByDate }\r\n            onValueChanged={this.onGroupByDateChanged}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n}\r\n\r\nexport default FillCalendar;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\FoamCalendar.js",["420"],"import React from 'react';\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\n\r\nimport Scheduler, {Resource} from 'devextreme-react/scheduler';\r\nimport FoamTemplate from './FoamTemplate.js'\r\n\r\nimport { data, foamData} from './foamData';\r\n\r\nconst currentDate = new Date();\r\nlet date = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();\r\nconst views = ['day','week', 'workWeek','month'];\r\n\r\n\r\nclass FoamCalendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <Scheduler\r\n        width\r\n        timeZone=\"America/Los_Angeles\"\r\n        dataSource={data}\r\n        views={views}\r\n        defaultCurrentView=\"workWeek\"\r\n        defaultCurrentDate={date}\r\n        height={800}\r\n        startDayHour={6}\r\n        appointmentComponent={FoamTemplate}\r\n        >\r\n        <Resource\r\n          dataSource={foamData}\r\n          fieldExpr=\"id\"\r\n          useColorAsDefault={true}\r\n          >\r\n        </Resource>\r\n        </Scheduler>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FoamCalendar;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\updateConfirm.js",["421","422"],"import React from 'react';\r\nimport { Email, Item, A} from 'react-html-email';\r\nimport { getUser } from '../../util/storage';\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst user = getUser();\r\n\r\nconst { format} = require(\"date-fns-tz\");\r\n\r\nfunction Confirmation(props){\r\n    \r\n    return(\r\n        <Email title=\"\">\r\n            <Item>\r\n            <img src={header}></img>\r\n            </Item>\r\n            <Item>\r\n            <br />\r\n            <p>There has been a change in your appointment time. Here are the new details for your booking:</p>\r\n            <p>Job Type: {props.estimateInfo.JobType}</p>\r\n            <p>Date: {format(new Date(props.estimateInfo.startDate),\"MMMM do',' yyyy\")}</p>\r\n            <p> Approximate Arrival Time:  {format(new Date(props.estimateInfo.startDate),\"K:mm\")}</p>\r\n            <br />\r\n            </Item>\r\n            <Item>\r\n            <p>Find attached documents to help prepare your house for your appointment</p>\r\n\r\n            </Item>\r\n            <Item>\r\n                <p>\r\n                    This is an automated email. If you have any questions after reading this email, please reply to your rep at {user.Email} or call the office at 519-886-6100.\r\n            Thank you for your business!\r\n                </p>\r\n                <br />\r\n                <p>\r\n                    Regards,\r\n\r\n            The Reitzel Team \r\n                </p>\r\n               \r\n            \r\n            </Item>\r\n\r\n            \r\n\r\n\r\n        </Email>\r\n    )\r\n}\r\n\r\nexport default Confirmation;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesData.js",[],["423","424"],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\FoamTemplate.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\FillTemplate.js",[],["425","426"],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\Tab.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FoamCalendar\\foamData.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\FillCalendar\\fillData.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuotePrint.js",["427","428","429","430"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useParams } from \"react-router\";\r\nimport qData from \"./quoteData.js\";\r\nimport Headerforquoto from \"../headforquote\";\r\nimport Footerforquoto from \"../footer\";\r\nimport { message, Card } from \"antd\";\r\nimport {sendQuote, addNewQuote, addNewDetails, addNewProductLine, getLatestQuote, getLatestDetail} from '../../api/quotes';\r\nimport QuoteEmail from \"../../Components/Email_Templates/quote_template\";\r\nimport {renderEmail} from 'react-html-email';\r\n\r\n\r\nfunction printQuote() {\r\n  var content = document.getElementById(\"printContents\");\r\n  var pri = document.getElementById(\"ifmcontentstoprint\").contentWindow;\r\n  pri.document.open();\r\n  pri.document.write(content.innerHTML);\r\n  pri.document.close();\r\n  pri.focus();\r\n  pri.print();\r\n}\r\n\r\nasync function emailQuote (customer){\r\n  console.log(customer);\r\n  try {\r\n     await addNewQuote(customer)\r\n    let latestQuote = await getLatestQuote()\r\n    let quoteID = latestQuote.data[0].QuoteID;\r\n    customer.details.map(async (detail) => {\r\n       await addNewDetails(detail, quoteID);\r\n      let latestDetail = await getLatestDetail()\r\n      let detailID = latestDetail.data[0].SubtotalID;\r\n      detail.productArr.map(async (prod) => {\r\n       await addNewProductLine(prod, quoteID, detailID);\r\n      })\r\n    })\r\n    message.success(\"Quote added\");\r\n  } catch (error) {\r\n    message.error(\"Something went wrong - please try again\");\r\n    console.log(error);\r\n  }\r\n  try {\r\n    if(customer.email !== 'undefined'){\r\n      sendQuote(customer.email, renderEmail(<QuoteEmail info={customer}/>))\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    message.error(\"Email failed to send\");\r\n  }\r\n\r\n  \r\n  //var content = document.getElementById(\"printContents\");\r\n  //var email = sendQuote(customer.email, content.innerHTML);\r\n  //message.success(\"Email sent\");\r\n}\r\n\r\nfunction QuotePrint(props) {\r\n  let { qid } = useParams();\r\n\r\n  let history = useHistory();\r\n\r\n  let quotes = qData.quote_data;\r\n  let selectedQuote = parseInt(qid)\r\n    ? quotes.find((d) => {\r\n        return parseInt(d.id) === parseInt(qid);\r\n      })\r\n    : {};\r\n\r\n  if (Object.keys(selectedQuote).length === 0) {\r\n    history.push(`/quotes`);\r\n  }\r\n\r\n  const [quoteData, setQuoteData] = useState({});\r\n\r\n  useEffect(() => {\r\n    setQuoteData(selectedQuote);\r\n  }, [selectedQuote]);\r\n\r\n  const [quoteFormData, setQuoteFormData] = useState(props.quoteFormData);\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        id=\"printContents\"\r\n        className=\"Quote print-page\"\r\n        style={{ width: \"80%\", margin: \"auto\" }}\r\n      >\r\n        <Headerforquoto />\r\n        <Card>\r\n          <strong>Attention:</strong> {quoteFormData.first_name}{\" \"}\r\n          {quoteFormData.last_name}\r\n          <br /> Address: {quoteFormData.billing_address}\r\n          <br /> City: {quoteFormData.city}\r\n          <br /> Postal Code: {quoteFormData.post_code}\r\n          <br /> Phone: {quoteFormData.phone_number}\r\n          <br /> Email: {quoteFormData.email}\r\n          <br />\r\n        </Card>\r\n        <Card>\r\n          <strong>Site Address</strong>\r\n          <br /> Site Address: {quoteFormData.site_address}\r\n          <br /> Site City: {quoteFormData.site_city}\r\n          <br /> Site Province: {quoteFormData.site_prov}\r\n          <br /> Site Postal Code: {quoteFormData.site_postal}\r\n        </Card>\r\n        <div>\r\n          {quoteFormData.details.length > 0 && (\r\n            <table width=\"100%\" border=\"1\" cellPadding=\"10px\">\r\n              <thead>\r\n                <tr>\r\n                  <td colSpan=\"3\">Quote Details</td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {quoteFormData.details.map((item) => {\r\n\r\n                    return (\r\n                      <tr key={item.key} >\r\n                      <tr >\r\n                        <td colSpan=\"3\" style={{width:'100%', minWidth:\"875px\"}}>\r\n                          {item.details}\r\n                        </td>\r\n                        \r\n                      </tr>\r\n                      {item.productArr.map((prod) => {\r\n                        return (\r\n                            <tr key={prod.prodKey}>\r\n                              <td width=\"40%\">\r\n                                {prod.product}\r\n                              </td>\r\n                              <td width=\"40%\">\r\n                                {prod.notes}\r\n                              </td>\r\n                                <td width=\"20%\">\r\n                                  {prod.price}\r\n                                </td>\r\n                              </tr>\r\n                          );\r\n                          })}\r\n                      <tr>\r\n                        <td colSpan=\"3\" style={{textAlign:\"right\"}}>\r\n                          Subtotal:${item.total}\r\n                        </td>\r\n                      </tr>\r\n                      </tr>\r\n                    );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          )}\r\n        </div>\r\n        <p>Notes to customer: {quoteFormData.customer_notes}</p>\r\n        <p>Notes to installers: {quoteFormData.installer_notes}</p>\r\n        <p>Estimator: {quoteFormData.userInfo.FirstName + \" \" + quoteFormData.userInfo.LastName}</p>\r\n        <p>\r\n        WSIB# Account #1941844 /  Firm # 245166V\r\n        </p>\r\n              <Footerforquoto />\r\n      </div>\r\n      <button onClick={printQuote}> Print this Quote</button>\r\n      <button onClick={() => emailQuote(quoteFormData)}>Submit and send as Email</button> \r\n      <iframe\r\n        id=\"ifmcontentstoprint\"\r\n        style={{ height: \"0px\", width: \"0px\", position: \"absolute\" }}\r\n      ></iframe>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuotePrint;\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteEdit.js",["431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496"],"import { getAddressID, getCustomerID, getQuoteDetails, getUserID, getProductList, getQuoteID, updateQuote, updateDetail, updateProduct, deleteProduct, deleteDetail, getAllInfoID } from \"../../api/quoteEditAPI\";\r\nimport {addNewDetails, addNewProductLine} from '../../api/quotes';\r\nimport React, {useState, useEffect} from 'react';\r\nimport Button from \"../../component/quotes/Button\";\r\nimport {useInput} from '../../hooks/input-hook';\r\nimport {Row, Col, Card, Checkbox, message} from 'antd';\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\n\r\nfunction QuoteEdit (props) {\r\n    let quoteID = useRouteMatch('/quotes/:qid/edit').params.qid;\r\n    let history = useHistory();\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    const [allData, setAllData] = useState([]);\r\n    const [quoteData, setQuoteData] = useState([]);\r\n    const [quoteDetail, setQuoteDetail] = useState([]);\r\n    const [customerData, setCustomerData] = useState([]);\r\n    const [addressData, setAddressData] = useState([]);\r\n    const [userData, setUserData] = useState([]);\r\n    const [productList, setProductList] = useState([]);\r\n    const [detailKey, setDetailKey] = useState(0);\r\n    const [prodKey, setProdKey] = useState(0);\r\n\r\n    useEffect( () => {\r\n        let func = async() => {\r\n            let allInfo = await getAllInfoID(quoteID);\r\n            console.log(allInfo.data[0]);\r\n            setAllData(allInfo.data[0]);\r\n            \r\n            let detailList = await getQuoteDetails(quoteID);\r\n            setQuoteDetail(detailList.data);\r\n            let products = await getProductList(quoteID);\r\n            setProductList(products.data);\r\n            createDetails(detailList.data, products.data);\r\n            setText(allInfo.data[0]);\r\n        }\r\n        try {\r\n            func();\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        setLoading(false);\r\n        setcounter(counter + 1);\r\n        console.log(quotedetails);\r\n        },[]);\r\n \r\n\r\n    const createDetails = (detlist, prodlist) => {\r\n        let temp = quotedetails;\r\n        detlist.map((detail) => {\r\n           let detailObj = {\r\n                    id: detail.SubtotalID,\r\n                    key:detailKey,\r\n                    details:detail.subtotalLines,\r\n                    total:detail.subtotalAmount,\r\n                    productArr:[]\r\n                \r\n            }\r\n            setDetailKey(detailKey + 1);\r\n            prodlist.map((prod) => {\r\n                if(prod.subtotalID === detail.SubtotalID){\r\n                    let prodObj = {\r\n                        id:prod.QuoteLineID,\r\n                        key:prodKey,\r\n                        product:prod.Product,\r\n                        notes:prod.Notes,\r\n                        price:prod.Subtotal\r\n                    }\r\n                    if(detailObj.productArr.length === 0){\r\n                        detailObj.productArr[0] =prodObj;\r\n                    }\r\n                    else{\r\n                        detailObj.productArr[detailObj.productArr.length] = prodObj;\r\n                    }\r\n                    setProdKey(prodKey + 1);\r\n                }\r\n            })\r\n            if(temp.length === 0){\r\n                temp[0] = detailObj;\r\n            }\r\n            else{\r\n                temp[temp.length] = detailObj;\r\n            }\r\n            setquotedetails(temp);\r\n        });        \r\n    }\r\n    const setText = (allInfo) => {\r\n        assignCustID(allInfo.CustomerID);\r\n        assignFirstName(allInfo.CustFirstName);\r\n        assignLastName(allInfo.CustLastName);\r\n        assignPhoneNumber(allInfo.Phone);\r\n        assignEmail(allInfo.Email);\r\n        assignBillingAddress(allInfo.BillingAddress);\r\n        assignCity(allInfo.CustCity);\r\n        assignPostCode(allInfo.CustPostalCode);\r\n        assignSiteAddress(allInfo.Address);\r\n        assignSiteCity(allInfo.City);\r\n        assignSiteCode(allInfo.PostalCode);\r\n        assignSiteProv(allInfo.Province);\r\n        assignCustomerNotes(allInfo.notesCustomers);\r\n        assignInstallerNotes(allInfo.notesInstallers);\r\n        assignUserFirstName(allInfo.FirstName);\r\n        assignUserLastName(allInfo.LastName);\r\n\r\n    setcounter(counter + 1);\r\n    }\r\n\r\n    const {value: custID, bind: bindCustID, reset: resetCustID, assignValue: assignCustID} = useInput();\r\n    const {value: firstName, bind: bindFirstName, reset: resetFirstName,assignValue: assignFirstName} = useInput();\r\n    const {value: lastName, bind: bindLastName, reset: resetLastName,assignValue: assignLastName} = useInput();\r\n    const {value: billingAddress, bind: bindBillingAddress, reset: resetBillingAddress, assignValue: assignBillingAddress} = useInput();\r\n    const {value: city, bind: bindCity, reset: resetCity, assignValue: assignCity} = useInput();\r\n    const {value: postCode, bind: bindPostCode, reset: resetPostCode,assignValue: assignPostCode} = useInput();\r\n    const {value: phoneNumber, bind: bindPhoneNumber, reset: resetPhoneNumber, assignValue: assignPhoneNumber} = useInput();\r\n    const {value: email, bind: bindEmail, reset: resetEmail, assignValue: assignEmail} = useInput();\r\n\r\n    const {value: addressID, bind: bindAddressID, reset: resetAddressID, assignValue: assignAddressID} = useInput();\r\n    const {value: siteAddress, bind: bindSiteAddress, reset: resetSiteAddress, assignValue: assignSiteAddress} = useInput();\r\n    const {value: siteCity, bind: bindSiteCity, reset: resetSiteCity, assignValue: assignSiteCity} = useInput();\r\n    const {value: siteCode, bind: bindSiteCode, reset: resetSiteCode,assignValue: assignSiteCode} = useInput();\r\n    const {value: siteProv, bind: bindSiteProv, reset: resetSiteProv, assignValue: assignSiteProv} = useInput();\r\n    \r\n    const {value: customerNotes, bind: bindCustomerNotes, reset: resetCustomerNotes, assignValue: assignCustomerNotes} = useInput();\r\n    const {value: installerNotes, bind: bindInstallerNotes, reset: resetInstallerNotes, assignValue: assignInstallerNotes} = useInput();\r\n\r\n    const {value: userFirstName, bind: bindUserFirstName, reset: resetUserFirstName, assignValue: assignUserFirstName} = useInput();\r\n    const {value: userLastName, bind: bindUserLastName, reset: resetUserLastName, assignValue: assignUserLastName} = useInput();\r\n\r\n    const [tax, setTax] = useState(true);\r\n    const [counter, setcounter] = useState(1);\r\n    const [quotedetails, setquotedetails] = useState([]);\r\n    \r\n    const handleSubmit = async (evt) => {\r\n        evt.preventDefault();\r\n        var quoteInfo = \r\n        {\r\n            id:quoteID,\r\n            customer_notes: customerNotes,\r\n            installer_notes: installerNotes,\r\n            \r\n            total: getQuoteTotal(quotedetails)\r\n        }\r\n        try{\r\n        await updateQuote(quoteInfo);\r\n        quotedetails.map(async (details) => {\r\n            if(details.id !== null){\r\n                await updateDetail(details).then(() => {\r\n                details.productArr.map(async (prod) => {\r\n                    if(prod.id !== null){\r\n                        \r\n                        let prodEdit = await updateProduct(prod);\r\n                    } \r\n                    else{\r\n                        \r\n                        let newProd = await addNewProductLine(prod, quoteID, details.id);\r\n                    }\r\n                });\r\n            });\r\n                \r\n            }\r\n            else{\r\n                await addNewDetails(details, quoteID).then(() => {\r\n                     details.productArr.map(async (prod) => {\r\n                    if(prod.id !== null){\r\n                        let prodEdit = await updateProduct(prod);\r\n                    } \r\n                    else{\r\n                        let newProd = await addNewProductLine(prod, quoteID, details.id);\r\n                    }\r\n                });\r\n                });\r\n               \r\n            }\r\n        });\r\n        message.success(\"Quote successfully updated\");\r\n    }\r\n    catch(e){\r\n        message.error(\"Something went wrong. Try again in a bit\")\r\n    }\r\n    finally{\r\n        history.push('/quotes/quoteList');\r\n    }\r\n        \r\n    }\r\n\r\n    const changeTax = () => {\r\n        if (tax == true){\r\n            setTax(false);\r\n        }\r\n        else if (tax == false){\r\n            setTax(true);\r\n        }\r\n    }        \r\n    const addNewDetail = (e) => {\r\n        e.preventDefault();\r\n        setcounter(counter +1);\r\n        var temp = quotedetails;\r\n        if(temp[temp.length] == 0){\r\n            temp[0] = {\r\n                id:null,\r\n                key:detailKey,\r\n                details:\"\",\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        else{\r\n            temp[temp.length] = {\r\n                id:null,\r\n                key:detailKey,\r\n                details:\"\",\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        setDetailKey(detailKey + 1);\r\n        setquotedetails(temp);\r\n        console.log(quotedetails);\r\n    }\r\n    const handleAddProduct = (details,e) => {\r\n        e.preventDefault();\r\n        setcounter(counter + 1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        if(temp[index].productArr.length == 0){\r\n            temp[index].productArr[0] = {\r\n                id:null,\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                notes:\"\",\r\n                price:0.00\r\n            }\r\n        }\r\n        else{\r\n            temp[index].productArr[temp[index].productArr.length] = {\r\n                id:null,\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                notes:\"\",\r\n                price:0.00\r\n            }\r\n        }\r\n        setProdKey(prodKey + 1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleRemoveRow = async(details, prod ,e) => {\r\n        e.preventDefault();\r\n        console.log(prod.id);\r\n        await deleteProduct(prod.id);\r\n        setcounter(counter - 1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        var prodIndex = temp[index].productArr.indexOf(prod);\r\n        temp[index].productArr.splice(prodIndex,1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleRemoveDetail = async(details,e) => {\r\n        e.preventDefault();\r\n        console.log(details.id);\r\n        details.productArr.forEach(async element => {\r\n            console.log(element.id);\r\n            await deleteProduct(element.id);\r\n        });\r\n        await deleteDetail(details.id);\r\n        setcounter(counter -1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        temp.splice(index,1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleDetailChange = (details, e) => {\r\n        details.details = e.target.value\r\n        details.details.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />')\r\n    }\r\n    const handleProductDetails = (prod, e) => {\r\n        prod.product = e.target.value;\r\n    }\r\n    const handleProductNotes = (prod, e) => {\r\n        prod.notes = e.target.value;\r\n    }\r\n    const handleProductPrice = (prod, e) => {\r\n        if(e.target.value == \"\"){\r\n            e.target.value = 0.00;\r\n        }\r\n        let newPrice = parseFloat(e.target.value);\r\n        let rounded = newPrice.toFixed(2);\r\n        prod.price = rounded;\r\n        setcounter(counter + 1);\r\n    }\r\n    const renderProducts = (details) => {\r\n        let rows = [];\r\n            if(details.productArr.length !== 0){\r\n                details.productArr.map((prod) => {\r\n\r\n                    rows.push(\r\n                         <tr>\r\n                             <td>\r\n                                 Product:\r\n                                 <input type=\"text\" key={prod.prodKey}  defaultValue={prod.product}\r\n                                    onChange={(e) => {\r\n                                        handleProductDetails(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n        \r\n                             </td>\r\n                            <td>\r\n                                Details:\r\n                                <input type=\"text\" key={prod.prodKey} defaultValue={prod.notes}\r\n                                    onChange={(e) => {\r\n                                        handleProductNotes(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n                            </td>\r\n                            <td>\r\n                                Price:\r\n                                <input type=\"number\" step=\".01\" key={prod.prodKey} defaultValue={prod.price}\r\n                                    onChange={(e) => {\r\n                                        handleProductPrice(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n                            </td>\r\n                             <td style={{textAlign:\"right\"}}>\r\n                             <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveRow(details, prod, e)}} >x</Button>\r\n                             </td>\r\n                         </tr>);\r\n                });\r\n            }\r\n            return rows;\r\n    }\r\n    const getTotal = (details) => {\r\n        let total = 0.00;\r\n        details.productArr.map((item) => {\r\n            total = total + parseFloat(item.price);\r\n        });\r\n        if (tax == true){\r\n            total = total * 1.13;\r\n        }\r\n        total = total.toFixed(2);\r\n        details.total = total;\r\n        return total;\r\n    }\r\n    const getQuoteTotal = (detail) => {\r\n        let total = 0.00;\r\n        detail.map((item) => {\r\n            total = total + parseFloat(item.total);\r\n        });\r\n        total = total.toFixed(2);\r\n        return total;\r\n    }\r\n    const renderRows = () => {\r\n        let rows = [];\r\n        if(quotedetails.length > 0){\r\n            \r\n            quotedetails.map((detail) => {\r\n            rows.push(\r\n            <tr>\r\n            <tr>\r\n            <tr>\r\n            <td colSpan=\"2\">\r\n                    <textarea \r\n                    key={detail.key}\r\n                    cols=\"150\" \r\n                    rows=\"6\" \r\n                    className=\"ant-input\"\r\n                    defaultValue={detail.details}\r\n                    onChange={(e) => {\r\n                            handleDetailChange(detail, e)\r\n                        }}\r\n                    >\r\n                    </textarea>\r\n                </td>\r\n                <td></td>\r\n                <td style={{textAlign:\"right\"}}>\r\n                    <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveDetail(detail,e)}} >Delete</Button>\r\n                </td>\r\n            </tr>\r\n            Products:\r\n            </tr>\r\n                <tr>\r\n                    {renderProducts(detail)}\r\n                </tr>\r\n        <tr>\r\n            <td>\r\n                <Button size=\"sm\" variant=\"primary\" onClick={(e) => {handleAddProduct(detail,e)}}>Add Product</Button>\r\n            </td>\r\n              \r\n        </tr>\r\n              \r\n            <tr>\r\n            <td style={{textAlign:\"right\"}}>\r\n                        Subtotal: {getTotal(detail)}\r\n                        </td>\r\n            </tr>\r\n            </tr>\r\n            );\r\n            \r\n        });\r\n        }\r\n        return rows;\r\n    }\r\n    \r\n\r\n    \r\n    if (isLoading) {\r\n        return <div className=\"App\">Loading...</div>;\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"Quote\" style={{width:\"80%\"}}>\r\n                <div>\r\n                    <Row gutter={16}>\r\n                        <Col span={10}>\r\n                            <Card title=\"Customer and Billing\" bordered={false}>\r\n                            Customer:<br />\r\n                    <p>{firstName} {lastName}</p>\r\n                    Address:\r\n                    <p>{billingAddress}</p>\r\n                    City:\r\n                    <p>{city}</p>\r\n                    Postal Code:\r\n                    <p>{postCode}</p>\r\n                    Phone:\r\n                    <p>{phoneNumber}</p>\r\n                    Email:\r\n                    <p>{email}</p>\r\n                            </Card>\r\n                        </Col>\r\n                         <Col span={10}>\r\n                            <Card title=\"Site Address\" bordered={false}>\r\n                    Address:\r\n                    <p>{siteAddress}</p>\r\n                    City:\r\n                    <p>{siteCity}</p>\r\n                    Province:\r\n                    <p>{siteProv}</p>\r\n                    Postal Code:\r\n                    <p>{siteCode}</p>\r\n                            </Card>\r\n                        </Col>\r\n                     </Row>\r\n                    <br/>\r\n                    <br/>\r\n                    <table style={{width:\"100%\"}}>\r\n                        <thead>\r\n                        <tr>\r\n                            <td>Quote Details and Products:</td>\r\n                            \r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {renderRows()}\r\n                        <tr>\r\n                            <td>\r\n                                <Button onClick={(e) => {addNewDetail(e)}}>Add Details</Button>\r\n                            </td>\r\n                        </tr>\r\n                        \r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Apply tax <Checkbox defaultChecked = {true} onChange={() => {changeTax()}}></Checkbox>\r\n                                </td>\r\n                                </tr>\r\n                                <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Quote Total: ${getQuoteTotal(quotedetails)}\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                </table>\r\n\r\n                    Notes to customer:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"customer_notes\"\r\n                    defaultValue={quoteData.customer_notes}\r\n                    onChange={(e) => {\r\n                        assignCustomerNotes(e.target.value);\r\n                    }  }\r\n                    {...bindCustomerNotes}\r\n                    >\r\n                    </textarea>\r\n\r\n                    <br/>\r\n\r\n                    Notes to installers:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"installer_notes\"\r\n                    defaultValue={quoteData.installer_notes}\r\n                    onChange={(e) => {\r\n                        assignInstallerNotes(e.target.value);\r\n                    }}\r\n                    {...bindInstallerNotes}\r\n                    >\r\n                    </textarea>\r\n                    <br/>\r\n                    <p>Estimator: {userFirstName + \" \" + userLastName}</p>< br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    \r\n                    <Button size=\"md\" variant=\"primary\" type=\"submit\" className=\"ant-btn ant-btn-primary\">Update Quote</Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default QuoteEdit;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteList.js",["497","498","499","500","501","502","503"],"import React, {useEffect, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Input} from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {getAllInfo, getDetails, getProducts, SearchAllInfo} from \"../../api/quoteEditAPI\";\r\nimport { getUser } from '../../util/storage';\r\nconst {Search} = Input;\r\nconst {format } = require('date-fns-tz')\r\n\r\n  function QuoteList() {\r\n  let history = useHistory();\r\n  let user = getUser();\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [formData, setFormData] = useState([]);\r\n  const [testData, setTestData] = useState([]);\r\n  const [detailData, setDetailData] = useState([]);\r\n  const [prodData, setProdData] = useState([]);\r\n\r\n    useEffect(() => {\r\n          const func = async () => {\r\n          await getAllInfo().then((result) => {\r\n            setTestData(result.data);\r\n          });\r\n        \r\n          await getDetails().then((item) => {\r\n            setDetailData(item.data);\r\n            console.log(item.data);\r\n          });\r\n          await getProducts().then((item) => {\r\n            setProdData(item.data);\r\n            console.log(item.data);\r\n          })\r\n        }\r\n        func();\r\n        \r\n        if(testData !== []){\r\n          setLoaded(true);\r\n        }\r\n        \r\n      },[]);\r\n\r\n      const getUserQuotes = (list) => {\r\n        let newList = [];\r\n        list.map((item) => {\r\n          if(item.UserID === user.UserID){\r\n            newList.push(item);\r\n          }\r\n        });\r\n        return newList;\r\n      }\r\n    const getDetailsByID = (id) => {\r\n        let array = [];\r\n        detailData.map((item) => {\r\n          if(item.quoteID === id){\r\n            array.push({\r\n              quoteID:item.quoteID,\r\n              id:item.subtotalID,\r\n              subtotalLines:item.subtotalLines,\r\n              total:item.subtotalAmount,\r\n              arr:getProductArr(item.SubtotalID)\r\n            });\r\n          }\r\n        });\r\n        return array;\r\n    }\r\n    const checkDate = (date) => {\r\n      let returnDate = \"\";\r\n      if(date === \"December 31st, 1969\"){\r\n      }\r\n      else{\r\n        returnDate = date;\r\n    }\r\n    return returnDate;\r\n    }\r\n    const getProductArr = (id) => {\r\n      let array = [];\r\n      prodData.map((item) => {\r\n             if(item.subtotalID === id){\r\n                  array.push({\r\n                    prodID:item.QuoteLineID,\r\n                    product:item.Product,\r\n                    notes:item.Notes,\r\n                    price:item.Subtotal\r\n                  })\r\n              }\r\n          });\r\n          return array;\r\n    }\r\n    const renderDetails = () => {\r\n      let rows = [];\r\n      formData.map((item) => {\r\n        rows.push(<Card title=\"Details\" bordered={true} type=\"inner\">\r\n          <p>{item.subtotalLines}</p>\r\n          <strong>Products</strong>\r\n          <table style={{width:'100%'}}>\r\n            <tbody>\r\n              {renderProducts(item.arr)}\r\n            </tbody>\r\n          </table>\r\n          \r\n          <p><strong>Total: </strong>{item.total}</p>\r\n        </Card>)\r\n\r\n      });\r\n      return rows;\r\n    }\r\n    const renderProducts = (array) => {\r\n      let rows = [];\r\n      array.map((item) => {\r\n        rows.push(\r\n          <tr width=\"100px\">\r\n            <td>{item.product}</td>\r\n            <td>{item.notes}</td>\r\n            <td>{item.price}</td>\r\n          </tr>\r\n      )})\r\n      return rows\r\n\r\n    }\r\n    const findQuote = async (value) => {\r\n      let result = await SearchAllInfo(value);\r\n      setTestData(result.data)\r\n    }\r\n    const columns =[\r\n      {\r\n        title:\"Customer Name\",\r\n        key:\"customer\",\r\n        render:(data) => (\r\n          <p>{data.CustFirstName + \" \" + data.CustLastName}</p>\r\n        )\r\n      },\r\n      {\r\n        title:\"Address\",\r\n        key:\"address\",\r\n        render:(data) => (\r\n          <p>{data.Address  + \",\" + \" \" + data.City}</p>\r\n        )\r\n      },\r\n      {},\r\n\r\n      {\r\n        title:\"Salesman\",\r\n        key:\"user\",\r\n        render: (data) =>(\r\n          <div>\r\n             <p>{data.FirstName + \" \" + data.LastName}</p>\r\n          </div>\r\n         \r\n        )\r\n        \r\n      },\r\n      {\r\n        title:\"Show/Edit Quote Info\",\r\n        key:\"OpenQuote\",\r\n        render: (data) => \r\n          (\r\n            <div>\r\n            <Button\r\n            onClick={() => {\r\n                \r\n                setFormData(getDetailsByID(data.QuoteID));\r\n                setShowForm(true);     \r\n                            }}>\r\n            View Quote</Button>\r\n            </div>)\r\n      },\r\n      {\r\n        title:\"Creation Date\",\r\n        key:\"date\",\r\n        render: (data) => (\r\n          <p>{format(new Date(data.creationDate),\"MMMM do',' yyyy\")}</p>\r\n        ),\r\n        sorter: (a,b) => new Date(a.creationDate) - new Date(b.creationDate)\r\n      },\r\n      {\r\n        title:\"Last Modified\",\r\n        key:\"modDate\",\r\n        render: (data) => (\r\n          <p>{checkDate(format(new Date(data.modifyDate), \"MMMM do',' yyyy\"))}</p>\r\n        ),\r\n        sorter: (a,b) => new Date(a.modifyDate) - new Date(b.modifyDate)\r\n      },\r\n      {\r\n        title:\"Options\",\r\n        key:\"options\",\r\n        render: (data) => (\r\n          <Button\r\n            onClick={() => {\r\n              history.push(`/orders/${data.QuoteID}/new`)\r\n            }}>\r\n              Create Work Order\r\n            </Button>\r\n        )\r\n      }   \r\n    ]\r\n    if(loaded){\r\n\r\n      if(user.SecurityLevel === 'admin'){\r\n        return(\r\n        <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Quote\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n          \r\n\r\n        <h2>Active Quotes</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={testData}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Quote\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quotes/${formData[0].quoteID}/edit`)}}\r\n        okText=\"Edit Quote\"\r\n        >\r\n         <div>\r\n           {renderDetails()}\r\n         </div>\r\n        </Modal>\r\n          </div>\r\n      )\r\n      }\r\n      else if (user.SecurityLevel === 'salesman'){\r\n        return (\r\n          <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Quote\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n          \r\n\r\n        <h2>Your Active Quotes</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={getUserQuotes(testData)}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Quote\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quoteinfo/${formData[0].quoteID}`)}}\r\n        okText=\"Edit Quote\"\r\n        >\r\n         <div>\r\n           {renderDetails()}\r\n         </div>\r\n        </Modal>\r\n          </div>\r\n        );\r\n      }\r\n      \r\n    }\r\n\r\n    else{\r\n      return(\r\n        <div>\r\n          Loading...\r\n        </div>\r\n        \r\n      );\r\n      \r\n    }\r\n    }\r\nexport default QuoteList;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\QuoteOne.js",["504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528"],"import React, {useState, useEffect} from \"react\";\r\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport Button from \"../../component/quotes/Button\";\r\nimport {useInput} from '../../hooks/input-hook';\r\nimport { useParams } from \"react-router\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport qData from './quoteData.js';\r\nimport {getCustomerAddresses, getCustomers} from '../../api/customer';\r\nimport {getUser} from '../../util/storage';\r\nimport { AutoComplete, Card, Row, Col, Checkbox } from \"antd\";\r\n\r\nfunction QuoteOne(props) {\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    let { qid } = useParams();\r\n\r\n    let history = useHistory();\r\n\r\n    const {value, bind, reset} = useInput('');\r\n    \r\n    const data = useSelector( state => state.quoteOneReducer.quote_one);\r\n    \r\n    let  quotes = qData.quote_data;\r\n    let selectedQuote  = (parseInt(qid)) ? quotes.find((d) => { return parseInt(d.id) == parseInt(qid) }): {};\r\n    \r\n    \r\n    if(Object.keys(selectedQuote).length == 0){\r\n        history.push(`/quotes`);\r\n    }\r\n    const [user, setUser] = useState([]);\r\n    const [quoteData, setQuoteData] = useState({});\r\n    const [customers, setCustomers] = useState([]);\r\n    const [addresses, setAddresses] = useState([]);\r\n    \r\n    useEffect(async () => {\r\n        let result = await getCustomers();\r\n            let cust = result.data.map((c) => (\r\n                    {\r\n                    value : c.CustFirstName + \" \" + c.CustLastName + \" \" + c.CustomerID,\r\n                    id : c.CustomerID,\r\n                    name : c.CustFirstName + \" \" + c.CustLastName,\r\n                    first_name : c.CustFirstName,\r\n                    last_name : c.CustLastName,\r\n                    phone : c.Phone,\r\n                    email : c.Email,\r\n                    address : c.BillingAddress,\r\n                    city : c.CustCity,\r\n                    postal_code : c.CustPostalCode,\r\n                    region : c.CustRegion,\r\n                }\r\n            ));\r\n            setCustomers(cust);\r\n            setLoading(false);\r\n            setUser(getUser());    \r\n        },[selectedQuote]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {value: custID, assignValue: assignCustID} = useInput();\r\n    const {value: firstName, bind: bindFirstName, assignValue: assignFirstName} = useInput();\r\n    const {value: lastName, bind: bindLastName, assignValue: assignLastName} = useInput();\r\n    const {value: billingAddress, bind: bindBillingAddress, assignValue: assignBillingAddress} = useInput();\r\n    const {value: city, bind: bindCity, assignValue: assignCity} = useInput();\r\n    const {value: postCode, bind: bindPostCode, assignValue: assignPostCode} = useInput();\r\n    const {value: phoneNumber, bind: bindPhoneNumber, assignValue: assignPhoneNumber} = useInput();\r\n    const {value: email, bind: bindEmail, assignValue: assignEmail} = useInput();\r\n\r\n    const {value: addressID, assignValue: assignAddressID} = useInput();\r\n    const {value: siteAddress, bind: bindSiteAddress, assignValue: assignSiteAddress} = useInput();\r\n    const {value: siteCity, bind: bindSiteCity, assignValue: assignSiteCity} = useInput();\r\n    const {value: siteCode, bind: bindSiteCode, assignValue: assignSiteCode} = useInput();\r\n    const {value: siteProv, bind: bindSiteProv, assignValue: assignSiteProv} = useInput();\r\n    \r\n    const {value: customerNotes, bind: bindCustomerNotes,assignValue: assignCustomerNotes} = useInput();\r\n    const {value: installerNotes, bind: bindInstallerNotes, assignValue: assignInstallerNotes} = useInput();\r\n\r\n    const [tax, setTax] = useState(true);\r\n        const [counter, setcounter] = useState(1);\r\n        const [detailKey, setDetailKey] = useState(1);\r\n        const [prodKey, setProdKey] = useState(1);\r\n        const [quotedetails, setquotedetails] = useState([{\r\n                    key:0,\r\n                    details:selectedQuote.details,\r\n                    total:0.00,\r\n                    productArr:[{\r\n                        prodKey:0,\r\n                        product:\"\",\r\n                        notes:\"\",\r\n                        price:0.00\r\n                    }]\r\n                }]);\r\n\r\n    \r\n    \r\n    async function onCustomerSelect(e, option) {\r\n        if ((e == null || e == \"\" || e == undefined)) {\r\n            \r\n        } else {\r\n            assignCustID(option.id)\r\n            assignFirstName(option.first_name)\r\n            assignLastName(option.last_name)\r\n            assignPhoneNumber(option.phone)\r\n            assignEmail(option.email)\r\n            assignBillingAddress(option.address)\r\n            assignCity(option.city)\r\n            assignPostCode(option.postal_code)\r\n            let result = await getCustomerAddresses(option.id);\r\n            let addressList = result.data.map((item) => (\r\n                {\r\n                    value : item.Address,\r\n                    id:item.AddressID,\r\n                    address:item.Address,\r\n                    postal:item.PostalCode,\r\n                    city:item.City,\r\n                    prov:item.Province,\r\n                    region:item.Region\r\n\r\n                }\r\n            ));\r\n            setAddresses(addressList);\r\n        }\r\n    }\r\n\r\n    async function onAddressSelect(e, option){\r\n        if ((e == null || e == \"\" || e == undefined)) {\r\n            \r\n        } else {\r\n            assignAddressID(option.id)\r\n            assignSiteAddress(option.address)\r\n            assignSiteCity(option.city)\r\n            assignSiteProv(option.prov)\r\n            assignSiteCode(option.postal)\r\n        }\r\n    }\r\n    \r\n    const handleSubmit = (evt) => {\r\n\r\n        var payload = \r\n        {\r\n            userInfo:user,\r\n            id:custID,\r\n            addressID: addressID,\r\n            first_name: firstName,\r\n            last_name: lastName,\r\n            billing_address: billingAddress,\r\n            city: city,\r\n            post_code: postCode,\r\n            phone_number: phoneNumber,\r\n            email: email,\r\n            site_address: siteAddress,\r\n            site_city: siteCity,\r\n            site_prov:siteProv,\r\n            site_postal:siteCode,\r\n            customer_notes: customerNotes,\r\n            installer_notes: installerNotes,\r\n            details: quotedetails,\r\n            total: getQuoteTotal(quotedetails)\r\n        }\r\n\r\n        dispatch({\r\n            type: \"quote_one\",\r\n            payload: payload\r\n        })\r\n\r\n        props.onSetQuoteFormDataChange(payload);\r\n        reset();\r\n        evt.preventDefault();\r\n\r\n    }\r\n\r\n    \r\n\r\n    const handleSubmitEvent = (values) => {\r\n        console.log((values))\r\n        values.preventDefault();\r\n    }\r\n\r\n    const changeTax = () => {\r\n        if (tax == true){\r\n            setTax(false);\r\n        }\r\n        else if (tax == false){\r\n            setTax(true);\r\n        }\r\n    }        \r\n    const addNewDetail = (e) => {\r\n        e.preventDefault();\r\n        setcounter(counter +1);\r\n        var temp = quotedetails;\r\n        if(temp[temp.length] == 0){\r\n            temp[0] = {\r\n                key:detailKey,\r\n                details:\"\",\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        else{\r\n            temp[temp.length] = {\r\n                key:detailKey,\r\n                details:\"\",\r\n                total:0.00,\r\n                productArr:[]\r\n            }\r\n        }\r\n        setDetailKey(detailKey + 1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleAddProduct = (details,e) => {\r\n        e.preventDefault();\r\n        setcounter(counter + 1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        if(temp[index].productArr.length == 0){\r\n            temp[index].productArr[0] = {\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                notes:\"\",\r\n                price:0.00\r\n            }\r\n        }\r\n        else{\r\n            temp[index].productArr[temp[index].productArr.length] = {\r\n                prodKey:prodKey,\r\n                product:\"\",\r\n                notes:\"\",\r\n                price:0.00\r\n            }\r\n        }\r\n        setProdKey(prodKey + 1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleRemoveRow = (details, prod ,e) => {\r\n        e.preventDefault();\r\n        setcounter(counter - 1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        var prodIndex = temp[index].productArr.indexOf(prod);\r\n        temp[index].productArr.splice(prodIndex,1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleRemoveDetail = (details,e) => {\r\n        e.preventDefault();\r\n        setcounter(counter -1);\r\n        var temp = quotedetails;\r\n        var index = temp.indexOf(details);\r\n        temp.splice(index,1);\r\n        setquotedetails(temp);\r\n    }\r\n    const handleDetailChange = (details, e) => {\r\n        details.details = e.target.value\r\n        details.details.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />')\r\n    }\r\n    const handleProductDetails = (prod, e) => {\r\n        prod.product = e.target.value;\r\n    }\r\n    const handleProductNotes = (prod, e) => {\r\n        prod.notes = e.target.value;\r\n    }\r\n    const handleProductPrice = (prod, e) => {\r\n        if(e.target.value == \"\"){\r\n            e.target.value = 0.00;\r\n        }\r\n        let newPrice = parseFloat(e.target.value);\r\n        let rounded = newPrice.toFixed(2);\r\n        prod.price = rounded;\r\n        setcounter(counter + 1);\r\n    }\r\n\r\n    const renderProducts = (details) => {\r\n        let rows = [];\r\n            if(details.productArr.length !== 0){\r\n                details.productArr.map((prod) => {\r\n\r\n                    rows.push(\r\n                         <tr>\r\n                             <td>\r\n                                 Product:\r\n                                 <input type=\"text\" key={prod.prodKey}  defaultValue={prod.product}\r\n                                    onChange={(e) => {\r\n                                        handleProductDetails(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n        \r\n                             </td>\r\n                            <td>\r\n                                Details:\r\n                                <input type=\"text\" key={prod.prodKey} defaultValue={prod.notes}\r\n                                    onChange={(e) => {\r\n                                        handleProductNotes(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     />\r\n                            </td>\r\n                            <td>\r\n                                Price:\r\n                                <input type=\"number\" step=\".01\" key={prod.prodKey} defaultValue={prod.price}\r\n                                    onChange={(e) => {\r\n                                        handleProductPrice(prod, e);\r\n                                     }}\r\n                                     className=\"ant-input\"\r\n                                     defaultValue='0.00'\r\n                                     />\r\n                            </td>\r\n                             <td style={{textAlign:\"right\"}}>\r\n                             <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveRow(details, prod, e)}} >x</Button>\r\n                             </td>\r\n                         </tr>);\r\n                });\r\n            }\r\n            return rows;\r\n    }\r\n    const getTotal = (details) => {\r\n        let total = 0.00;\r\n        details.productArr.map((item) => {\r\n            total = total + parseFloat(item.price);\r\n        });\r\n        if (tax == true){\r\n            total = total * 1.13;\r\n        }\r\n        total = total.toFixed(2);\r\n        details.total = total;\r\n        return total;\r\n    }\r\n    const getQuoteTotal = (detail) => {\r\n        let total = 0.00;\r\n        detail.map((item) => {\r\n            total = total + parseFloat(item.total);\r\n        });\r\n        total = total.toFixed(2);\r\n        return total;\r\n    }\r\n    const renderRows = () => {\r\n        let rows = [];\r\n        if(quotedetails !== []){\r\n            \r\n            quotedetails.map((detail) => {\r\n            rows.push(\r\n            <tr>\r\n            <tr>\r\n            <tr>\r\n            <td colSpan=\"2\">\r\n                    <textarea \r\n                    key={detail.key}\r\n                    cols=\"150\" \r\n                    rows=\"6\" \r\n                    className=\"ant-input\"\r\n                    defaultValue={detail.details}\r\n                    onChange={(e) => {\r\n                            handleDetailChange(detail, e)\r\n                        }}\r\n                    >\r\n                    </textarea>\r\n                </td>\r\n                <td></td>\r\n                <td style={{textAlign:\"right\"}}>\r\n                    <Button size=\"sm\" variant=\"danger\"  onClick={(e) => { handleRemoveDetail(detail,e)}} >Delete</Button>\r\n                </td>\r\n            </tr>\r\n            Products:\r\n            </tr>\r\n                <tr>\r\n                    {renderProducts(detail)}\r\n                </tr>\r\n        <tr>\r\n            <td>\r\n                <Button size=\"sm\" variant=\"primary\" onClick={(e) => {handleAddProduct(detail,e)}}>Add Product</Button>\r\n            </td>\r\n              \r\n        </tr>\r\n              \r\n            <tr>\r\n            <td style={{textAlign:\"right\"}}>\r\n                        Subtotal: {getTotal(detail)}\r\n                        </td>\r\n            </tr>\r\n            </tr>\r\n            );\r\n            \r\n        });\r\n        }\r\n        return rows;\r\n    }\r\n    \r\n\r\n    \r\n    if (isLoading) {\r\n        return <div className=\"App\">Loading...</div>;\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"Quote\" style={{width:\"80%\"}}>\r\n                <h2> {quoteData.name}</h2>\r\n                <div>\r\n                    Select Customer:\r\n                    <AutoComplete \r\n                    onSelect={(e, option) => {onCustomerSelect(e, option)}}\r\n                    style={{ width: 200 }}\r\n                    options={customers}\r\n                    placeholder=\"Enter a customer\"\r\n                    filterOption={(inputValue, option) =>\r\n                        option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n                      }>    \r\n                    </AutoComplete>\r\n                    <br/>\r\n                    Select Site Address:\r\n                    <AutoComplete\r\n                    onSelect={(e, option) => {onAddressSelect(e, option)}}\r\n                    style={{ width: 200 }}\r\n                    options={addresses}\r\n                    placeholder=\"Choose an address\"\r\n                    filterOption={(inputValue, option) =>\r\n                        option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n                      }\r\n                    notFoundContent=\"Choose a customer first or no addresses found\"\r\n                    ></AutoComplete>\r\n                    <br/>\r\n                    <Row gutter={16}>\r\n                        <Col span={10}>\r\n                            <Card title=\"Customer and Billing\" bordered={false}>\r\n                            Customer:<br />\r\n                    <input type=\"text\" className=\"ant-input ant-col-8\" name=\"first_name\"\r\n                            placeholder=\"First Name\" {...bindFirstName} />\r\n                    <input type=\"text\" className=\"ant-input ant-col-8\" name=\"last_name\"\r\n                            placeholder=\"Last Name\" {...bindLastName} />\r\n                    <br/>\r\n                    Address:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"billing_address\"\r\n                            placeholder=\"Billing Address\" {...bindBillingAddress} />\r\n                    <br/>\r\n                    City:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"city\"\r\n                            placeholder=\"contractor city\" {...bindCity} />\r\n\r\n                    <br/>\r\n                    Postal Code:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"postal_code\"\r\n                            placeholder=\"contractor postal code\" {...bindPostCode} />\r\n                    <br/>\r\n                    Phone:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"phone_number\"\r\n                            placeholder=\"contractor phone number\" {...bindPhoneNumber} />\r\n\r\n                    <br/>\r\n                    Email:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"email\"\r\n                            placeholder=\"contractor email\" {...bindEmail} />\r\n                            </Card>\r\n                        </Col>\r\n                         <Col span={10}>\r\n                            <Card title=\"Site Address\" bordered={false}>\r\n                    Address:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"site_address\"\r\n                            placeholder=\"Site Address\" {...bindSiteAddress} />\r\n                    <br/>\r\n                    City:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"site_city\"\r\n                            placeholder=\"Site City\" {...bindSiteCity} />\r\n                    <br/>\r\n                    Province:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"site_prov\"\r\n                            placeholder=\"Site Province\" {...bindSiteProv} />\r\n                            < br/>\r\n                    Postal Code:\r\n                    <input type=\"text\" className=\"ant-input\" name=\"site_code\"\r\n                            placeholder=\"Site Postal Code\" {...bindSiteCode} />\r\n                            </Card>\r\n                        </Col>\r\n                     </Row>\r\n                    <br/>\r\n                    <br/>\r\n                    <table style={{width:\"100%\"}}>\r\n                        <thead>\r\n                        <tr>\r\n                            <td>Quote Details and Products:</td>\r\n                            \r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {renderRows()}\r\n                        <tr>\r\n                            <td>\r\n                                <Button onClick={(e) => {addNewDetail(e)}}>Add Details</Button>\r\n                            </td>\r\n                        </tr>\r\n                        \r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Apply tax <Checkbox defaultChecked = {true} onChange={() => {changeTax()}}></Checkbox>\r\n                                </td>\r\n                                </tr>\r\n                                <tr>\r\n                                <td style={{textAlign:\"right\"}}>\r\n                                    Quote Total: ${getQuoteTotal(quotedetails)}\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                </table>\r\n\r\n                    Notes to customer:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"customer_notes\"\r\n                    defaultValue={selectedQuote.customer_notes}\r\n                    onChange={(e) => {\r\n                        assignCustomerNotes(e.target.value);\r\n                    }  }\r\n                    {...bindCustomerNotes}\r\n                    >\r\n                    </textarea>\r\n\r\n                    <br/>\r\n\r\n                    Notes to installers:\r\n                    <textarea \r\n                    cols=\"150\" \r\n                    rows=\"3\" \r\n                    className=\"ant-input\"\r\n                    name=\"installer_notes\"\r\n                    defaultValue={selectedQuote.installer_notes}\r\n                    onChange={(e) => {\r\n                        assignInstallerNotes(e.target.value);\r\n                    }}\r\n                    {...bindInstallerNotes}\r\n                    >\r\n                    </textarea>\r\n                    <br/>\r\n                    Estimator: {user.FirstName + \" \" + user.LastName} \r\n\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <Button size=\"md\" variant=\"primary\" type=\"submit\" className=\"ant-btn ant-btn-primary\">Submit</Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default QuoteOne;\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\FormOne.js",["529","530","531"],"import React, { useState, useEffect } from \"react\";\r\nimport CustomSelect from \"../../component/quotes/CustomSelect.js\";\r\nimport qData from \"./quoteData.js\";\r\n\r\nconst data = qData.quote_data;\r\n\r\nfunction FormOne(props) {\r\n  const [quoteDataId, setQuoteDataId] = useState(props.quoteDataId);\r\n \r\n  function onSelectChange(e) {\r\n    if (!(e === null || e === \"\" || e === undefined)) {\r\n      props.onSetQuoteDataChange(data.find((d) => d.id == e));\r\n    } else {\r\n      props.onSetQuoteDataChange({});\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Form\">\r\n      <h2>Quote Selection</h2>\r\n      <form>\r\n        <div>\r\n          <label> Select Quote Type</label>\r\n          <CustomSelect\r\n            data={data}\r\n            quoteDataId={quoteDataId}\r\n            onSelectChange={onSelectChange}\r\n          />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormOne;\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\quotes\\quoteData.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\CustomSelect.js",["532","533"],"import React, { useState } from \"react\";\r\n\r\nfunction CustomSelect(props) {\r\n\tconst [data] = useState(props.data);\r\n\tconst [quoteDataId, setQuoteDataId] = useState(props.quoteDataId);\r\n\r\n\tfunction onChange(event) {\r\n\t\t// setQuoteDataId(event.target.value);\r\n\t\tif (props.onSelectChange) {\r\n\t\t\tprops.onSelectChange(event.target.value);\r\n\t\t}\r\n\t}\r\n\r\n\tlet options = data.map((d) => (\r\n\t\t<option key={d.id} value={d.id} data={d} >\r\n\t\t\t{d.name}\r\n\t\t</option>\r\n\t));\r\n\r\n\treturn (\r\n\t\t<select\r\n\t\t\tname=\"customSearch\"\r\n\t\t\tclassName=\"custom-search-select\"\r\n\t\t\tonChange={onChange}\r\n\t\t\tplaceholder=\"Select Item\"\r\n\t\t>\r\n\t\t\t<option value=\"\">Select Item</option>\r\n\t\t\t{options}\r\n\t\t</select>\r\n\t);\r\n}\r\nexport default CustomSelect;\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\Email_Templates\\quote_template.js",["534","535","536","537"],"import { findProps } from 'devextreme-react/core/template';\r\nimport React from 'react';\r\nimport Text from 'react';\r\nimport { Email, Item, Box, Image} from 'react-html-email';\r\nimport {Card} from 'antd';\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst footer = \"https://ibb.co/kHTHdfL\";\r\n\r\n\r\n\r\nfunction QuoteEmail (props) {\r\n  let customer = props.info;\r\nreturn (\r\n  <Email title=\"Reitzel Insulation Quote Details\"> \r\n    <Box>\r\n    <Image src={header} alt=\"Reitzel Insulation\" width={875} height={100}>\r\n    </Image>\r\n      <Item align=\"left\">\r\n     \r\n          <strong>Attention:</strong> {customer.first_name}{\" \"}\r\n          {customer.last_name}\r\n          <br /> Address: {customer.billing_address}\r\n          <br /> City: {customer.city}\r\n          <br /> Postal Code: {customer.post_code}\r\n          <br /> Phone: {customer.phone_number}\r\n          <br /> Email: {customer.email}\r\n          <br />\r\n\r\n          <strong>Site Address</strong>\r\n          <br /> Site Address: {customer.site_address}\r\n          <br /> Site City: {customer.site_city}\r\n          <br /> Site Province: {customer.site_prov}\r\n          <br /> Site Postal Code: {customer.site_postal}\r\n\r\n      </Item>\r\n      <div>\r\n          {customer.details.length > 0 && (\r\n            <table width=\"100%\" border=\"1\" cellPadding=\"10px\">\r\n              <thead>\r\n                <tr>\r\n                  <td colSpan=\"3\">Quote Details</td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {customer.details.map((item) => {\r\n\r\n                    return (\r\n                      <tr key={item.key}>\r\n                      <tr>\r\n                        <td colSpan=\"3\" style={{width:'100%', minWidth:\"875px\"}}>\r\n                          {item.details}\r\n                        </td>\r\n                        \r\n                      </tr>\r\n                      {item.productArr.map((prod) => {\r\n                        return (\r\n                            <tr key={prod.prodKey}>\r\n                              <td>\r\n                                {prod.product}\r\n                              </td>\r\n                              <td>\r\n                                {prod.notes}\r\n                              </td>\r\n                                <td>\r\n                                  {prod.price}\r\n                                </td>\r\n                              </tr>\r\n                          );\r\n                          })}\r\n                      <tr>\r\n                        <td colSpan=\"3\" style={{textAlign:\"right\"}}>\r\n                          Subtotal:${item.total}\r\n                        </td>\r\n                      </tr>\r\n                      </tr>\r\n                    );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          )}\r\n        </div>\r\n    </Box>\r\n  </Email>\r\n)\r\n}\r\n\r\nexport default QuoteEmail;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\component\\quotes\\Button.js",["538"],"// ./components/Button.js\r\nimport React, { useState } from \"react\";\r\nfunction Button(props) {\r\n  // const [size] = useState(props.size);\r\n  // const [variant] = useState(props.variant);\r\n  return (\r\n    <button class={`ant-btn ant-btn-${props.variant} ant-btn-${props.size}`} onClick={props.onClick}>{props.children}</button>\r\n  );\r\n}\r\nexport default Button;\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\hooks\\input-hook.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\quotes.js",["539","540"],"import ajax from \"./base\";\r\n\r\nconst baseURL = \"https://reitzel-server.herokuapp.com\";\r\nconst currentDate = new Date();\r\nlet date = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();\r\n\r\nexport async function sendQuote(customer, email){\r\n    var to = customer;\r\n    var subject = \"Your quote with Rietzel Insulation\";\r\n    var html = email;\r\n\r\n    var completed = await ajax(`${baseURL}/sendEmailHtml`, {to, subject, html}, \"post\");\r\n    if (completed !== []) return completed;\r\n    else return 0;\r\n }\r\n\r\n \r\nexport async function getCustomers() {\r\n    var tableName = \"Customers\";\r\n    const customerlist = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      { tableName},\r\n      \"post\"\r\n    );\r\n    console.log(\"customerlist\", customerlist);\r\n    if (customerlist !== []) return customerlist;\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  export async function getCustomerAddresses(id){\r\n    var tableName = \"address\";\r\n    var condition = `CustomerID = '${id}'`\r\n    const addressList = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      {tableName, condition},\r\n      \"post\"\r\n    );\r\n    if(addressList !== []) return addressList;\r\n    else return 0;\r\n  }\r\n\r\n  export async function getCustomerFiltered(filter){\r\n    var tableName = \"Customers\";\r\n    var condition = `FirstName = '${filter}%'`\r\n    const customerlist = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      { tableName, condition},\r\n      \"post\"\r\n    );\r\n    console.log(\"customerlist\", customerlist);\r\n    if (customerlist !== []) return customerlist;\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  export async function addNewQuote(value){\r\n    var tableName = \"quotes\";\r\n    var values = `'${null}','${value.addressID}','${value.id}','${value.userInfo.UserID}','${value.total}','${value.customer_notes}','${value.installer_notes}','${date}',${null},${null}`;\r\n    var quote = await ajax(`${baseURL}/insertValues`, { tableName, values }, \"post\");\r\n    console.log(\"quote\", quote);\r\n    if (quote !== []) return quote;\r\n    else {\r\n      return 0;\r\n    }\r\n    }\r\n\r\n  export async function addNewDetails(values, id){\r\n    var tableName = \"subtotallines\";\r\n    var values = `'${null}','${id}','${values.details}','${values.total}'`;\r\n    var details = await ajax(`${baseURL}/insertValues`, {tableName, values }, \"post\");\r\n    console.log(details);\r\n    if(details !== []) return details;\r\n    else{\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  export async function addNewProductLine(values, id, detailID){\r\n    var tableName = \"quotelines\";\r\n    var values = `'${null}','${detailID}', '${id}','${values.product}','${values.notes}', '${values.price}'`;\r\n    var product = await ajax(`${baseURL}/insertValues`, {tableName, values }, \"post\");\r\n    console.log(product);\r\n    if(product !== []) return product;\r\n    else{\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  export async function getLatestQuote() {\r\n    let sql = `SELECT * FROM quotes ORDER BY QuoteID DESC LIMIT 1`\r\n    const quote = await ajax(\r\n      `${baseURL}/processCustomQuery`,\r\n      {sql},\r\n      \"post\"\r\n    );\r\n    if (quote !== []) return quote;\r\n    else{\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  export async function getLatestDetail() {\r\n    let sql = `SELECT * FROM subtotallines ORDER BY subtotalID DESC LIMIT 1`\r\n    const quote = await ajax(\r\n      `${baseURL}/processCustomQuery`,\r\n      {sql},\r\n      \"post\"\r\n    );\r\n    if (quote !== []) return quote;\r\n    else{\r\n      return 0;\r\n    }\r\n  }","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\footer\\index.js",["541","542","543","544"],"import { Center } from \"devextreme-react/map\";\r\nimport React from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst visa = \"https://i.ibb.co/XXWJ82B/visa.png\";\r\nconst master = \"https://i.ibb.co/DgctQDJ/master.png\";\r\nconst express = \"https://i.ibb.co/HhyY0k3/express.png\";\r\n\r\n\r\nexport default function Footerforquote() {\r\n  return (\r\n    <div className=\"footerforqueto\">\r\n      <div className=\"beware\">\r\n        PLEASE BE AWARE THAT POLYURETHANE SPRAY FOAM INSULATION REQUIRES A\r\n        THERMAL BARRIER I.E. DRYWALL, OR FIREPROOFING. ¼ INCH TOLERANCE DURING\r\n        APPLICATION IS REQUIRED.{\" \"}\r\n      </div>\r\n      <div className=\"payment\">\r\n        PAYMENT UPON COMPLETION OF WORK IS REQUIRED IN FULL BY CASH, CHEQUE,\r\n        VISA, MASTERCARD, OR AMERICAN EXPRESS. REITZEL INSULATION DOES NOT GIVE\r\n        TERMS UNLESS PRE-AUTHORIZED PRIOR TO PROJECT START DATE.\r\n      </div>\r\n      <div className=\"cardlogos\">\r\n        <img src={visa}></img>\r\n        <img src={express}></img>\r\n        <img src={master}></img>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\headforquote\\index.js",["545","546"],"import React from \"react\";\r\nimport \"./index.css\";\r\nconst logo=  \"https://i.ibb.co/FVFjQwV/logo.png\";\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\n\r\nexport default function HeadForQuote() {\r\n  return (\r\n    <div className=\"headerforquoto\">\r\n      <img src={header}></img>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderPreview.js",["547","548","549","550","551"],"import {Button, Space} from 'antd';\r\n\r\n\r\nconst header = \"https://i.ibb.co/0snCVqq/header.png\";\r\nconst {format } = require('date-fns-tz');\r\n\r\n\r\nexport default function OrderPreview(props) {\r\n\r\n    const info = props.orderInfo;\r\n    const date = new Date();\r\n    const currentDate = date.getDay() + \" \" + date.getMonth() + \" \" + date.getFullYear();\r\n\r\n    function printContent() {\r\n        var content = document.getElementById(\"workForm\");\r\n        var pri = document.getElementById(\"ifmcontentstoprint\").contentWindow;\r\n        pri.document.open();\r\n        pri.document.write(content.innerHTML);\r\n        pri.document.close();\r\n        pri.focus();\r\n        pri.print();\r\n    }\r\n    function renderProducts(detail){\r\n        console.log(detail);\r\n        let prods=[];\r\n        detail.productArr.map((item) => {\r\n            prods.push(\r\n                <div>\r\n                    <p>{item.product} {item.notes}</p>\r\n                    <p>{item.price}</p>\r\n                </div>\r\n                \r\n            )\r\n        });\r\n        return prods;\r\n    }\r\n\r\n    function renderRows() {\r\n        let rows = [];\r\n        info.selectedDetails.map((item) => {\r\n            rows.push(\r\n                <tr>\r\n                    <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                        {info.allInfo.FirstName + \" \" + info.allInfo.LastName}\r\n                    </td>\r\n                    <td colSpan=\"2\"\r\n                    style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                        {item.details}\r\n                    </td>\r\n                    <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                        {renderProducts(item)}\r\n                    </td>\r\n                </tr>\r\n               \r\n               \r\n            )\r\n        })\r\n    return rows;\r\n    }\r\n\r\n    return (\r\n        <div style={{display:'flex', flexDirection:'column', alignItems:'center'}}>\r\n        <div id=\"workForm\" style={{width:\"80%\", border:\"1px solid grey\"}}>\r\n            <div className=\"head\" style={{display:\"flex\",flexDirection:\"row\", margin:\"auto\", padding:\"10px\"}}>\r\n                <div>\r\n                <img src={header}></img>\r\n                </div>\r\n                <div>\r\n                    <div style={{fontSize:\"xx-large\"}}>\r\n                    Sales Order\r\n                </div>\r\n                <div>\r\n                <table style={{border:\"1px solid grey\", margin:\"1px\", padding:\"2px\"}}>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\", minWidth:\"120px\"}}>\r\n                                Sales Date\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Sales Order #\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                {format(date,\"MMMM do',' yyyy\")}\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                            <input\r\n                            size='5'></input>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n                </div>\r\n                \r\n            <div>\r\n                <table style={{border:\"1px solid grey\"}}>\r\n                    <thead >\r\n                        <tr >\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                Customer Name and Address\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                Site Address\r\n                            </td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                {info.allInfo.CustFirstName + \" \" + info.allInfo.CustLastName}\r\n                                <br/>\r\n                                {info.allInfo.BillingAddress}\r\n                                <br/>\r\n                                {info.allInfo.CustCity}\r\n                                <br/>\r\n                                {info.allInfo.CustPostalCode}\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"3px\"}}>\r\n                                {info.allInfo.Address}\r\n                                <br/>\r\n                                {info.allInfo.City + \", \" + info.allInfo.Province}\r\n                                <br/>\r\n                                {info.allInfo.PostalCode}\r\n                                <br/>\r\n                                Customer Phone: {info.allInfo.Phone}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div style={{float:'right', marginRight:'6%'}}>\r\n            <table style={{border:\"1px solid grey\", margin:\"1px\", padding:\"2px\"}}>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                P.O. #\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Terms\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                <input></input>\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                            <textarea>\r\n                            </textarea>\r\n                            <br />\r\n                            Due on receipt\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                    </table>\r\n            </div>\r\n            <div>\r\n                <table style={{border:\"1px solid grey\", width:\"100%\"}}>\r\n                    <thead>\r\n                        <tr style={{border:\"1px solid grey\", width:\"100%\"}}>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Item\r\n                            </td>\r\n                            <td colSpan='2'\r\n                            style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Description\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                Ordered\r\n                            </td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {renderRows()}\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <td colSpan='3'\r\n                            style={{border:\"1px solid grey\", padding:\"2px\"}}>Additional Notes for Installers</td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>Total:</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan='3'\r\n                            style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                {info.allInfo.notesInstallers}\r\n                            </td>\r\n                            <td style={{border:\"1px solid grey\", padding:\"2px\"}}>\r\n                                $ <input\r\n                                defaultValue={info.allInfo.QuoteTotal}>\r\n                                </input>\r\n                            </td>\r\n                        </tr>\r\n                    </tfoot>\r\n                </table>\r\n                <p>GST/HST No. 104459771</p>\r\n            </div>\r\n        </div>\r\n        <footer>\r\n            <br/>\r\n            <Space>\r\n                <Button\r\n                onClick={() => {printContent()}}>\r\n            Print\r\n                </Button>\r\n        <Button\r\n        size='large'\r\n        type=\"primary\">\r\n            Complete Work Order\r\n        </Button>\r\n        \r\n            </Space>\r\n             \r\n        </footer>\r\n        <iframe\r\n        id=\"ifmcontentstoprint\"\r\n        style={{ height: \"0px\", width: \"0px\", position: \"absolute\" }}\r\n      ></iframe>\r\n       \r\n    </div>\r\n    )\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\orderList.js",["552","553","554","555","556","557","558","559","560","561","562","563","564","565"],"import React, {useEffect, setState, useState} from 'react';\r\nimport { Card, Table, Button, Modal, Form, Input, message, Select} from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {getAllInfo, getDetails, getProducts, SearchAllInfo} from \"../../api/quoteEditAPI\";\r\nimport { getUser } from '../../util/storage';\r\nconst {Search} = Input;\r\nconst {format } = require('date-fns-tz')\r\n\r\n  function OrderList() {\r\n  let history = useHistory();\r\n  let user = getUser();\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const currentDate = new Date();\r\n  const [formData, setFormData] = useState([]);\r\n  const [testData, setTestData] = useState([]);\r\n  const [detailData, setDetailData] = useState([]);\r\n  const [prodData, setProdData] = useState([]);\r\n\r\n    useEffect(async() => {\r\n          const func = async () => {\r\n          await getAllInfo().then((result) => {\r\n            setTestData(result.data);\r\n          });\r\n        }\r\n          await getDetails().then((item) => {\r\n            setDetailData(item.data);\r\n          });\r\n          await getProducts().then((item) => {\r\n            setProdData(item.data);\r\n          })\r\n        func();\r\n        \r\n        if(testData !== []){\r\n          setLoaded(true);\r\n        }\r\n        \r\n      }, []);\r\n\r\n      const getUserQuotes = (list) => {\r\n        let newList = [];\r\n        list.map((item) => {\r\n          if(item.UserID === user.UserID){\r\n            newList.push(item);\r\n          }\r\n        });\r\n        return newList;\r\n      }\r\n    const getDetailsByID = (id) => {\r\n        let array = [];\r\n        let arr = [];\r\n        detailData.map((item) => {\r\n          if(item.quoteID === id){\r\n            array.push({\r\n              quoteID:item.quoteID,\r\n              id:item.subtotalID,\r\n              subtotalNotes:item.subtotalNotes,\r\n              total:item.subtotalAmount,\r\n              arr:getProductArr(item.subtotalID)\r\n            });\r\n          }\r\n        });\r\n        return array;\r\n    }\r\n    const checkDate = (date) => {\r\n      let returnDate = \"\";\r\n      if(date === \"December 31st, 1969\"){\r\n      }\r\n      else{\r\n        returnDate = date;\r\n    }\r\n    return returnDate;\r\n    }\r\n    const getProductArr = (id) => {\r\n      let array = [];\r\n      prodData.map((item) => {\r\n             if(item.subtotalID === id){\r\n                  array.push({\r\n                    prodID:item.QuoteLineID,\r\n                    product:item.Product,\r\n                    notes:item.Notes,\r\n                    price:item.Subtotal\r\n                  })\r\n              }\r\n          });\r\n          return array;\r\n    }\r\n    const renderDetails = () => {\r\n      let rows = [];\r\n      formData.map((item) => {\r\n        rows.push(<Card title=\"Details\" bordered={true} type=\"inner\">\r\n          <p>{item.subtotalNotes}</p>\r\n          <strong>Products</strong>\r\n          <table style={{width:'100%'}}>\r\n            <tbody>\r\n              {renderProducts(item.arr)}\r\n            </tbody>\r\n          </table>\r\n          \r\n          <p><strong>Total: </strong>{item.total}</p>\r\n        </Card>)\r\n\r\n      });\r\n      return rows;\r\n    }\r\n    const renderProducts = (array) => {\r\n      let rows = [];\r\n      array.map((item) => {\r\n        rows.push(\r\n          <tr width=\"100px\">\r\n            <td>{item.product}</td>\r\n            <td>{item.notes}</td>\r\n            <td>{item.price}</td>\r\n          </tr>\r\n      )})\r\n      return rows\r\n\r\n    }\r\n    const findQuote = async (value) => {\r\n      let result = await SearchAllInfo(value);\r\n      setTestData(result.data)\r\n    }\r\n    const columns =[\r\n      {\r\n        title:\"Customer Name\",\r\n        key:\"customer\",\r\n        render:(data) => (\r\n          <p>{data.CustFirstName + \" \" + data.CustLastName}</p>\r\n        )\r\n      },\r\n      {\r\n        title:\"Address\",\r\n        key:\"address\",\r\n        render:(data) => (\r\n          <p>{data.Address  + \",\" + \" \" + data.City}</p>\r\n        )\r\n      },\r\n      {},\r\n\r\n      {\r\n        title:\"Salesman\",\r\n        key:\"user\",\r\n        render: (data) =>(\r\n          <div>\r\n             <p>{data.FirstName + \" \" + data.LastName}</p>\r\n          </div>\r\n         \r\n        )\r\n        \r\n      },\r\n      {\r\n        title:\"Show/Edit Work Order Info\",\r\n        key:\"OpenOrder\",\r\n        render: (data) => \r\n          (\r\n            <div>\r\n            <Button\r\n            onClick={() => {\r\n                \r\n                setFormData(getDetailsByID(data.QuoteID));\r\n                setShowForm(true);     \r\n                            }}>\r\n            View Quote</Button>\r\n            </div>)\r\n      },\r\n      {\r\n        title:\"Creation Date\",\r\n        key:\"date\",\r\n        render: (data) => (\r\n          <p>{format(new Date(data.creationDate),\"MMMM do',' yyyy\")}</p>\r\n        ),\r\n        sorter: (a,b) => new Date(a.creationDate) - new Date(b.creationDate)\r\n      },\r\n      {\r\n        title:\"Last Modified\",\r\n        key:\"modDate\",\r\n        render: (data) => (\r\n          <p>{checkDate(format(new Date(data.modifyDate), \"MMMM do',' yyyy\"))}</p>\r\n        ),\r\n        sorter: (a,b) => new Date(a.modifyDate) - new Date(b.modifyDate)\r\n      },\r\n      {\r\n        title:\"Options\",\r\n        key:\"options\",\r\n        render: (data) => (\r\n          <Button\r\n            onClick={() => {\r\n              history.push(`/orders/${data.QuoteID}/new`)\r\n            }}>\r\n              Create Work Order\r\n            </Button>\r\n        )\r\n      }   \r\n    ]\r\n    if(loaded){\r\n\r\n      if(user.SecurityLevel === 'admin'){\r\n        return(\r\n        <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Quote\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n          \r\n\r\n        <h2>Active Work Orders</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={testData}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Quote\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quoteinfo/${formData[0].quoteID}`)}}\r\n        okText=\"Edit Quote\"\r\n        >\r\n         <div>\r\n           {renderDetails()}\r\n         </div>\r\n        </Modal>\r\n          </div>\r\n      )\r\n      }\r\n      else if (user.SecurityLevel === 'salesman'){\r\n        return (\r\n          <div>\r\n          <div style={{marginLeft:\"auto 0\", marginRight:\"auto 0\"}}>\r\n            <Search\r\n                  style={{width:\"40%\"}}\r\n                  className=\"searchbar\"\r\n                  size = \"medium\"\r\n                  enterButton=\"Find Quote\"\r\n                  onChange={(e) => {findQuote(e.target.value)}} />\r\n          </div>\r\n          \r\n\r\n        <h2>Your Active Work Orders</h2>\r\n        <Table\r\n        style={{ width: \"80%\", margin: \"0 auto\" }}\r\n        rowKey=\"id\"\r\n        dataSource={getUserQuotes(testData)}\r\n        columns={columns}\r\n        tableLayout=\"auto\"\r\n        pagination={{ pageSize: 10 }}>\r\n          </Table>\r\n\r\n        <Modal\r\n        visible={showForm}\r\n        title=\"View Quote\"\r\n        onCancel={() => {setShowForm(false)}}\r\n        onOk={() => {history.push(`/quoteinfo/${formData[0].quoteID}`)}}\r\n        okText=\"Edit Quote\"\r\n        >\r\n         <div>\r\n           {renderDetails()}\r\n         </div>\r\n        </Modal>\r\n          </div>\r\n        );\r\n      }\r\n      \r\n    }\r\n\r\n    else{\r\n      return(\r\n        <div>\r\n          Loading...\r\n        </div>\r\n        \r\n      );\r\n      \r\n    }\r\n    }\r\nexport default OrderList;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\pages\\orders\\newOrder.js",["566","567","568","569","570","571","572","573","574","575"],"import React, {useState, useEffect} from 'react';\r\nimport {useInput} from '../../hooks/input-hook';\r\nimport { Card, Checkbox, Row, Col, Form, DatePicker, Modal, Button, Select} from 'antd';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { getAllInfoID, getDetailsID, getProductsID, getAvailableTrucks } from '../../api/orders';\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Item } = Form;\r\nconst {Option} = Select;\r\n\r\nfunction NewOrder (props) {\r\n    \r\n    let quoteID = useRouteMatch('/orders/:oid/new').params.oid;\r\n\r\n    const [quoteData, setQuoteData] = useState([]);\r\n    const [detailData, setDetailData] = useState([]);\r\n    const [prodData, setProdData] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [quoteDetails, setQuoteDetails] = useState([]);\r\n    const [showCalendar, setShowCalendar] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [trucks, setTrucks] = useState([]);\r\n\r\n    useEffect(async() => {\r\n      try {\r\n\r\n        await getAllInfoID(quoteID).then((result) => {\r\n          setQuoteData(result.data[0]);\r\n          console.log(result.data[0]);\r\n        });\r\n        let detailsInfo = await getDetailsID(quoteID);\r\n          setDetailData(detailsInfo.data);\r\n        let productInfo = await getProductsID(quoteID)\r\n          setProdData(productInfo.data);\r\n        createDetails(detailsInfo.data, productInfo.data);\r\n        await getAvailableTrucks().then((result) => {\r\n          setTrucks(result.data);\r\n        })\r\n        \r\n      \r\n      }\r\n      \r\n      catch(e) {\r\n        console.log(e);\r\n      }\r\n\r\n      \r\n      if(quoteData !== []){\r\n        \r\n        setLoaded(true);\r\n      }\r\n      \r\n    }, [])\r\n\r\n    const options = trucks.map((item, index) => (\r\n      <Option key = {index + 1}>{item.TruckNumber + \" \" + item.TruckInfo} </Option> \r\n    ))\r\n\r\n    const createOrder = (values) => {\r\n      const workOrderInfo = {\r\n        allInfo:quoteData,\r\n        selectedDetails:findSelectedDetails(),\r\n        selectedDates:values.selectedDate,\r\n        selectedTruck:null\r\n      }\r\n      props.updateOrder(workOrderInfo);\r\n    }\r\n\r\n    function findSelectedDetails() {\r\n      let selectItem = [];\r\n      quoteDetails.map((item) => {\r\n        if(item.selected){\r\n          selectItem.push(item);\r\n        }\r\n      });\r\n      return selectItem;\r\n    }\r\n    const createDetails = (detlist, prodlist) => {\r\n      if(quoteDetails !== []){\r\n      let temp = quoteDetails;\r\n      detlist.map((detail) => {\r\n         let detailObj = {\r\n                  id: detail.SubtotalID,\r\n                  details:detail.subtotalLines,\r\n                  total:detail.subtotalAmount,\r\n                  selected:false,\r\n                  productArr:[]\r\n              \r\n          }\r\n          prodlist.map((prod) => {\r\n            console.log(prod);\r\n              if(prod.subtotalID === detail.SubtotalID){\r\n                  let prodObj = {\r\n                      id:prod.QuoteLineID,\r\n                      product:prod.Product,\r\n                      notes:prod.Notes,\r\n                      price:prod.Subtotal\r\n                  }\r\n                  if(detailObj.productArr.length === 0){\r\n                      detailObj.productArr[0] =prodObj;\r\n                  }\r\n                  else{\r\n                      detailObj.productArr[detailObj.productArr.length] = prodObj;\r\n                  }\r\n                  \r\n              }\r\n          })\r\n          if(temp.length === 0){\r\n              temp[0] = detailObj;\r\n          }\r\n          else{\r\n              temp[temp.length] = detailObj;\r\n          }\r\n          setQuoteDetails(temp);\r\n      });        \r\n    }\r\n    else{\r\n      console.log(\"already created details\");\r\n    }\r\n  }\r\n\r\n    const renderList = () => {\r\n      let rows = [];\r\n      if(quoteDetails.length > 0){\r\n        quoteDetails.map((detail) => {\r\n          rows.push(\r\n            <div>\r\n              <tr>\r\n            <td>\r\n              <Checkbox onChange={() => {detail.selected = !detail.selected;}}></Checkbox>\r\n            </td>\r\n            <td colSpan='2' style={{fontSize:\"15px\"}}>\r\n              {detail.details}\r\n            </td>\r\n          </tr>\r\n            {renderProducts(detail.productArr)}\r\n            <tr>\r\n              <td>\r\n\r\n              </td>\r\n              <td style={{fontSize:\"15px\"}}>\r\n                <b>Total:</b>\r\n              </td>\r\n              <td>\r\n                {detail.total}\r\n              </td>\r\n            </tr>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n      return rows;\r\n    }\r\n\r\n    const renderProducts = (products) => {\r\n      let rows = [];\r\n      products.map((prod) => {\r\n        rows.push(\r\n          <tr>\r\n            <td>\r\n            </td>\r\n            <td>\r\n            </td>\r\n            <td>\r\n              {prod.product}\r\n            </td>\r\n            <td>\r\n              {prod.notes}\r\n            </td>\r\n            <td>\r\n              {prod.price}\r\n            </td>\r\n          </tr>\r\n        )\r\n      })\r\n\r\n      return rows;\r\n    }\r\n\r\n    if(loaded === true){\r\n     return (\r\n        <div>\r\n            <h2>New Order Creation</h2>\r\n            \r\n\r\n            \r\n            <Card title=\"Customer and Address Information\">\r\n                <Row>\r\n              <Col>\r\n                <Card title=\"Customer\" bordered={false} style={{ height:\"250px\"}}>\r\n                    <p>{quoteData.CustFirstName} {quoteData.CustLastName}</p>\r\n                    <p>{quoteData.Email}</p>\r\n                    <p>{quoteData.Phone}</p>\r\n                    <p>{quoteData.BillingAddress}</p>\r\n                </Card>\r\n              </Col>\r\n              <Col>\r\n              <Card title=\"Site Address\" bordered={false} style={{ height:\"250px\"}}>\r\n                  <p>{quoteData.Address}, {quoteData.City} {quoteData.Province}</p>\r\n                  <p></p>\r\n                  <p>{quoteData.PostalCode}</p>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n            </Card>\r\n            <Form form={form} onFinish={createOrder}>\r\n            <Card title='Select the details'>\r\n            <Item>\r\n              <table>\r\n                <tbody>\r\n                  {renderList()}\r\n                </tbody>\r\n              </table>\r\n            </Item>\r\n              </Card>\r\n              <Card title=\"Select the date\">\r\n                <Item\r\n              name=\"selectedDate\"\r\n            >\r\n              <RangePicker\r\n                showTime={{ format: \"HH:mm\" }}\r\n                format=\"YYYY-MM-DD HH:mm\"\r\n                className=\"datepicker\"\r\n              />\r\n              \r\n            </Item>\r\n            <Item>\r\n            <Button type=\"primary\" onClick={() => {setShowCalendar(true)}}>Show Calendar</Button>\r\n            </Item>\r\n              </Card>\r\n            \r\n            \r\n            <Card>\r\n              <Item>\r\n              <h1>Select truck</h1>\r\n            </Item>\r\n            <Item>\r\n              <Select>{options}</Select>\r\n            </Item>\r\n            </Card>\r\n            \r\n            <Item>\r\n              <Button size=\"large\" type=\"primary\" htmlType=\"submit\">Create Work Order</Button>\r\n            </Item>\r\n            \r\n            \r\n                </Form>\r\n            <Modal\r\n            visible={showCalendar}\r\n            onCancel={() => {setShowCalendar(false)}}\r\n            width=\"90%\"\r\n            >\r\n\r\n            </Modal>\r\n             \r\n        </div>\r\n    )   \r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                Loading...\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewOrder;","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\orders.js",["576"],"import ajax from \"./base\";\r\nconst baseURL = \"https://reitzel-server.herokuapp.com\";\r\nconst {format} = require('date-fns-tz');\r\n\r\nexport async function getAllInfoID(id){\r\n    var sql = `SELECT * FROM quotes LEFT JOIN address ON quotes.AddressID = address.AddressID LEFT JOIN users ON quotes.UserID = users.UserID LEFT JOIN customers ON quotes.CustomerID = customers.CustomerID\r\n    WHERE quotes.QuoteID = '${id}'\r\n    `;\r\n    const info = await ajax(\r\n        `${baseURL}/processCustomQuery`,\r\n        {sql},\r\n        \"post\"\r\n    );\r\n    if(info !== []) return info;\r\n    else return 0; \r\n}\r\n\r\nexport async function getDetailsID(id){\r\n    var sql = `SELECT * FROM subtotallines WHERE QuoteID = '${id}'`;\r\n    const details = await ajax(\r\n        `${baseURL}/processCustomQuery`,\r\n        {sql},\r\n        \"post\"\r\n    );\r\n    if(details !== []) return details;\r\n    else return 0;\r\n}\r\n\r\nexport async function getProductsID(id){\r\n    var sql = `SELECT * FROM quotelines WHERE QuoteID = '${id}'`;\r\n    const prods = await ajax (\r\n        `${baseURL}/processCustomQuery`,\r\n        {sql},\r\n        \"post\"\r\n    );\r\n    if(prods !== []) return prods;\r\n    else return 0;\r\n}\r\n\r\nexport async function getAvailableTrucks() {\r\n    var tableName = \"trucks\";\r\n    var condition = `Available = '1'`\r\n    const trucklist = await ajax(\r\n      `${baseURL}/fetchValues`,\r\n      {tableName, condition},\r\n      \"post\"\r\n    );\r\n    if (trucklist !== []) return trucklist;\r\n    else {\r\n      return 0;\r\n    }\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\menucreate.js",["577"],"import { getMenu } from '../util/storage';\r\nimport {home, quotes, orders, invoices, customers, settings, users, trucks, roles} from './leftnavitems';\r\n\r\nexport function menuCreate() {\r\n    settings.children = [];\r\n    let menu = [settings];\r\n    let roleMenu = getMenu();\r\n    let menuArr = roleMenu.RoleMenu.split(', ');\r\n    let menuArrRev = menuArr.reverse();\r\n    menuArrRev.map((item) => {\r\n        switch (item) {\r\n            case '/home':\r\n                menu.unshift(home);\r\n                break;\r\n            case '/quotes':\r\n                menu.unshift(quotes);\r\n                break;\r\n            case '/orders':\r\n                menu.unshift(orders);\r\n                break;\r\n            case '/invoices':\r\n                menu.unshift(invoices);\r\n                break;\r\n            case '/customers':\r\n                menu.unshift(customers);\r\n                break;\r\n            case '/users':\r\n                settings.children.push(users);\r\n                break;\r\n            case '/trucks':\r\n                settings.children.push(trucks);\r\n                break;\r\n            case '/roles':\r\n                settings.children.push(roles);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    })\r\n    return menu;\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\leftnavitems.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\api\\encryption.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\checks.js",[],["578","579"],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\config\\leftnav.js",[],"C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\Components\\HomeTemplate\\SalesCalendar\\salesToolSnap.js",["580"],"import React, { useEffect, useState } from 'react';\r\nimport { getAddress } from '../../../api/addresses';\r\n\r\n\r\nconst {format} = require('date-fns-tz');\r\n\r\n\r\nexport default function SalesToolSnap (model) {\r\n  const data = model.data.appointmentData;\r\n  const [address, setAddress] = useState([]);\r\n  useEffect(() => {\r\n    const func = async() => {\r\n      let result = await getAddress(data.AddressID)\r\n      setAddress(result.data[0]);\r\n    }\r\n    func();\r\n  },[address.length]);\r\n\r\n  return (\r\n    <div>\r\n        <b style={{fontSize:15}}>\r\n         {data.text}\r\n        </b> \r\n      <p>\r\n       {address.Address} {address.City}, {address.Province}\r\n       <br/>\r\n       {address.PostalCode}\r\n      </p>\r\n      <p style={{color:'grey'}}>{`${format(new Date(data.startDate),\"h':'mm aa\")} - ${format(new Date(data.endDate),\"h':'mm aa\")}`}</p>\r\n    </div>\r\n  )\r\n}","C:\\Users\\amill\\Reitzel Desktop GitHub\\Reitzel-Insulation-Desktop\\src\\assets\\paths.js",[],{"ruleId":"581","replacedBy":"582"},{"ruleId":"583","replacedBy":"584"},{"ruleId":"585","severity":1,"message":"586","line":24,"column":1,"nodeType":"587","endLine":37,"endColumn":3},{"ruleId":"588","severity":1,"message":"589","line":10,"column":8,"nodeType":"590","messageId":"591","endLine":10,"endColumn":11},{"ruleId":"588","severity":1,"message":"592","line":24,"column":13,"nodeType":"590","messageId":"591","endLine":24,"endColumn":17},{"ruleId":"588","severity":1,"message":"593","line":1,"column":17,"nodeType":"590","messageId":"591","endLine":1,"endColumn":25},{"ruleId":"588","severity":1,"message":"593","line":1,"column":17,"nodeType":"590","messageId":"591","endLine":1,"endColumn":25},{"ruleId":"588","severity":1,"message":"594","line":2,"column":17,"nodeType":"590","messageId":"591","endLine":2,"endColumn":22},{"ruleId":"588","severity":1,"message":"595","line":18,"column":7,"nodeType":"590","messageId":"591","endLine":18,"endColumn":9},{"ruleId":"588","severity":1,"message":"596","line":1,"column":10,"nodeType":"590","messageId":"591","endLine":1,"endColumn":19},{"ruleId":"597","severity":1,"message":"598","line":16,"column":35,"nodeType":"599","messageId":"600","endLine":16,"endColumn":37},{"ruleId":"597","severity":1,"message":"598","line":16,"column":51,"nodeType":"599","messageId":"600","endLine":16,"endColumn":53},{"ruleId":"588","severity":1,"message":"601","line":1,"column":27,"nodeType":"590","messageId":"591","endLine":1,"endColumn":35},{"ruleId":"588","severity":1,"message":"602","line":2,"column":44,"nodeType":"590","messageId":"591","endLine":2,"endColumn":49},{"ruleId":"588","severity":1,"message":"603","line":2,"column":51,"nodeType":"590","messageId":"591","endLine":2,"endColumn":58},{"ruleId":"588","severity":1,"message":"604","line":3,"column":9,"nodeType":"590","messageId":"591","endLine":3,"endColumn":18},{"ruleId":"588","severity":1,"message":"605","line":3,"column":20,"nodeType":"590","messageId":"591","endLine":3,"endColumn":30},{"ruleId":"588","severity":1,"message":"606","line":3,"column":32,"nodeType":"590","messageId":"591","endLine":3,"endColumn":39},{"ruleId":"588","severity":1,"message":"607","line":4,"column":37,"nodeType":"590","messageId":"591","endLine":4,"endColumn":42},{"ruleId":"588","severity":1,"message":"608","line":4,"column":44,"nodeType":"590","messageId":"591","endLine":4,"endColumn":50},{"ruleId":"588","severity":1,"message":"609","line":7,"column":9,"nodeType":"590","messageId":"591","endLine":7,"endColumn":16},{"ruleId":"588","severity":1,"message":"610","line":8,"column":9,"nodeType":"590","messageId":"591","endLine":8,"endColumn":15},{"ruleId":"588","severity":1,"message":"611","line":13,"column":7,"nodeType":"590","messageId":"591","endLine":13,"endColumn":14},{"ruleId":"588","severity":1,"message":"612","line":15,"column":23,"nodeType":"590","messageId":"591","endLine":15,"endColumn":37},{"ruleId":"588","severity":1,"message":"613","line":16,"column":10,"nodeType":"590","messageId":"591","endLine":16,"endColumn":19},{"ruleId":"588","severity":1,"message":"614","line":16,"column":21,"nodeType":"590","messageId":"591","endLine":16,"endColumn":33},{"ruleId":"588","severity":1,"message":"615","line":17,"column":20,"nodeType":"590","messageId":"591","endLine":17,"endColumn":31},{"ruleId":"588","severity":1,"message":"616","line":21,"column":9,"nodeType":"590","messageId":"591","endLine":21,"endColumn":20},{"ruleId":"588","severity":1,"message":"617","line":23,"column":10,"nodeType":"590","messageId":"591","endLine":23,"endColumn":18},{"ruleId":"618","severity":1,"message":"619","line":26,"column":15,"nodeType":"620","endLine":39,"endColumn":8},{"ruleId":"618","severity":1,"message":"621","line":39,"column":10,"nodeType":"622","endLine":39,"endColumn":28,"suggestions":"623"},{"ruleId":"588","severity":1,"message":"624","line":63,"column":11,"nodeType":"590","messageId":"591","endLine":63,"endColumn":23},{"ruleId":"597","severity":1,"message":"598","line":47,"column":27,"nodeType":"599","messageId":"600","endLine":47,"endColumn":29},{"ruleId":"597","severity":1,"message":"625","line":144,"column":18,"nodeType":"599","messageId":"600","endLine":144,"endColumn":20},{"ruleId":"597","severity":1,"message":"625","line":144,"column":35,"nodeType":"599","messageId":"600","endLine":144,"endColumn":37},{"ruleId":"618","severity":1,"message":"626","line":147,"column":6,"nodeType":"622","endLine":147,"endColumn":8,"suggestions":"627"},{"ruleId":"597","severity":1,"message":"625","line":148,"column":12,"nodeType":"599","messageId":"600","endLine":148,"endColumn":14},{"ruleId":"588","severity":1,"message":"628","line":4,"column":9,"nodeType":"590","messageId":"591","endLine":4,"endColumn":18},{"ruleId":"618","severity":1,"message":"629","line":60,"column":10,"nodeType":"622","endLine":60,"endColumn":17,"suggestions":"630"},{"ruleId":"588","severity":1,"message":"631","line":63,"column":13,"nodeType":"590","messageId":"591","endLine":63,"endColumn":19},{"ruleId":"597","severity":1,"message":"598","line":170,"column":27,"nodeType":"599","messageId":"600","endLine":170,"endColumn":29},{"ruleId":"632","severity":1,"message":"633","line":178,"column":26,"nodeType":"620","messageId":"634","endLine":178,"endColumn":28},{"ruleId":"632","severity":1,"message":"633","line":71,"column":35,"nodeType":"620","messageId":"634","endLine":71,"endColumn":37},{"ruleId":"588","severity":1,"message":"635","line":10,"column":10,"nodeType":"590","messageId":"591","endLine":10,"endColumn":21},{"ruleId":"588","severity":1,"message":"636","line":10,"column":23,"nodeType":"590","messageId":"591","endLine":10,"endColumn":35},{"ruleId":"588","severity":1,"message":"637","line":11,"column":10,"nodeType":"590","messageId":"591","endLine":11,"endColumn":15},{"ruleId":"588","severity":1,"message":"638","line":2,"column":16,"nodeType":"590","messageId":"591","endLine":2,"endColumn":25},{"ruleId":"597","severity":1,"message":"598","line":20,"column":33,"nodeType":"599","messageId":"600","endLine":20,"endColumn":35},{"ruleId":"597","severity":1,"message":"598","line":20,"column":47,"nodeType":"599","messageId":"600","endLine":20,"endColumn":49},{"ruleId":"597","severity":1,"message":"598","line":29,"column":33,"nodeType":"599","messageId":"600","endLine":29,"endColumn":35},{"ruleId":"597","severity":1,"message":"598","line":29,"column":47,"nodeType":"599","messageId":"600","endLine":29,"endColumn":49},{"ruleId":"597","severity":1,"message":"598","line":108,"column":25,"nodeType":"599","messageId":"600","endLine":108,"endColumn":27},{"ruleId":"588","severity":1,"message":"639","line":1,"column":17,"nodeType":"590","messageId":"591","endLine":1,"endColumn":26},{"ruleId":"640","severity":1,"message":"641","line":9,"column":5,"nodeType":"642","messageId":"643","endLine":11,"endColumn":8},{"ruleId":"588","severity":1,"message":"644","line":1,"column":10,"nodeType":"590","messageId":"591","endLine":1,"endColumn":17},{"ruleId":"645","severity":1,"message":"646","line":14,"column":17,"nodeType":"647","endLine":14,"endColumn":35},{"ruleId":"648","severity":1,"message":"649","line":146,"column":7,"nodeType":"590","messageId":"650","endLine":146,"endColumn":13},{"ruleId":"588","severity":1,"message":"651","line":1,"column":10,"nodeType":"590","messageId":"591","endLine":1,"endColumn":39},{"ruleId":"597","severity":1,"message":"598","line":101,"column":25,"nodeType":"599","messageId":"600","endLine":101,"endColumn":27},{"ruleId":"632","severity":1,"message":"633","line":334,"column":20,"nodeType":"620","messageId":"634","endLine":334,"endColumn":22},{"ruleId":"618","severity":1,"message":"652","line":22,"column":5,"nodeType":"622","endLine":22,"endColumn":21,"suggestions":"653"},{"ruleId":"618","severity":1,"message":"619","line":7,"column":15,"nodeType":"620","endLine":10,"endColumn":6},{"ruleId":"632","severity":1,"message":"633","line":16,"column":31,"nodeType":"620","messageId":"634","endLine":16,"endColumn":33},{"ruleId":"588","severity":1,"message":"654","line":56,"column":13,"nodeType":"590","messageId":"591","endLine":56,"endColumn":24},{"ruleId":"588","severity":1,"message":"655","line":59,"column":13,"nodeType":"590","messageId":"591","endLine":59,"endColumn":23},{"ruleId":"632","severity":1,"message":"633","line":251,"column":20,"nodeType":"620","messageId":"634","endLine":251,"endColumn":22},{"ruleId":"632","severity":1,"message":"633","line":261,"column":20,"nodeType":"620","messageId":"634","endLine":261,"endColumn":22},{"ruleId":"632","severity":1,"message":"633","line":268,"column":20,"nodeType":"620","messageId":"634","endLine":268,"endColumn":22},{"ruleId":"640","severity":1,"message":"641","line":16,"column":3,"nodeType":"642","messageId":"643","endLine":18,"endColumn":4},{"ruleId":"588","severity":1,"message":"656","line":2,"column":23,"nodeType":"590","messageId":"591","endLine":2,"endColumn":24},{"ruleId":"645","severity":1,"message":"646","line":14,"column":13,"nodeType":"647","endLine":14,"endColumn":31},{"ruleId":"581","replacedBy":"657"},{"ruleId":"583","replacedBy":"658"},{"ruleId":"581","replacedBy":"659"},{"ruleId":"583","replacedBy":"660"},{"ruleId":"618","severity":1,"message":"661","line":63,"column":7,"nodeType":"662","endLine":67,"endColumn":9},{"ruleId":"588","severity":1,"message":"663","line":73,"column":10,"nodeType":"590","messageId":"591","endLine":73,"endColumn":19},{"ruleId":"588","severity":1,"message":"664","line":79,"column":25,"nodeType":"590","messageId":"591","endLine":79,"endColumn":41},{"ruleId":"665","severity":1,"message":"666","line":162,"column":7,"nodeType":"647","endLine":165,"endColumn":8},{"ruleId":"588","severity":1,"message":"667","line":1,"column":10,"nodeType":"590","messageId":"591","endLine":1,"endColumn":22},{"ruleId":"588","severity":1,"message":"668","line":1,"column":24,"nodeType":"590","messageId":"591","endLine":1,"endColumn":37},{"ruleId":"588","severity":1,"message":"669","line":1,"column":56,"nodeType":"590","messageId":"591","endLine":1,"endColumn":65},{"ruleId":"588","severity":1,"message":"670","line":1,"column":83,"nodeType":"590","messageId":"591","endLine":1,"endColumn":93},{"ruleId":"588","severity":1,"message":"671","line":14,"column":12,"nodeType":"590","messageId":"591","endLine":14,"endColumn":19},{"ruleId":"588","severity":1,"message":"672","line":15,"column":23,"nodeType":"590","messageId":"591","endLine":15,"endColumn":35},{"ruleId":"588","severity":1,"message":"673","line":16,"column":12,"nodeType":"590","messageId":"591","endLine":16,"endColumn":23},{"ruleId":"588","severity":1,"message":"674","line":17,"column":12,"nodeType":"590","messageId":"591","endLine":17,"endColumn":24},{"ruleId":"588","severity":1,"message":"675","line":17,"column":26,"nodeType":"590","messageId":"591","endLine":17,"endColumn":41},{"ruleId":"588","severity":1,"message":"676","line":18,"column":12,"nodeType":"590","messageId":"591","endLine":18,"endColumn":23},{"ruleId":"588","severity":1,"message":"677","line":18,"column":25,"nodeType":"590","messageId":"591","endLine":18,"endColumn":39},{"ruleId":"588","severity":1,"message":"678","line":19,"column":12,"nodeType":"590","messageId":"591","endLine":19,"endColumn":20},{"ruleId":"588","severity":1,"message":"615","line":19,"column":22,"nodeType":"590","messageId":"591","endLine":19,"endColumn":33},{"ruleId":"588","severity":1,"message":"679","line":20,"column":12,"nodeType":"590","messageId":"591","endLine":20,"endColumn":23},{"ruleId":"618","severity":1,"message":"680","line":46,"column":11,"nodeType":"622","endLine":46,"endColumn":13,"suggestions":"681"},{"ruleId":"632","severity":1,"message":"633","line":51,"column":30,"nodeType":"620","messageId":"634","endLine":51,"endColumn":32},{"ruleId":"632","severity":1,"message":"633","line":61,"column":33,"nodeType":"620","messageId":"634","endLine":61,"endColumn":35},{"ruleId":"588","severity":1,"message":"682","line":109,"column":19,"nodeType":"590","messageId":"591","endLine":109,"endColumn":25},{"ruleId":"588","severity":1,"message":"683","line":109,"column":33,"nodeType":"590","messageId":"591","endLine":109,"endColumn":43},{"ruleId":"588","severity":1,"message":"684","line":109,"column":52,"nodeType":"590","messageId":"591","endLine":109,"endColumn":63},{"ruleId":"588","severity":1,"message":"685","line":110,"column":36,"nodeType":"590","messageId":"591","endLine":110,"endColumn":49},{"ruleId":"588","severity":1,"message":"686","line":110,"column":58,"nodeType":"590","messageId":"591","endLine":110,"endColumn":72},{"ruleId":"588","severity":1,"message":"687","line":111,"column":35,"nodeType":"590","messageId":"591","endLine":111,"endColumn":47},{"ruleId":"588","severity":1,"message":"688","line":111,"column":56,"nodeType":"590","messageId":"591","endLine":111,"endColumn":69},{"ruleId":"588","severity":1,"message":"689","line":112,"column":41,"nodeType":"590","messageId":"591","endLine":112,"endColumn":59},{"ruleId":"588","severity":1,"message":"690","line":112,"column":68,"nodeType":"590","messageId":"591","endLine":112,"endColumn":87},{"ruleId":"588","severity":1,"message":"691","line":113,"column":31,"nodeType":"590","messageId":"591","endLine":113,"endColumn":39},{"ruleId":"588","severity":1,"message":"692","line":113,"column":48,"nodeType":"590","messageId":"591","endLine":113,"endColumn":57},{"ruleId":"588","severity":1,"message":"693","line":114,"column":35,"nodeType":"590","messageId":"591","endLine":114,"endColumn":47},{"ruleId":"588","severity":1,"message":"694","line":114,"column":56,"nodeType":"590","messageId":"591","endLine":114,"endColumn":69},{"ruleId":"588","severity":1,"message":"695","line":115,"column":38,"nodeType":"590","messageId":"591","endLine":115,"endColumn":53},{"ruleId":"588","severity":1,"message":"696","line":115,"column":62,"nodeType":"590","messageId":"591","endLine":115,"endColumn":78},{"ruleId":"588","severity":1,"message":"697","line":116,"column":32,"nodeType":"590","messageId":"591","endLine":116,"endColumn":41},{"ruleId":"588","severity":1,"message":"698","line":116,"column":50,"nodeType":"590","messageId":"591","endLine":116,"endColumn":60},{"ruleId":"588","severity":1,"message":"699","line":118,"column":19,"nodeType":"590","messageId":"591","endLine":118,"endColumn":28},{"ruleId":"588","severity":1,"message":"700","line":118,"column":36,"nodeType":"590","messageId":"591","endLine":118,"endColumn":49},{"ruleId":"588","severity":1,"message":"701","line":118,"column":58,"nodeType":"590","messageId":"591","endLine":118,"endColumn":72},{"ruleId":"588","severity":1,"message":"702","line":118,"column":87,"nodeType":"590","messageId":"591","endLine":118,"endColumn":102},{"ruleId":"588","severity":1,"message":"703","line":119,"column":38,"nodeType":"590","messageId":"591","endLine":119,"endColumn":53},{"ruleId":"588","severity":1,"message":"704","line":119,"column":62,"nodeType":"590","messageId":"591","endLine":119,"endColumn":78},{"ruleId":"588","severity":1,"message":"705","line":120,"column":35,"nodeType":"590","messageId":"591","endLine":120,"endColumn":47},{"ruleId":"588","severity":1,"message":"706","line":120,"column":56,"nodeType":"590","messageId":"591","endLine":120,"endColumn":69},{"ruleId":"588","severity":1,"message":"707","line":121,"column":35,"nodeType":"590","messageId":"591","endLine":121,"endColumn":47},{"ruleId":"588","severity":1,"message":"708","line":121,"column":56,"nodeType":"590","messageId":"591","endLine":121,"endColumn":69},{"ruleId":"588","severity":1,"message":"709","line":122,"column":35,"nodeType":"590","messageId":"591","endLine":122,"endColumn":47},{"ruleId":"588","severity":1,"message":"710","line":122,"column":56,"nodeType":"590","messageId":"591","endLine":122,"endColumn":69},{"ruleId":"588","severity":1,"message":"711","line":124,"column":66,"nodeType":"590","messageId":"591","endLine":124,"endColumn":84},{"ruleId":"588","severity":1,"message":"712","line":125,"column":68,"nodeType":"590","messageId":"591","endLine":125,"endColumn":87},{"ruleId":"588","severity":1,"message":"713","line":127,"column":40,"nodeType":"590","messageId":"591","endLine":127,"endColumn":57},{"ruleId":"588","severity":1,"message":"714","line":127,"column":66,"nodeType":"590","messageId":"591","endLine":127,"endColumn":84},{"ruleId":"588","severity":1,"message":"715","line":128,"column":39,"nodeType":"590","messageId":"591","endLine":128,"endColumn":55},{"ruleId":"588","severity":1,"message":"716","line":128,"column":64,"nodeType":"590","messageId":"591","endLine":128,"endColumn":81},{"ruleId":"588","severity":1,"message":"717","line":152,"column":29,"nodeType":"590","messageId":"591","endLine":152,"endColumn":37},{"ruleId":"588","severity":1,"message":"718","line":156,"column":29,"nodeType":"590","messageId":"591","endLine":156,"endColumn":36},{"ruleId":"588","severity":1,"message":"717","line":166,"column":29,"nodeType":"590","messageId":"591","endLine":166,"endColumn":37},{"ruleId":"588","severity":1,"message":"718","line":169,"column":29,"nodeType":"590","messageId":"591","endLine":169,"endColumn":36},{"ruleId":"597","severity":1,"message":"598","line":188,"column":17,"nodeType":"599","messageId":"600","endLine":188,"endColumn":19},{"ruleId":"597","severity":1,"message":"598","line":191,"column":22,"nodeType":"599","messageId":"600","endLine":191,"endColumn":24},{"ruleId":"597","severity":1,"message":"598","line":199,"column":30,"nodeType":"599","messageId":"600","endLine":199,"endColumn":32},{"ruleId":"597","severity":1,"message":"598","line":226,"column":42,"nodeType":"599","messageId":"600","endLine":226,"endColumn":44},{"ruleId":"597","severity":1,"message":"598","line":283,"column":27,"nodeType":"599","messageId":"600","endLine":283,"endColumn":29},{"ruleId":"632","severity":1,"message":"633","line":294,"column":47,"nodeType":"620","messageId":"634","endLine":294,"endColumn":49},{"ruleId":"632","severity":1,"message":"633","line":336,"column":39,"nodeType":"620","messageId":"634","endLine":336,"endColumn":41},{"ruleId":"597","severity":1,"message":"598","line":339,"column":17,"nodeType":"599","messageId":"600","endLine":339,"endColumn":19},{"ruleId":"632","severity":1,"message":"633","line":348,"column":27,"nodeType":"620","messageId":"634","endLine":348,"endColumn":29},{"ruleId":"632","severity":1,"message":"633","line":358,"column":39,"nodeType":"620","messageId":"634","endLine":358,"endColumn":41},{"ruleId":"618","severity":1,"message":"719","line":40,"column":9,"nodeType":"622","endLine":40,"endColumn":11,"suggestions":"720"},{"ruleId":"632","severity":1,"message":"633","line":44,"column":25,"nodeType":"620","messageId":"634","endLine":44,"endColumn":27},{"ruleId":"632","severity":1,"message":"633","line":53,"column":31,"nodeType":"620","messageId":"634","endLine":53,"endColumn":33},{"ruleId":"632","severity":1,"message":"633","line":77,"column":27,"nodeType":"620","messageId":"634","endLine":77,"endColumn":29},{"ruleId":"632","severity":1,"message":"633","line":91,"column":27,"nodeType":"620","messageId":"634","endLine":91,"endColumn":29},{"ruleId":"632","severity":1,"message":"633","line":109,"column":24,"nodeType":"620","messageId":"634","endLine":109,"endColumn":26},{"ruleId":"721","severity":1,"message":"722","line":136,"column":35,"nodeType":"599","messageId":"723","endLine":136,"endColumn":36},{"ruleId":"588","severity":1,"message":"724","line":2,"column":10,"nodeType":"590","messageId":"591","endLine":2,"endColumn":23},{"ruleId":"588","severity":1,"message":"725","line":19,"column":12,"nodeType":"590","messageId":"591","endLine":19,"endColumn":17},{"ruleId":"588","severity":1,"message":"726","line":19,"column":19,"nodeType":"590","messageId":"591","endLine":19,"endColumn":23},{"ruleId":"588","severity":1,"message":"727","line":21,"column":11,"nodeType":"590","messageId":"591","endLine":21,"endColumn":15},{"ruleId":"618","severity":1,"message":"728","line":24,"column":9,"nodeType":"662","endLine":24,"endColumn":110},{"ruleId":"597","severity":1,"message":"598","line":24,"column":87,"nodeType":"599","messageId":"600","endLine":24,"endColumn":89},{"ruleId":"597","severity":1,"message":"598","line":27,"column":42,"nodeType":"599","messageId":"600","endLine":27,"endColumn":44},{"ruleId":"588","severity":1,"message":"672","line":31,"column":23,"nodeType":"590","messageId":"591","endLine":31,"endColumn":35},{"ruleId":"618","severity":1,"message":"619","line":35,"column":15,"nodeType":"620","endLine":55,"endColumn":10},{"ruleId":"597","severity":1,"message":"598","line":96,"column":29,"nodeType":"599","messageId":"600","endLine":96,"endColumn":31},{"ruleId":"597","severity":1,"message":"598","line":96,"column":40,"nodeType":"599","messageId":"600","endLine":96,"endColumn":42},{"ruleId":"597","severity":1,"message":"598","line":125,"column":29,"nodeType":"599","messageId":"600","endLine":125,"endColumn":31},{"ruleId":"597","severity":1,"message":"598","line":125,"column":40,"nodeType":"599","messageId":"600","endLine":125,"endColumn":42},{"ruleId":"588","severity":1,"message":"729","line":173,"column":11,"nodeType":"590","messageId":"591","endLine":173,"endColumn":28},{"ruleId":"597","severity":1,"message":"598","line":179,"column":17,"nodeType":"599","messageId":"600","endLine":179,"endColumn":19},{"ruleId":"597","severity":1,"message":"598","line":182,"column":22,"nodeType":"599","messageId":"600","endLine":182,"endColumn":24},{"ruleId":"597","severity":1,"message":"598","line":190,"column":30,"nodeType":"599","messageId":"600","endLine":190,"endColumn":32},{"ruleId":"597","severity":1,"message":"598","line":214,"column":42,"nodeType":"599","messageId":"600","endLine":214,"endColumn":44},{"ruleId":"597","severity":1,"message":"598","line":261,"column":27,"nodeType":"599","messageId":"600","endLine":261,"endColumn":29},{"ruleId":"632","severity":1,"message":"633","line":273,"column":47,"nodeType":"620","messageId":"634","endLine":273,"endColumn":49},{"ruleId":"730","severity":1,"message":"731","line":303,"column":38,"nodeType":"732","endLine":303,"endColumn":57},{"ruleId":"632","severity":1,"message":"633","line":316,"column":39,"nodeType":"620","messageId":"634","endLine":316,"endColumn":41},{"ruleId":"597","severity":1,"message":"598","line":319,"column":17,"nodeType":"599","messageId":"600","endLine":319,"endColumn":19},{"ruleId":"632","severity":1,"message":"633","line":328,"column":27,"nodeType":"620","messageId":"634","endLine":328,"endColumn":29},{"ruleId":"632","severity":1,"message":"633","line":338,"column":39,"nodeType":"620","messageId":"634","endLine":338,"endColumn":41},{"ruleId":"588","severity":1,"message":"638","line":1,"column":27,"nodeType":"590","messageId":"591","endLine":1,"endColumn":36},{"ruleId":"588","severity":1,"message":"733","line":8,"column":23,"nodeType":"590","messageId":"591","endLine":8,"endColumn":37},{"ruleId":"597","severity":1,"message":"598","line":12,"column":56,"nodeType":"599","messageId":"600","endLine":12,"endColumn":58},{"ruleId":"588","severity":1,"message":"734","line":5,"column":9,"nodeType":"590","messageId":"591","endLine":5,"endColumn":20},{"ruleId":"588","severity":1,"message":"733","line":5,"column":22,"nodeType":"590","messageId":"591","endLine":5,"endColumn":36},{"ruleId":"588","severity":1,"message":"596","line":1,"column":10,"nodeType":"590","messageId":"591","endLine":1,"endColumn":19},{"ruleId":"588","severity":1,"message":"735","line":3,"column":8,"nodeType":"590","messageId":"591","endLine":3,"endColumn":12},{"ruleId":"588","severity":1,"message":"736","line":5,"column":9,"nodeType":"590","messageId":"591","endLine":5,"endColumn":13},{"ruleId":"588","severity":1,"message":"737","line":7,"column":7,"nodeType":"590","messageId":"591","endLine":7,"endColumn":13},{"ruleId":"588","severity":1,"message":"593","line":2,"column":17,"nodeType":"590","messageId":"591","endLine":2,"endColumn":25},{"ruleId":"648","severity":1,"message":"649","line":72,"column":9,"nodeType":"590","messageId":"650","endLine":72,"endColumn":15},{"ruleId":"648","severity":1,"message":"649","line":83,"column":9,"nodeType":"590","messageId":"650","endLine":83,"endColumn":15},{"ruleId":"588","severity":1,"message":"738","line":1,"column":10,"nodeType":"590","messageId":"591","endLine":1,"endColumn":16},{"ruleId":"645","severity":1,"message":"646","line":24,"column":9,"nodeType":"647","endLine":24,"endColumn":25},{"ruleId":"645","severity":1,"message":"646","line":25,"column":9,"nodeType":"647","endLine":25,"endColumn":28},{"ruleId":"645","severity":1,"message":"646","line":26,"column":9,"nodeType":"647","endLine":26,"endColumn":27},{"ruleId":"588","severity":1,"message":"739","line":3,"column":7,"nodeType":"590","messageId":"591","endLine":3,"endColumn":11},{"ruleId":"645","severity":1,"message":"646","line":9,"column":7,"nodeType":"647","endLine":9,"endColumn":25},{"ruleId":"588","severity":1,"message":"616","line":12,"column":11,"nodeType":"590","messageId":"591","endLine":12,"endColumn":22},{"ruleId":"632","severity":1,"message":"633","line":26,"column":38,"nodeType":"620","messageId":"634","endLine":26,"endColumn":40},{"ruleId":"632","severity":1,"message":"633","line":40,"column":41,"nodeType":"620","messageId":"634","endLine":40,"endColumn":43},{"ruleId":"645","severity":1,"message":"646","line":66,"column":17,"nodeType":"647","endLine":66,"endColumn":35},{"ruleId":"665","severity":1,"message":"666","line":216,"column":9,"nodeType":"647","endLine":219,"endColumn":8},{"ruleId":"588","severity":1,"message":"601","line":1,"column":27,"nodeType":"590","messageId":"591","endLine":1,"endColumn":35},{"ruleId":"588","severity":1,"message":"740","line":2,"column":38,"nodeType":"590","messageId":"591","endLine":2,"endColumn":42},{"ruleId":"588","severity":1,"message":"603","line":2,"column":51,"nodeType":"590","messageId":"591","endLine":2,"endColumn":58},{"ruleId":"588","severity":1,"message":"741","line":2,"column":60,"nodeType":"590","messageId":"591","endLine":2,"endColumn":66},{"ruleId":"588","severity":1,"message":"616","line":14,"column":9,"nodeType":"590","messageId":"591","endLine":14,"endColumn":20},{"ruleId":"618","severity":1,"message":"619","line":20,"column":15,"nodeType":"620","endLine":38,"endColumn":8},{"ruleId":"618","severity":1,"message":"719","line":38,"column":10,"nodeType":"622","endLine":38,"endColumn":12,"suggestions":"742"},{"ruleId":"632","severity":1,"message":"633","line":42,"column":25,"nodeType":"620","messageId":"634","endLine":42,"endColumn":27},{"ruleId":"588","severity":1,"message":"743","line":51,"column":13,"nodeType":"590","messageId":"591","endLine":51,"endColumn":16},{"ruleId":"632","severity":1,"message":"633","line":52,"column":31,"nodeType":"620","messageId":"634","endLine":52,"endColumn":33},{"ruleId":"632","severity":1,"message":"633","line":76,"column":27,"nodeType":"620","messageId":"634","endLine":76,"endColumn":29},{"ruleId":"632","severity":1,"message":"633","line":90,"column":27,"nodeType":"620","messageId":"634","endLine":90,"endColumn":29},{"ruleId":"632","severity":1,"message":"633","line":108,"column":24,"nodeType":"620","messageId":"634","endLine":108,"endColumn":26},{"ruleId":"721","severity":1,"message":"722","line":135,"column":35,"nodeType":"599","messageId":"723","endLine":135,"endColumn":36},{"ruleId":"588","severity":1,"message":"744","line":2,"column":9,"nodeType":"590","messageId":"591","endLine":2,"endColumn":17},{"ruleId":"588","severity":1,"message":"745","line":16,"column":12,"nodeType":"590","messageId":"591","endLine":16,"endColumn":22},{"ruleId":"588","severity":1,"message":"746","line":17,"column":12,"nodeType":"590","messageId":"591","endLine":17,"endColumn":20},{"ruleId":"618","severity":1,"message":"619","line":24,"column":15,"nodeType":"620","endLine":53,"endColumn":6},{"ruleId":"618","severity":1,"message":"747","line":53,"column":8,"nodeType":"622","endLine":53,"endColumn":10,"suggestions":"748"},{"ruleId":"632","severity":1,"message":"633","line":71,"column":31,"nodeType":"620","messageId":"634","endLine":71,"endColumn":33},{"ruleId":"632","severity":1,"message":"633","line":81,"column":28,"nodeType":"620","messageId":"634","endLine":81,"endColumn":30},{"ruleId":"632","severity":1,"message":"633","line":90,"column":31,"nodeType":"620","messageId":"634","endLine":90,"endColumn":33},{"ruleId":"632","severity":1,"message":"633","line":125,"column":35,"nodeType":"620","messageId":"634","endLine":125,"endColumn":37},{"ruleId":"632","severity":1,"message":"633","line":157,"column":27,"nodeType":"620","messageId":"634","endLine":157,"endColumn":29},{"ruleId":"588","severity":1,"message":"749","line":3,"column":8,"nodeType":"590","messageId":"591","endLine":3,"endColumn":14},{"ruleId":"632","severity":1,"message":"633","line":10,"column":27,"nodeType":"620","messageId":"634","endLine":10,"endColumn":29},{"ruleId":"581","replacedBy":"750"},{"ruleId":"583","replacedBy":"751"},{"ruleId":"618","severity":1,"message":"652","line":17,"column":5,"nodeType":"622","endLine":17,"endColumn":21,"suggestions":"752"},"no-native-reassign",["753"],"no-negated-in-lhs",["754"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'jwt' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'useState' is defined but never used.","'Radio' is defined but never used.","'id' is assigned a value but never used.","'findProps' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setState' is defined but never used.","'Input' is defined but never used.","'message' is defined but never used.","'getQuotes' is defined but never used.","'getAddress' is defined but never used.","'getUser' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'confirm' is assigned a value but never used.","'Option' is assigned a value but never used.","'history' is assigned a value but never used.","'setaddressinfo' is assigned a value but never used.","'quoteList' is assigned a value but never used.","'setQuoteList' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'currentDate' is assigned a value but never used.","'formData' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'createTable', 'match', and 'testData'. Either include them or remove the dependency array.","ArrayExpression",["755"],"'findSalesman' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'regions' and 'salesmen'. Either include them or remove the dependency array.",["756"],"'getRegion' is defined but never used.","React Hook useEffect has missing dependencies: 'getAddressList' and 'match'. Either include them or remove the dependency array.",["757"],"'result' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'addressList' is assigned a value but never used.","'setaddresses' is assigned a value but never used.","'form1' is assigned a value but never used.","'useEffect' is defined but never used.","'Component' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'getDate' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-redeclare","'values' is already defined.","redeclared","'getOverlappingDaysInIntervals' is defined but never used.","React Hook useEffect has a missing dependency: 'data.AddressID'. Either include it or remove the dependency array.",["758"],"'addCustomer' is assigned a value but never used.","'addAddress' is assigned a value but never used.","'A' is defined but never used.",["753"],["754"],["753"],["754"],"The 'selectedQuote' conditional could make the dependencies of useEffect Hook (at line 77) change on every render. To fix this, wrap the initialization of 'selectedQuote' in its own useMemo() Hook.","VariableDeclarator","'quoteData' is assigned a value but never used.","'setQuoteFormData' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'getAddressID' is defined but never used.","'getCustomerID' is defined but never used.","'getUserID' is defined but never used.","'getQuoteID' is defined but never used.","'allData' is assigned a value but never used.","'setQuoteData' is assigned a value but never used.","'quoteDetail' is assigned a value but never used.","'customerData' is assigned a value but never used.","'setCustomerData' is assigned a value but never used.","'addressData' is assigned a value but never used.","'setAddressData' is assigned a value but never used.","'userData' is assigned a value but never used.","'productList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'counter', 'createDetails', 'quoteID', 'quotedetails', and 'setText'. Either include them or remove the dependency array. You can also do a functional update 'setcounter(c => ...)' if you only need 'counter' in the 'setcounter' call.",["759"],"'custID' is assigned a value but never used.","'bindCustID' is assigned a value but never used.","'resetCustID' is assigned a value but never used.","'bindFirstName' is assigned a value but never used.","'resetFirstName' is assigned a value but never used.","'bindLastName' is assigned a value but never used.","'resetLastName' is assigned a value but never used.","'bindBillingAddress' is assigned a value but never used.","'resetBillingAddress' is assigned a value but never used.","'bindCity' is assigned a value but never used.","'resetCity' is assigned a value but never used.","'bindPostCode' is assigned a value but never used.","'resetPostCode' is assigned a value but never used.","'bindPhoneNumber' is assigned a value but never used.","'resetPhoneNumber' is assigned a value but never used.","'bindEmail' is assigned a value but never used.","'resetEmail' is assigned a value but never used.","'addressID' is assigned a value but never used.","'bindAddressID' is assigned a value but never used.","'resetAddressID' is assigned a value but never used.","'assignAddressID' is assigned a value but never used.","'bindSiteAddress' is assigned a value but never used.","'resetSiteAddress' is assigned a value but never used.","'bindSiteCity' is assigned a value but never used.","'resetSiteCity' is assigned a value but never used.","'bindSiteCode' is assigned a value but never used.","'resetSiteCode' is assigned a value but never used.","'bindSiteProv' is assigned a value but never used.","'resetSiteProv' is assigned a value but never used.","'resetCustomerNotes' is assigned a value but never used.","'resetInstallerNotes' is assigned a value but never used.","'bindUserFirstName' is assigned a value but never used.","'resetUserFirstName' is assigned a value but never used.","'bindUserLastName' is assigned a value but never used.","'resetUserLastName' is assigned a value but never used.","'prodEdit' is assigned a value but never used.","'newProd' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'testData'. Either include it or remove the dependency array.",["760"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'useRouteMatch' is defined but never used.","'value' is assigned a value but never used.","'bind' is assigned a value but never used.","'data' is assigned a value but never used.","The 'selectedQuote' conditional could make the dependencies of useEffect Hook (at line 55) change on every render. To fix this, wrap the initialization of 'selectedQuote' in its own useMemo() Hook.","'handleSubmitEvent' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setQuoteDataId' is assigned a value but never used.","'quoteDataId' is assigned a value but never used.","'Text' is defined but never used.","'Card' is defined but never used.","'footer' is assigned a value but never used.","'Center' is defined but never used.","'logo' is assigned a value but never used.","'Form' is defined but never used.","'Select' is defined but never used.",["761"],"'arr' is assigned a value but never used.","'useInput' is defined but never used.","'detailData' is assigned a value but never used.","'prodData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'createDetails', 'quoteData', and 'quoteID'. Either include them or remove the dependency array.",["762"],"'format' is assigned a value but never used.",["753"],["754"],["763"],"no-global-assign","no-unsafe-negation",{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"768","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},{"desc":"774","fix":"775"},{"desc":"774","fix":"776"},{"desc":"777","fix":"778"},{"desc":"770","fix":"779"},"Update the dependencies array to be: [createTable, match, tableData.length, testData]",{"range":"780","text":"781"},"Update the dependencies array to be: [regions, salesmen]",{"range":"782","text":"783"},"Update the dependencies array to be: [count, getAddressList, match]",{"range":"784","text":"785"},"Update the dependencies array to be: [address.length, data.AddressID]",{"range":"786","text":"787"},"Update the dependencies array to be: [counter, createDetails, quoteID, quotedetails, setText]",{"range":"788","text":"789"},"Update the dependencies array to be: [testData]",{"range":"790","text":"791"},{"range":"792","text":"791"},"Update the dependencies array to be: [createDetails, quoteData, quoteID]",{"range":"793","text":"794"},{"range":"795","text":"787"},[1440,1458],"[createTable, match, tableData.length, testData]",[4609,4611],"[regions, salesmen]",[2335,2342],"[count, getAddressList, match]",[803,819],"[address.length, data.AddressID]",[1975,1977],"[counter, createDetails, quoteID, quotedetails, setText]",[1322,1324],"[testData]",[1312,1314],[1688,1690],"[createDetails, quoteData, quoteID]",[461,477]]